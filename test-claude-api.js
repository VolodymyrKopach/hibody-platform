#!/usr/bin/env node

// Simple test script for Claude API
// Use global fetch (Node.js 18+) or require node-fetch for older versions
const fetch = globalThis.fetch || require('node-fetch');

const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY;
const CLAUDE_API_URL = 'https://api.anthropic.com/v1/messages';

async function testClaudeHaiku(message) {
  const prompt = `
–¢–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü—ñ—ó –Ω–∞–º—ñ—Ä—ñ–≤ –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞–≤—á–∞–ª—å–Ω–∏—Ö —É—Ä–æ–∫—ñ–≤.

–ê–Ω–∞–ª—ñ–∑—É–π –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –≤–∏–∑–Ω–∞—á–∞–π:
1. –ù–ê–ú–Ü–† (intent) - –æ–¥–Ω–µ –∑: CREATE_LESSON, EDIT_PLAN, GENERATE_SLIDE, HELP, FREE_CHAT
2. –í–ü–ï–í–ù–ï–ù–Ü–°–¢–¨ (confidence) - —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 1
3. –ü–ê–†–ê–ú–ï–¢–†–ò - –≤–∏—Ç—è–≥–Ω–∏ topic, age, slideNumber, targetElement
4. –î–û–°–¢–ê–¢–ù–Ü–°–¢–¨ –î–ê–ù–ò–• - —á–∏ —î –≤—Å—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
5. –í–Ü–î–°–£–¢–ù–Ü –î–ê–ù–Ü - —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —â–µ –∑–∞–ø–∏—Ç–∞—Ç–∏

–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: "${message}"

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π JSON:
{
  "intent": "CREATE_LESSON",
  "confidence": 0.95,
  "parameters": {
    "topic": "–¥–∏–Ω–æ–∑–∞–≤—Ä–∏",
    "age": "8 —Ä–æ–∫—ñ–≤"
  },
  "isDataSufficient": true/false,
  "missingData": ["age"],
  "suggestedQuestion": "–î–ª—è —è–∫–æ–≥–æ –≤—ñ–∫—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫?"
}`;

  try {
    console.log('üîç Testing Claude Haiku API...');
    
    const response = await fetch(CLAUDE_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': CLAUDE_API_KEY,
        'anthropic-version': '2023-06-01',
      },
      body: JSON.stringify({
        model: 'claude-3-haiku-20240307',
        max_tokens: 1024,
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ]
      })
    });

    const data = await response.json();
    
    if (!response.ok) {
      console.error('‚ùå Claude API Error:', data);
      return null;
    }

    console.log('‚úÖ Claude Haiku Response:');
    console.log(data.content[0].text);
    
    try {
      const parsed = JSON.parse(data.content[0].text);
      console.log('‚úÖ Parsed JSON:', JSON.stringify(parsed, null, 2));
      return parsed;
    } catch (parseError) {
      console.error('‚ùå JSON Parse Error:', parseError.message);
      return null;
    }
    
  } catch (error) {
    console.error('‚ùå Network Error:', error.message);
    return null;
  }
}

async function testClaudeSonnet(topic, age) {
  const prompt = `
–°—Ç–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω —É—Ä–æ–∫—É –¥–ª—è –¥—ñ—Ç–µ–π –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ.

–¢–µ–º–∞: ${topic}
–í—ñ–∫: ${age}

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–ª–∞–Ω—É:
- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Ä–æ–∫—É (—Ü—ñ–∫–∞–≤–∏–π, –¥–∏—Ç—è—á–∏–π)
- –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (–∞–¥–∞–ø—Ç–æ–≤–∞–Ω–∞ –ø—ñ–¥ –≤—ñ–∫)
- –ú–µ—Ç–∞ —É—Ä–æ–∫—É
- 5 —Å–ª–∞–π–¥—ñ–≤ –∑ –æ–ø–∏—Å–æ–º –∫–æ–∂–Ω–æ–≥–æ:
  * –¢–∏–ø —Å–ª–∞–π–¥—É (–≤—Å—Ç—É–ø–Ω–∏–π, –Ω–∞–≤—á–∞–ª—å–Ω–∏–π, –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å, summary)
  * –ó–º—ñ—Å—Ç
  * –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
  * –ú–µ—Ç–∞ —Å–ª–∞–π–¥—É

–ê–¥–∞–ø—Ç—É–π —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Ç–∞ –º–æ–≤—É –ø—ñ–¥ –≤–∫–∞–∑–∞–Ω–∏–π –≤—ñ–∫.`;

  try {
    console.log('üé® Testing Claude Sonnet API...');
    
    const response = await fetch(CLAUDE_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': CLAUDE_API_KEY,
        'anthropic-version': '2023-06-01',
      },
      body: JSON.stringify({
        model: 'claude-3-sonnet-20240229',
        max_tokens: 2048,
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ]
      })
    });

    const data = await response.json();
    
    if (!response.ok) {
      console.error('‚ùå Claude API Error:', data);
      return null;
    }

    console.log('‚úÖ Claude Sonnet Response:');
    console.log(data.content[0].text);
    return data.content[0].text;
    
  } catch (error) {
    console.error('‚ùå Network Error:', error.message);
    return null;
  }
}

async function main() {
  console.log('üöÄ Claude API Test Script');
  console.log('==========================\n');
  
  if (!CLAUDE_API_KEY) {
    console.error('‚ùå CLAUDE_API_KEY environment variable not set');
    console.log('üí° Set it with: export CLAUDE_API_KEY=your_key_here');
    process.exit(1);
  }
  
  console.log('‚úÖ Claude API key found');
  console.log('üìù API Key preview:', CLAUDE_API_KEY.substring(0, 15) + '...\n');
  
  // Test 1: Complete message
  console.log('üß™ Test 1: Complete message with all data');
  const result1 = await testClaudeHaiku('—Å—Ç–≤–æ—Ä–∏ —É—Ä–æ–∫ –ø—Ä–æ –¥–∏–Ω–æ–∑–∞–≤—Ä—ñ–≤ –¥–ª—è –¥–∏—Ç–∏–Ω–∏ 8 —Ä–æ–∫—ñ–≤');
  
  if (result1 && result1.isDataSufficient) {
    console.log('\nüé® Test 1.1: Generate lesson plan with Sonnet');
    await testClaudeSonnet(result1.parameters.topic, result1.parameters.age);
  }
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // Test 2: Incomplete message
  console.log('üß™ Test 2: Incomplete message (missing age)');
  const result2 = await testClaudeHaiku('—Ö–æ—á—É —É—Ä–æ–∫ –ø—Ä–æ —Ç–≤–∞—Ä–∏–Ω');
  
  console.log('\n' + '='.repeat(50) + '\n');
  
  // Test 3: Unclear message
  console.log('üß™ Test 3: Unclear message');
  const result3 = await testClaudeHaiku('–º–æ–∂–Ω–∞ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ?');
  
  console.log('\nüéâ Tests completed!');
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testClaudeHaiku, testClaudeSonnet }; 