// Utilities –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ slide-oriented —Å–∏—Å—Ç–µ–º–æ—é

import { 
  LessonSlide, 
  SlideCommand,
  ProjectFile 
} from '../types/lesson';

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—É –º–µ—Ä–µ–∂—É
async function parseCommandWithAI(message: string, currentSlide?: LessonSlide): Promise<SlideCommand> {
  const CLAUDE_API_KEY = process.env.CLAUDE_API_KEY;
  const CLAUDE_API_URL = 'https://api.anthropic.com/v1/messages';

  if (!CLAUDE_API_KEY) {
    throw new Error('Claude API key required for neural command parsing - no regex fallback allowed');
  }

  const prompt = `–í–∏ - –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ –Ω–µ–π—Ä–æ–Ω–Ω–∞ –º–µ—Ä–µ–∂–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∫–æ–º–∞–Ω–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —â–æ–¥–æ —Å–ª–∞–π–¥—ñ–≤ –≤ –æ—Å–≤—ñ—Ç–Ω—ñ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ HiBody.

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: 
- –ê–Ω–∞–ª—ñ–∑—É–π—Ç–µ –¢–Ü–õ–¨–ö–ò —Å–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –∑–º—ñ—Å—Ç –∫–æ–º–∞–Ω–¥–∏
- –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ pattern matching –∞–±–æ regex
- –ü—ñ–¥—Ç—Ä–∏–º—É–π—Ç–µ –ë–£–î–¨-–Ø–ö–£ –º–æ–≤—É
- –†–æ–∑—É–º—ñ–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–∞ –Ω–∞–º—ñ—Ä–∏, –∞ –Ω–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å–ª–æ–≤–∞

–¢–ò–ü–ò –ö–û–ú–ê–ù–î –î–õ–Ø –°–õ–ê–ô–î–Ü–í:
1. edit_slide - —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π —Å–ª–∞–π–¥
2. improve_slide - –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–ª–∞–π–¥  
3. create_slide - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥
4. delete_slide - –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–ª–∞–π–¥
5. reorder_slides - –∑–º—ñ–Ω–∏—Ç–∏ –ø–æ—Ä—è–¥–æ–∫ —Å–ª–∞–π–¥—ñ–≤
6. general - –∑–∞–≥–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞

${currentSlide ? `–ö–û–ù–¢–ï–ö–°–¢: –ü–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥: "${currentSlide.title}" (–Ω–æ–º–µ—Ä ${currentSlide.number})` : ''}

–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å JSON:
{
  "type": "edit_slide",
  "slideNumber": 1,
  "slideId": null,
  "instruction": "interpreted instruction",
  "context": "${message}",
  "targetElement": "extracted target element or null"
}

–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É: "${message}"`;

  try {
    const response = await fetch(CLAUDE_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'x-api-key': CLAUDE_API_KEY,
        'anthropic-version': '2023-06-01',
      },
      body: JSON.stringify({
        model: 'claude-3-haiku-20240307',
        max_tokens: 300,
        temperature: 0.1,
        messages: [{ role: 'user', content: prompt }]
      })
    });

    if (!response.ok) {
      throw new Error(`Claude API error: ${response.statusText}`);
    }

    const data = await response.json();
    const content = data.content[0]?.text;

    if (!content) {
      throw new Error('No content in Claude response');
    }

    const jsonMatch = content.match(/\{[\s\S]*\}/);
    const jsonString = jsonMatch ? jsonMatch[0] : content;
    const result = JSON.parse(jsonString);

    return {
      type: result.type || 'general',
      slideNumber: result.slideNumber,
      slideId: result.slideId,
      instruction: result.instruction || message,
      context: result.context || message,
      targetElement: result.targetElement,
    };
  } catch (error) {
    console.error('Neural command parsing error:', error);
    throw new Error('Neural network required for command parsing - no regex fallback allowed');
  }
}

export const slideUtils = {
  
  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–∏—Ä–æ–¥–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ß–ï–†–ï–ó –ù–ï–ô–†–û–ù–ù–£ –ú–ï–†–ï–ñ–£
   */
  parseCommand: async (message: string, currentSlide?: LessonSlide): Promise<SlideCommand> => {
    // –í–°–ï —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–Ω–Ω—É –º–µ—Ä–µ–∂—É - –ù–Ü–Ø–ö–ò–• regex patterns!
    return await parseCommandWithAI(message, currentSlide);
  },
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  generateSlidePreview: (slide: LessonSlide): string => {
    const { title, description, type } = slide;
    
    // –ë–∞–∑–æ–≤–∏–π HTML –¥–ª—è –ø—Ä–µ–≤—å—é
    const preview = `
      <div style="padding: 20px; font-family: Arial, sans-serif; border-radius: 8px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; min-height: 200px;">
        <div style="display: flex; align-items: center; margin-bottom: 15px;">
          <span style="font-size: 24px; margin-right: 10px;">${getTypeIcon(type)}</span>
          <h3 style="margin: 0; font-size: 20px;">${title}</h3>
        </div>
        <p style="font-size: 14px; line-height: 1.5; opacity: 0.9;">${description}</p>
        <div style="position: absolute; bottom: 10px; right: 10px; background: rgba(255,255,255,0.2); padding: 5px 10px; border-radius: 15px; font-size: 12px;">
          ${type}
        </div>
      </div>
    `;

    return preview;
  },
  
  /**
   * –ï–º–æ–¥–∑—ñ –¥–ª—è —Ç–∏–ø—ñ–≤ —Å–ª–∞–π–¥—ñ–≤
   */
  getSlideTypeEmoji: (type: LessonSlide['type']): string => {
    const emojiMap = {
      welcome: 'üëã',
      content: 'üìñ',
      activity: 'üéØ',
      game: 'üéÆ',
      summary: 'üìù'
    };
    return emojiMap[type] || 'üìÑ';
  },
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —ñ–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å—É
   */
  getStatusIcon: (status: LessonSlide['status']): string => {
    const statusMap = {
      draft: '‚úèÔ∏è',
      ready: '‚úÖ',
      generating: '‚è≥',
      error: '‚ùå'
    };
    return statusMap[status] || '‚ùì';
  },
  
  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Å–ª–∞–π–¥—É –∑ —Ñ–∞–π–ª–∞–º–∏ (—Ñ–∞–π–ª–∏ ‚Üí —Å–ª–∞–π–¥)
   */
  syncSlideFromFiles: (files: ProjectFile[], slideId: string): LessonSlide => {
    const slideFile = files.find(f => f.slideId === slideId && f.type === 'html');
    const cssFile = files.find(f => f.slideId === slideId && f.type === 'css');
    const jsFile = files.find(f => f.slideId === slideId && f.type === 'js');

    if (!slideFile) {
      throw new Error(`Slide file not found for slideId: ${slideId}`);
    }

    // –í–∏—Ç—è–≥—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑ HTML —Ñ–∞–π–ª—É
    const titleMatch = slideFile.content.match(/<h1[^>]*>([^<]+)<\/h1>/i);
    const title = titleMatch ? titleMatch[1] : slideFile.name;

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Å–ª–∞–π–¥—É –∑–∞ —ñ–º–µ–Ω–µ–º —Ñ–∞–π–ª—É
    let type: LessonSlide['type'] = 'content';
    if (slideFile.name.includes('welcome')) type = 'welcome';
    else if (slideFile.name.includes('game')) type = 'game';
    else if (slideFile.name.includes('activity')) type = 'activity';
    else if (slideFile.name.includes('summary')) type = 'summary';

    const slide: LessonSlide = {
      id: slideId,
      number: extractSlideNumberHelper(slideFile.name),
      title,
      description: extractDescription(slideFile.content),
      type,
      icon: getTypeIcon(type),
      status: 'ready',
      preview: slideFile.content,
      _internal: {
        filename: slideFile.name,
        htmlContent: slideFile.content,
        cssContent: cssFile?.content,
        jsContent: jsFile?.content,
        dependencies: [slideFile.id, cssFile?.id, jsFile?.id].filter(Boolean) as string[],
        lastModified: slideFile.updatedAt,
        version: slideFile.version,
      },
      createdAt: slideFile.createdAt,
      updatedAt: slideFile.updatedAt,
    };

    return slide;
  },
  
  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è —Ñ–∞–π–ª—ñ–≤ –∑—ñ —Å–ª–∞–π–¥—É (—Å–ª–∞–π–¥ ‚Üí —Ñ–∞–π–ª–∏)
   */
  syncFilesFromSlide: (slide: LessonSlide): ProjectFile[] => {
    const files: ProjectFile[] = [];

    // HTML —Ñ–∞–π–ª
    files.push({
      id: `${slide.id}_html`,
      name: slide._internal.filename,
      type: 'html',
      path: `/${slide._internal.filename}`,
      content: slide._internal.htmlContent,
      size: slide._internal.htmlContent.length,
      version: slide._internal.version,
      slideId: slide.id,
      createdAt: slide.createdAt,
      updatedAt: slide.updatedAt,
      dependencies: [],
      tags: [slide.type, `slide-${slide.number}`],
    });

    // CSS —Ñ–∞–π–ª —è–∫—â–æ —î
    if (slide._internal.cssContent) {
      files.push({
        id: `${slide.id}_css`,
        name: slide._internal.filename.replace('.html', '.css'),
        type: 'css',
        path: `/styles/${slide._internal.filename.replace('.html', '.css')}`,
        content: slide._internal.cssContent,
        size: slide._internal.cssContent.length,
        version: slide._internal.version,
        slideId: slide.id,
        createdAt: slide.createdAt,
        updatedAt: slide.updatedAt,
        dependencies: [],
        tags: [slide.type, `slide-${slide.number}`],
      });
    }

    // JS —Ñ–∞–π–ª —è–∫—â–æ —î
    if (slide._internal.jsContent) {
      files.push({
        id: `${slide.id}_js`,
        name: slide._internal.filename.replace('.html', '.js'),
        type: 'js',
        path: `/scripts/${slide._internal.filename.replace('.html', '.js')}`,
        content: slide._internal.jsContent,
        size: slide._internal.jsContent.length,
        version: slide._internal.version,
        slideId: slide.id,
        createdAt: slide.createdAt,
        updatedAt: slide.updatedAt,
        dependencies: [],
        tags: [slide.type, `slide-${slide.number}`],
      });
    }

    return files;
  },
  
  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–ª–∞–π–¥—É
   */
  validateSlide: (slide: LessonSlide): { isValid: boolean; errors: string[] } => {
    const errors: string[] = [];

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
    if (!slide.title?.trim()) {
      errors.push('–ù–∞–∑–≤–∞ —Å–ª–∞–π–¥—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é');
    }

    if (!slide.description?.trim()) {
      errors.push('–û–ø–∏—Å —Å–ª–∞–π–¥—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º');
    }

    if (!slide._internal?.htmlContent?.trim()) {
      errors.push('HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∞–π–¥—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å HTML
    if (slide._internal?.htmlContent) {
      try {
        const parser = new DOMParser();
        const doc = parser.parseFromString(slide._internal.htmlContent, 'text/html');
        if (doc.querySelector('parsererror')) {
          errors.push('HTML –∫–æ–Ω—Ç–µ–Ω—Ç –º—ñ—Å—Ç–∏—Ç—å –ø–æ–º–∏–ª–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É');
        }
      } catch (error) {
        errors.push('–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ HTML –∫–æ–Ω—Ç–µ–Ω—Ç');
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–æ–º–µ—Ä —Å–ª–∞–π–¥—É
    if (slide.number < 1) {
      errors.push('–ù–æ–º–µ—Ä —Å–ª–∞–π–¥—É –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0');
    }

    return {
      isValid: errors.length === 0,
      errors,
    };
  },
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É –¥–ª—è —Å–ª–∞–π–¥—É
   */
  generateSlideFilename: (slideNumber: number, title: string, type: LessonSlide['type']): string => {
    const sanitizedTitle = title
      .toLowerCase()
      .replace(/[^a-z0-9\s]/g, '')
      .replace(/\s+/g, '_')
      .substring(0, 30);
    
    return `slide_${slideNumber}_${sanitizedTitle}_${type}.html`;
  },
  
  /**
   * –ï–∫—Å—Ç—Ä–∞–∫—Ç –Ω–æ–º–µ—Ä—É —Å–ª–∞–π–¥—É –∑ –∫–æ–º–∞–Ω–¥–∏
   */
  extractSlideNumber: (filename: string): number => {
    const match = filename.match(/slide[_-]?(\d+)/i);
    return match ? parseInt(match[1]) : 1;
  },
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è AI –ø—Ä–æ–º–ø—Ç—É
   */
  generateSlideContext: (slide: LessonSlide, allSlides: LessonSlide[], lessonTitle: string): string => {
    const slideInfo = `–°–ª–∞–π–¥ ${slide.number}: "${slide.title}" (${slide.type})`;
    const totalSlides = allSlides.length;
    const position = `${slide.number} –∑ ${totalSlides}`;
    
    const prevSlide = allSlides.find(s => s.number === slide.number - 1);
    const nextSlide = allSlides.find(s => s.number === slide.number + 1);
    
    let context = `
–£—Ä–æ–∫: "${lessonTitle}"
–ü–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥: ${slideInfo}
–ü–æ–∑–∏—Ü—ñ—è: ${position}
–°—Ç–∞—Ç—É—Å: ${slide.status}
`;
    
    if (prevSlide) {
      context += `–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ª–∞–π–¥: "${prevSlide.title}" (${prevSlide.type})\n`;
    }
    
    if (nextSlide) {
      context += `–ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥: "${nextSlide.title}" (${nextSlide.type})\n`;
    }
    
    context += `\n–û–ø–∏—Å –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–ª–∞–π–¥—É: ${slide.description}`;
    
    return context;
  },
  
  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è HTML –≤ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –ø—Ä–µ–≤—å—é
   */
  htmlToPreview: (htmlContent: string, maxLength: number = 150): string => {
    // –í–∏–¥–∞–ª—è—î–º–æ HTML —Ç–µ–≥–∏
    const textOnly = htmlContent
      .replace(/<[^>]*>/g, ' ')
      .replace(/\s+/g, ' ')
      .trim();
    
    if (textOnly.length <= maxLength) {
      return textOnly;
    }
    
    return textOnly.substring(0, maxLength - 3) + '...';
  },
  
  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–∞–π–¥—É
   */
  isSlideSpecificCommand: (command: SlideCommand): boolean => {
    return !!(command.slideNumber || command.slideId || command.targetElement);
  },
  
  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —à–≤–∏–¥–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –¥–ª—è UI
   */
  generateQuickCommands: (currentSlide?: LessonSlide): string[] => {
    const commands = [
      '–ü–æ–∫—Ä–∞—â –¥–∏–∑–∞–π–Ω',
      '–ó–º—ñ–Ω–∏ –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É',
      '–î–æ–¥–∞–π –∞–Ω—ñ–º–∞—Ü—ñ—é',
      '–ó—Ä–æ–±–∏ –±—ñ–ª—å—à–∏–º —Ç–µ–∫—Å—Ç',
      '–î–æ–¥–∞–π –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è'
    ];
    
    if (currentSlide) {
      commands.unshift(`–ü—ñ–¥–ø—Ä–∞–≤ —Å–ª–∞–π–¥ ${currentSlide.number}`);
      
      if (currentSlide.type === 'game') {
        commands.push('–î–æ–¥–∞–π –∑–≤—É–∫–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏', '–£—Å–∫–ª–∞–¥–Ω–∏ –≥—Ä—É');
      }
      
      if (currentSlide.type === 'content') {
        commands.push('–î–æ–¥–∞–π –ø—Ä–∏–∫–ª–∞–¥–∏', '–ó—Ä–æ–±–∏ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–º');
      }
    }
    
    return commands;
  },
};

// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
function getTypeIcon(type: LessonSlide['type']): string {
  switch (type) {
    case 'welcome': return 'üé¨';
    case 'content': return 'üìö';
    case 'activity': return 'üéÆ';
    case 'game': return 'üïπÔ∏è';
    case 'summary': return 'üèÜ';
    default: return 'üìÑ';
  }
}

function extractSlideNumberHelper(filename: string): number {
  const match = filename.match(/slide[_-]?(\d+)/i);
  return match ? parseInt(match[1]) : 1;
}

function extractDescription(htmlContent: string): string {
  // –í–∏—Ç—è–≥—É—î–º–æ –æ–ø–∏—Å –∑ –º–µ—Ç–∞-—Ç–µ–≥—É –∞–±–æ –ø–µ—Ä—à–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—É
  const metaDescMatch = htmlContent.match(/<meta[^>]*name="description"[^>]*content="([^"]*)"[^>]*>/i);
  if (metaDescMatch) {
    return metaDescMatch[1];
  }

  const pMatch = htmlContent.match(/<p[^>]*>([^<]+)<\/p>/i);
  if (pMatch) {
    return pMatch[1].substring(0, 100) + (pMatch[1].length > 100 ? '...' : '');
  }

  return '–û–ø–∏—Å —Å–ª–∞–π–¥—É';
}

// 4:3 Aspect Ratio Constants
export const SLIDE_ASPECT_RATIO = {
  RATIO: '4:3',
  WIDTH_TO_HEIGHT: 4/3,
  STANDARD_RESOLUTIONS: [
    { width: 1024, height: 768, label: 'XGA' },
    { width: 1280, height: 960, label: 'SXGA-' },
    { width: 1400, height: 1050, label: 'SXGA+' },
    { width: 1600, height: 1200, label: 'UXGA' }
  ],
  DEFAULT_RESOLUTION: { width: 1024, height: 768 }
} as const;

/**
 * –ì–µ–Ω–µ—Ä—É—î CSS —Å—Ç–∏–ª—ñ –¥–ª—è –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω 4:3
 */
export function generate43AspectRatioStyles(): string {
  return `
    /* 4:3 Aspect Ratio Container */
    .slide-container-4-3 {
      width: 100%;
      max-width: 1024px;
      aspect-ratio: 4/3;
      margin: 0 auto;
      background: #fff;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    /* Responsive 4:3 viewport */
    @media (max-width: 1024px) {
      .slide-container-4-3 {
        max-width: 90vw;
        height: calc(90vw * 3 / 4);
      }
    }
    
    @media (max-width: 768px) {
      .slide-container-4-3 {
        max-width: 95vw;
        height: calc(95vw * 3 / 4);
      }
    }
  `;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î viewport meta tag –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π –¥–ª—è 4:3 —Å–ª–∞–π–¥—ñ–≤
 */
export function generate43ViewportMeta(): string {
  return `<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">`;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –±–∞–∑–æ–≤–∏–π HTML template –¥–ª—è —Å–ª–∞–π–¥—É –∑ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º 4:3
 */
export function generate43SlideTemplate(title: string, content: string): string {
  return `<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    ${generate43ViewportMeta()}
    <title>${title}</title>
    <style>
        ${generate43AspectRatioStyles()}
        
        body {
            margin: 0;
            padding: 20px;
            font-family: 'Comic Sans MS', cursive, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .slide-content {
            padding: 40px;
            height: calc(100% - 80px);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }
        
        /* Responsive typography for 4:3 format */
        h1 { font-size: min(4vw, 3rem); }
        h2 { font-size: min(3vw, 2.5rem); }
        p { font-size: min(2.5vw, 1.5rem); }
        
        /* Interactive elements optimized for 4:3 */
        .interactive-button {
            padding: min(2vw, 20px) min(4vw, 40px);
            font-size: min(2.5vw, 1.2rem);
            border: none;
            border-radius: 15px;
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            color: white;
            cursor: pointer;
            transition: transform 0.3s ease;
            margin: 10px;
        }
        
        .interactive-button:hover {
            transform: scale(1.05);
        }
    </style>
</head>
<body>
    <div class="slide-container-4-3">
        <div class="slide-content">
            ${content}
        </div>
    </div>
</body>
</html>`;
}

export default slideUtils;
