// –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å –≤ —Å–ª–∞–π–¥–∞—Ö
import { generateImage, type ImageGenerationRequest, type ImageGenerationResponse } from './imageGeneration';

export interface ImagePromptComment {
  fullComment: string;
  prompt: string;
  width: number;
  height: number;
  index: number; // –ø–æ–∑–∏—Ü—ñ—è –≤ HTML
}

export interface ProcessedSlideData {
  htmlWithImages: string;
  generatedImages: GeneratedImageInfo[];
  processingErrors: string[];
}

export interface GeneratedImageInfo {
  prompt: string;
  width: number;
  height: number;
  base64Image: string;
  model: string;
  success: boolean;
}

// Regex –¥–ª—è –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è IMAGE_PROMPT –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤
const IMAGE_COMMENT_REGEX = /<!--\s*IMAGE_PROMPT:\s*"([^"]+)"\s+WIDTH:\s*(\d+)\s+HEIGHT:\s*(\d+)\s*-->/gi;

/**
 * –í–∏—Ç—è–≥—É—î –≤—Å—ñ IMAGE_PROMPT –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∑ HTML
 */
export function extractImagePrompts(htmlContent: string): ImagePromptComment[] {
  const prompts: ImagePromptComment[] = [];
  let match;
  
  // Reset regex lastIndex
  IMAGE_COMMENT_REGEX.lastIndex = 0;
  
  while ((match = IMAGE_COMMENT_REGEX.exec(htmlContent)) !== null) {
    const [fullComment, prompt, widthStr, heightStr] = match;
    const width = parseInt(widthStr);
    const height = parseInt(heightStr);
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–æ–∑–º—ñ—Ä—ñ–≤ (–º–∞—é—Ç—å –±—É—Ç–∏ –∫—Ä–∞—Ç–Ω—ñ 16 –¥–ª—è FLUX)
    if (width % 16 !== 0 || height % 16 !== 0) {
      console.warn(`‚ö†Ô∏è Image dimensions must be divisible by 16. Found: ${width}x${height}`);
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ—Ä–µ–≥—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏
      const correctedWidth = Math.round(width / 16) * 16;
      const correctedHeight = Math.round(height / 16) * 16;
      console.log(`üîß Auto-correcting to: ${correctedWidth}x${correctedHeight}`);
      
      prompts.push({
        fullComment,
        prompt: prompt.trim(),
        width: correctedWidth,
        height: correctedHeight,
        index: match.index
      });
      continue;
    }
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏—Ö —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ (–∑–Ω–∏–∂—É—î–º–æ –º—ñ–Ω—ñ–º—É–º –¥–æ 128)
    if (width < 128 || height < 128 || width > 1536 || height > 1536) {
      console.warn(`‚ö†Ô∏è Image dimensions out of range (128-1536). Found: ${width}x${height}`);
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ—Ä–µ–≥—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏
      const clampedWidth = Math.min(Math.max(width, 128), 1536);
      const clampedHeight = Math.min(Math.max(height, 128), 1536);
      
      // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ —Å–∫–æ—Ä–µ–≥–æ–≤–∞–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –∫—Ä–∞—Ç–Ω—ñ 16
      const correctedWidth = Math.round(clampedWidth / 16) * 16;
      const correctedHeight = Math.round(clampedHeight / 16) * 16;
      
      console.log(`üîß Auto-correcting to: ${correctedWidth}x${correctedHeight}`);
      
      prompts.push({
        fullComment,
        prompt: prompt.trim(),
        width: correctedWidth,
        height: correctedHeight,
        index: match.index
      });
      continue;
    }
    
    prompts.push({
      fullComment,
      prompt: prompt.trim(),
      width,
      height,
      index: match.index
    });
  }
  
  console.log(`üîç Found ${prompts.length} image prompts in HTML`);
  return prompts;
}

/**
 * –í–∞–ª—ñ–¥—É—î —Ç–∞ –∫–æ—Ä–µ–≥—É—î —Ä–æ–∑–º—ñ—Ä–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è FLUX API
 */
export function validateAndFixDimensions(width: number, height: number): { width: number; height: number } {
  // –û–∫—Ä—É–≥–ª—é—î–º–æ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —á–∏—Å–ª–∞ –∫—Ä–∞—Ç–Ω–æ–≥–æ 16
  const fixedWidth = Math.round(width / 16) * 16;
  const fixedHeight = Math.round(height / 16) * 16;
  
  // –û–±–º–µ–∂—É—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω (–∑–Ω–∏–∂—É—î–º–æ –º—ñ–Ω—ñ–º—É–º –¥–æ 128)
  const clampedWidth = Math.min(Math.max(fixedWidth, 128), 1536);
  const clampedHeight = Math.min(Math.max(fixedHeight, 128), 1536);
  
  if (clampedWidth !== width || clampedHeight !== height) {
    console.log(`üìê Fixed dimensions: ${width}x${height} ‚Üí ${clampedWidth}x${clampedHeight}`);
  }
  
  return { width: clampedWidth, height: clampedHeight };
}

/**
 * –§—É–Ω–∫—Ü—ñ—è –∑–∞—Ç—Ä–∏–º–∫–∏ –¥–ª—è rate limiting
 */
function delay(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms));
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ retry –ª–æ–≥—ñ–∫–æ—é
 */
async function generateImageWithRetry(imageRequest: ImageGenerationRequest, maxRetries: number = 3): Promise<ImageGenerationResponse> {
  let lastError = '';
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ Attempt ${attempt}/${maxRetries}...`);
      
      const result = await generateImage(imageRequest);
      
      if (result.success && result.image) {
        if (attempt > 1) {
          console.log(`‚úÖ Success on attempt ${attempt}!`);
        }
        return result;
      }
      
      lastError = result.error || 'Unknown error';
      console.log(`‚ùå Attempt ${attempt} failed: ${lastError}`);
      
      // –Ø–∫—â–æ —Ü–µ –Ω–µ –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞, —á–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é
      if (attempt < maxRetries) {
        const delayTime = attempt === 1 && lastError.includes('rate limit') ? 2000 : 1000;
        console.log(`‚è±Ô∏è Waiting ${delayTime/1000} seconds before retry...`);
        await delay(delayTime);
      }
      
    } catch (error) {
      lastError = error instanceof Error ? error.message : 'Network error';
      console.log(`üí• Attempt ${attempt} threw exception: ${lastError}`);
      
      if (attempt < maxRetries) {
        console.log(`‚è±Ô∏è Waiting 1 second before retry...`);
        await delay(1000);
      }
    }
  }
  
  // –í—Å—ñ —Å–ø—Ä–æ–±–∏ –Ω–µ –≤–¥–∞–ª–∏—Å—è
  return {
    success: false,
    error: `Failed after ${maxRetries} attempts. Last error: ${lastError}`
  };
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –∑ –∑–∞—Ç—Ä–∏–º–∫–∞–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limiting
 */
export async function generateAllImages(prompts: ImagePromptComment[]): Promise<GeneratedImageInfo[]> {
  if (prompts.length === 0) {
    console.log('üì∑ No image prompts found, skipping image generation');
    return [];
  }
  
  console.log(`üöÄ Starting sequential generation of ${prompts.length} images (with rate limiting)...`);
  
  const results: GeneratedImageInfo[] = [];
  
  // –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é 1.5 —Å–µ–∫—É–Ω–¥–∏ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏
  for (let index = 0; index < prompts.length; index++) {
    const promptData = prompts[index];
    const { width, height } = validateAndFixDimensions(promptData.width, promptData.height);
    
    console.log(`üì∏ [${index + 1}/${prompts.length}] Generating: "${promptData.prompt.substring(0, 50)}..." (${width}x${height})`);
    
    try {
      const imageRequest: ImageGenerationRequest = {
        prompt: promptData.prompt,
        width,
        height
      };
      
      // –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ retry —Å–ø—Ä–æ–±–∞–º–∏
      const result = await generateImageWithRetry(imageRequest, 3);
      
      if (result.success && result.image) {
        console.log(`‚úÖ [${index + 1}/${prompts.length}] Generated successfully`);
        results.push({
          prompt: promptData.prompt,
          width,
          height,
          base64Image: result.image,
          model: result.model || 'FLUX.1-schnell',
          success: true
        });
      } else {
        console.error(`‚ùå [${index + 1}/${prompts.length}] Generation failed:`, result.error);
        results.push({
          prompt: promptData.prompt,
          width,
          height,
          base64Image: '',
          model: 'FLUX.1-schnell',
          success: false
        });
      }
    } catch (error) {
      console.error(`üí• [${index + 1}/${prompts.length}] Exception during generation:`, error);
      results.push({
        prompt: promptData.prompt,
        width: promptData.width,
        height: promptData.height,
        base64Image: '',
        model: 'FLUX.1-schnell',
        success: false
      });
    }
    
    // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∑–∞–ø–∏—Ç–∞–º–∏ (–∫—Ä—ñ–º –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ)
    if (index < prompts.length - 1) {
      console.log(`‚è±Ô∏è Waiting 2 seconds before next image (rate limiting)...`);
      await delay(2000);
    }
  }
  
  const successful = results.filter(r => r.success).length;
  const failed = results.length - successful;
  
  console.log(`üéØ Image generation complete: ${successful} successful, ${failed} failed`);
  
  // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–µ—É—Å–ø—ñ—à–Ω—ñ —Å–ø—Ä–æ–±–∏
  if (failed > 0) {
    console.log(`‚ùå Failed images details:`);
    results.forEach((result, index) => {
      if (!result.success) {
        console.log(`   ${index + 1}. "${result.prompt.substring(0, 40)}..." - ${result.model || 'unknown'}`);
      }
    });
  }
  
  return results;
}

/**
 * –ó–∞–º—ñ–Ω—é—î IMAGE_PROMPT –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ img —Ç–µ–≥–∏ –∑ base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
 */
export function replaceImageComments(
  htmlContent: string, 
  prompts: ImagePromptComment[], 
  generatedImages: GeneratedImageInfo[]
): string {
  if (prompts.length === 0 || generatedImages.length === 0) {
    return htmlContent;
  }
  
  let processedHtml = htmlContent;
  
  // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –≤—ñ–¥ –∫—ñ–Ω—Ü—è –¥–æ –ø–æ—á–∞—Ç–∫—É —â–æ–± –Ω–µ –∑—ñ–ø—Å—É–≤–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å–∏
  for (let i = prompts.length - 1; i >= 0; i--) {
    const prompt = prompts[i];
    const imageData = generatedImages[i];
    
    if (imageData && imageData.success && imageData.base64Image) {
      // –°—Ç–≤–æ—Ä—é—î–º–æ img —Ç–µ–≥ –∑ base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º
      const imgTag = `<img src="data:image/webp;base64,${imageData.base64Image}" 
        alt="${imageData.prompt}" 
        width="${imageData.width}" 
        height="${imageData.height}"
        style="max-width: 100%; height: auto; border-radius: 8px; box-shadow: 0 4px 8px rgba(0,0,0,0.1);"
        loading="lazy" />`;
      
      // –ó–∞–º—ñ–Ω—é—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –Ω–∞ img —Ç–µ–≥
      processedHtml = processedHtml.replace(prompt.fullComment, imgTag);
      
      console.log(`üîÑ Replaced comment ${i + 1}: "${prompt.prompt.substring(0, 30)}..."`);
    } else {
      // –Ø–∫—â–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ –≤–¥–∞–ª–∞—Å—è, –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ placeholder
      const placeholderImg = `<div style="
        width: ${prompt.width}px; 
        height: ${prompt.height}px; 
        background: linear-gradient(45deg, #f0f0f0, #e0e0e0);
        border: 2px dashed #ccc;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #666;
        font-family: 'Comic Sans MS', cursive;
        text-align: center;
        font-size: 14px;
        max-width: 100%;
      ">
        üñºÔ∏è<br/>–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è<br/>–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ
      </div>`;
      
      processedHtml = processedHtml.replace(prompt.fullComment, placeholderImg);
      
      console.log(`üîÑ Replaced failed comment ${i + 1} with placeholder`);
    }
  }
  
  return processedHtml;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Å–ª–∞–π–¥—É –∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
 */
export async function processSlideWithImages(htmlContent: string): Promise<ProcessedSlideData> {
  const processingErrors: string[] = [];
  
  try {
    console.log('üé® Starting slide image processing...');
    
    // 1. –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ IMAGE_PROMPT –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    const imagePrompts = extractImagePrompts(htmlContent);
    
    if (imagePrompts.length === 0) {
      console.log('üìù No image prompts found in slide');
      return {
        htmlWithImages: htmlContent,
        generatedImages: [],
        processingErrors: []
      };
    }
    
    // 2. –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—Å—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
    const generatedImages = await generateAllImages(imagePrompts);
    
    // 3. –ó–∞–º—ñ–Ω—é—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const htmlWithImages = replaceImageComments(htmlContent, imagePrompts, generatedImages);
    
    // 4. –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–º–∏–ª–∫–∏
    generatedImages.forEach((img, index) => {
      if (!img.success) {
        processingErrors.push(`Failed to generate image ${index + 1}: "${img.prompt.substring(0, 50)}..."`);
      }
    });
    
    console.log('‚úÖ Slide image processing completed');
    
    return {
      htmlWithImages,
      generatedImages,
      processingErrors
    };
    
  } catch (error) {
    console.error('üí• Error in slide image processing:', error);
    processingErrors.push(`Processing error: ${error instanceof Error ? error.message : 'Unknown error'}`);
    
    return {
      htmlWithImages: htmlContent, // –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π HTML
      generatedImages: [],
      processingErrors
    };
  }
} 