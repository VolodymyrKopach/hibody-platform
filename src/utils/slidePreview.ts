import html2canvas from 'html2canvas';
import { toPng } from 'html-to-image';

export interface SlidePreviewOptions {
  width?: number;
  height?: number;
  quality?: number;
  scale?: number;
  background?: string;
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—É –∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É
 */
export async function generateSlidePreview(
  htmlContent: string,
  options: SlidePreviewOptions = {}
): Promise<string> {
  const {
    width = 1600,        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
    height = 1200,       // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∏—Å–æ—Ç–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
    quality = 0.8,
    scale = 1,
    background = '#ffffff'
  } = options;

  return new Promise((resolve, reject) => {
    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π iframe –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É HTML
      const iframe = document.createElement('iframe');
      iframe.style.position = 'absolute';
      iframe.style.top = '-9999px';
      iframe.style.left = '-9999px';
      iframe.style.width = `${width}px`;
      iframe.style.height = `${height}px`;
      iframe.style.border = 'none';
      iframe.style.background = background;
      iframe.style.visibility = 'hidden';
      
      document.body.appendChild(iframe);

      // Timeout –¥–ª—è –±–µ–∑–ø–µ–∫–∏ (–∑–±—ñ–ª—å—à—É—î–º–æ –¥–æ 20 —Å–µ–∫—É–Ω–¥)
      const timeoutId = setTimeout(() => {
        console.warn('Timeout –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—É');
        if (document.body.contains(iframe)) {
          document.body.removeChild(iframe);
        }
        reject(new Error('Timeout –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é'));
      }, 20000);

      iframe.onload = async () => {
        try {
          const iframeDocument = iframe.contentDocument || iframe.contentWindow?.document;
          if (!iframeDocument) {
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ iframe –¥–æ–∫—É–º–µ–Ω—Ç—É');
          }

          console.log('‚è∞ –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ–π...');
          // –ü—Ä–æ—Å—Ç–æ —á–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –∞–Ω—ñ–º–∞—Ü—ñ–π
          await new Promise(resolve => setTimeout(resolve, 5000));

          console.log('üì∏ –°—Ç–≤–æ—Ä—é—î–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ–π...');

          // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–µ–≤—å—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é html2canvas
          const canvas = await html2canvas(iframeDocument.body, {
            width,
            height,
            scale,
            backgroundColor: background,
            useCORS: true,
            allowTaint: true,
            foreignObjectRendering: true,
            logging: false,
            removeContainer: true,
            imageTimeout: 8000
          });

          // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ base64
          const dataUrl = canvas.toDataURL('image/png', quality);
          
          // –û—á–∏—â—É—î–º–æ —Ä–µ—Å—É—Ä—Å–∏
          clearTimeout(timeoutId);
          if (document.body.contains(iframe)) {
            document.body.removeChild(iframe);
          }
          
          console.log('‚úÖ –ü—Ä–µ–≤—å—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—ñ—Å–ª—è 5-—Å–µ–∫—É–Ω–¥–Ω–æ–≥–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è');
          resolve(dataUrl);
        } catch (error) {
          clearTimeout(timeoutId);
          if (document.body.contains(iframe)) {
            document.body.removeChild(iframe);
          }
          console.error('–ü–æ–º–∏–ª–∫–∞ html2canvas:', error);
          reject(error);
        }
      };

      iframe.onerror = (error) => {
        clearTimeout(timeoutId);
        if (document.body.contains(iframe)) {
          document.body.removeChild(iframe);
        }
        console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è iframe:', error);
        reject(new Error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è iframe'));
      };

      // –û–ø—Ç–∏–º—ñ–∑—É—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫—Ä–∞—â–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é
      const optimizedHtml = optimizeHtmlForPreviewWithAnimations(htmlContent);
      iframe.srcdoc = optimizedHtml;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è iframe:', error);
      reject(error);
    }
  });
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –∑ –º–µ–Ω—à –∞–≥—Ä–µ—Å–∏–≤–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é
 */
export async function generateSlidePreviewAlt(
  htmlContent: string,
  options: SlidePreviewOptions = {}
): Promise<string> {
  const {
    width = 1600,        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —à–∏—Ä–∏–Ω–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
    height = 1200,       // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∏—Å–æ—Ç–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
    quality = 0.8,
    scale = 1,
    background = '#ffffff'
  } = options;

  return new Promise((resolve, reject) => {
    try {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–µ–≤—å—é
      const container = document.createElement('div');
      container.style.position = 'absolute';
      container.style.top = '-9999px';
      container.style.left = '-9999px';
      container.style.width = `${width}px`;
      container.style.height = `${height}px`;
      container.style.overflow = 'hidden';
      container.style.background = background;
      container.style.visibility = 'hidden';
      
      document.body.appendChild(container);

      // Timeout –¥–ª—è –±–µ–∑–ø–µ–∫–∏
      const timeoutId = setTimeout(() => {
        console.warn('Timeout –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ–π –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é');
        if (document.body.contains(container)) {
          document.body.removeChild(container);
        }
        reject(new Error('Timeout –ø—Ä–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ–π –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é'));
      }, 15000);

      try {
        // –î–æ–¥–∞—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç
        container.innerHTML = htmlContent;

        // –ü—Ä–æ—Å—Ç–∏–π –º–µ—Ç–æ–¥ - —á–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ —ñ —Ä–æ–±–∏–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç
        setTimeout(async () => {
          try {
            console.log('üì∏ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥: —Å—Ç–≤–æ—Ä—é—î–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');

            const canvas = await html2canvas(container, {
              width,
              height,
              scale,
              backgroundColor: background,
              useCORS: true,
              allowTaint: true,
              foreignObjectRendering: true,
              logging: false,
              removeContainer: true,
              imageTimeout: 5000
            });

            const dataUrl = canvas.toDataURL('image/png', quality);
            
            clearTimeout(timeoutId);
            if (document.body.contains(container)) {
              document.body.removeChild(container);
            }
            
            console.log('‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–µ –ø—Ä–µ–≤—å—é —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
            resolve(dataUrl);
          } catch (error) {
            clearTimeout(timeoutId);
            if (document.body.contains(container)) {
              document.body.removeChild(container);
            }
            console.error('–ü–æ–º–∏–ª–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ html2canvas:', error);
            reject(error);
          }
        }, 5000);

      } catch (error) {
        clearTimeout(timeoutId);
        if (document.body.contains(container)) {
          document.body.removeChild(container);
        }
        console.error('–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', error);
        reject(error);
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥—É:', error);
      reject(error);
    }
  });
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –º—ñ–Ω—ñ–∞—Ç—é—Ä—É —Å–ª–∞–π–¥—É –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º fallback
 */
export async function generateSlideThumbnail(
  htmlContent: string, 
  options: SlidePreviewOptions = {}
): Promise<string> {
  console.log('üñºÔ∏è –ü–æ—á–∏–Ω–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—É...');
  
  try {
    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑ 5-—Å–µ–∫—É–Ω–¥–Ω–∏–º –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è–º
    const preview = await generateSlidePreview(htmlContent, options);
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–∏–≤ –ø—Ä–µ–≤—å—é');
    return preview;
  } catch (error) {
    console.warn('‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –Ω–µ –≤–¥–∞–≤—Å—è, –ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π...', error);
    
    try {
      // –Ø–∫—â–æ –æ—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –Ω–µ –≤–¥–∞–≤—Å—è, –ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π
      const alternativePreview = await generateSlidePreviewAlt(htmlContent, options);
      console.log('‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–∏–≤ –ø—Ä–µ–≤—å—é');
      return alternativePreview;
    } catch (altError) {
      console.warn('‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥ —Ç–µ–∂ –Ω–µ –≤–¥–∞–≤—Å—è, —Å—Ç–≤–æ—Ä—é—î–º–æ fallback –ø—Ä–µ–≤—å—é...', altError);
      
      // –Ø–∫—â–æ –æ–±–∏–¥–≤–∞ –º–µ—Ç–æ–¥–∏ –Ω–µ –≤–¥–∞–ª–∏—Å—è, —Å—Ç–≤–æ—Ä—é—î–º–æ fallback –ø—Ä–µ–≤—å—é
      const fallbackPreview = generateFallbackPreview(options);
      console.log('‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ fallback –ø—Ä–µ–≤—å—é');
      return fallbackPreview;
    }
  }
}

/**
 * –ì–µ–Ω–µ—Ä—É—î –ø—Ä–µ–≤—å—é –¥–ª—è –≤—Å—ñ—Ö —Å–ª–∞–π–¥—ñ–≤ —É—Ä–æ–∫—É
 */
export async function generateLessonPreviews(
  slides: Array<{ id: string; htmlContent: string }>,
  options: SlidePreviewOptions = {}
): Promise<Array<{ slideId: string; preview: string; thumbnail: string }>> {
  const results: Array<{ slideId: string; preview: string; thumbnail: string }> = [];
  
  for (const slide of slides) {
    try {
      console.log(`–ì–µ–Ω–µ—Ä—É—é –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}...`);
      
      const [preview, thumbnail] = await Promise.all([
        generateSlidePreview(slide.htmlContent, options),
        generateSlideThumbnail(slide.htmlContent, options)
      ]);

      results.push({
        slideId: slide.id,
        preview,
        thumbnail
      });
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}:`, error);
      
      // –ì–µ–Ω–µ—Ä—É—î–º–æ fallback –ø—Ä–µ–≤—å—é
      const fallbackPreview = generateFallbackPreview(options);
      results.push({
        slideId: slide.id,
        preview: fallbackPreview,
        thumbnail: fallbackPreview
      });
    }
  }

  return results;
}

/**
 * –°—Ç–≤–æ—Ä—é—î fallback –ø—Ä–µ–≤—å—é —É –≤–∏–≥–ª—è–¥—ñ –≥—Ä–∞–¥—ñ—î–Ω—Ç—É –∑ —Ç–µ–∫—Å—Ç–æ–º
 */
export function generateFallbackPreview(options: SlidePreviewOptions = {}): string {
  const {
    width = 640,         // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —à–∏—Ä–∏–Ω–∞ –¥–ª—è fallback –ø—Ä–µ–≤—å—é
    height = 480,        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –≤–∏—Å–æ—Ç–∞ –¥–ª—è fallback –ø—Ä–µ–≤—å—é
    background = '#ffffff'
  } = options;
  
  const canvas = document.createElement('canvas');
  canvas.width = width;
  canvas.height = height;
  
  const ctx = canvas.getContext('2d');
  if (!ctx) {
    console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ 2D –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è fallback –ø—Ä–µ–≤—å—é');
    return '';
  }
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫—Ä–∞—Å–∏–≤–∏–π –≥—Ä–∞–¥—ñ—î–Ω—Ç
  const gradient = ctx.createLinearGradient(0, 0, width, height);
  gradient.addColorStop(0, '#667eea');
  gradient.addColorStop(0.5, '#764ba2');
  gradient.addColorStop(1, '#f093fb');
  
  // –ó–∞–ª–∏–≤–∞—î–º–æ —Ñ–æ–Ω –≥—Ä–∞–¥—ñ—î–Ω—Ç–æ–º
  ctx.fillStyle = gradient;
  ctx.fillRect(0, 0, width, height);
  
  // –î–æ–¥–∞—î–º–æ –Ω–∞–ø—ñ–≤–ø—Ä–æ–∑–æ—Ä–∏–π —Ñ–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç—É
  ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
  ctx.fillRect(width * 0.2, height * 0.4, width * 0.6, height * 0.2);
  
  // –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç
  ctx.fillStyle = '#333333';
  ctx.font = `${Math.floor(width / 20)}px Arial, sans-serif`;
  ctx.textAlign = 'center';
  ctx.textBaseline = 'middle';
  
  const text = '–ü—Ä–µ–≤\'—é —Å–ª–∞–π–¥—É';
  const emoji = 'üìã';
  
  ctx.fillText(emoji, width / 2, height / 2 - 20);
  ctx.fillText(text, width / 2, height / 2 + 20);
  
  return canvas.toDataURL('image/png', 0.8);
}

/**
 * –ó–±–µ—Ä—ñ–≥–∞—î –ø—Ä–µ–≤—å—é —è–∫ —Ñ–∞–π–ª —É –ø—É–±–ª—ñ—á–Ω—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
 */
export async function savePreviewAsFile(
  previewDataUrl: string,
  lessonId: string,
  slideId: string
): Promise<string> {
  try {
    const response = await fetch('/api/images/slide', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        imageData: previewDataUrl,
        lessonId,
        slideId,
        type: 'preview'
      })
    });

    if (!response.ok) {
      throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é');
    }

    const result = await response.json();
    return result.imagePath;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é —è–∫ —Ñ–∞–π–ª:', error);
    throw error;
  }
}

/**
 * –í–∏—Ç—è–≥—É—î DOM –µ–ª–µ–º–µ–Ω—Ç –∑ HTML —Ä—è–¥–∫–∞ –¥–ª—è –ø—Ä–µ–≤—å—é
 */
export function extractPreviewElement(htmlContent: string): HTMLElement | null {
  const parser = new DOMParser();
  const doc = parser.parseFromString(htmlContent, 'text/html');
  
  // –®—É–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–∞–π–¥—É
  let slideElement = doc.querySelector('.slide') as HTMLElement;
  
  if (!slideElement) {
    slideElement = doc.querySelector('[class*="slide"]') as HTMLElement;
  }
  
  if (!slideElement) {
    slideElement = doc.body;
  }

  return slideElement;
}

/**
 * –û–ø—Ç–∏–º—ñ–∑—É—î HTML –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é (–≤–∏–¥–∞–ª—è—î —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏)
 */
export function optimizeHtmlForPreview(htmlContent: string): string {
  const parser = new DOMParser();
  const doc = parser.parseFromString(htmlContent, 'text/html');

  // –í–∏–¥–∞–ª—è—î–º–æ —Å–∫—Ä–∏–ø—Ç–∏
  const scripts = doc.querySelectorAll('script');
  scripts.forEach(script => script.remove());

  // –í–∏–¥–∞–ª—è—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
  const interactive = doc.querySelectorAll('button, input, select, textarea, video, audio');
  interactive.forEach(el => {
    // –ó–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ —Å—Ç–∞—Ç–∏—á–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    const staticEl = doc.createElement('div');
    staticEl.className = el.className;
    staticEl.style.cssText = (el as HTMLElement).style.cssText;
    staticEl.textContent = el.textContent || 'Interactive Element';
    el.parentNode?.replaceChild(staticEl, el);
  });

  return doc.documentElement.outerHTML;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º—ñ—Å—Ç–∏—Ç—å HTML –∫–æ–Ω—Ç–µ–Ω—Ç –∞–Ω—ñ–º–∞—Ü—ñ—ó
 */
export function hasAnimations(htmlContent: string): boolean {
  const animationPatterns = [
    /animation\s*:/,
    /transition\s*:/,
    /@keyframes/,
    /transform\s*:/,
    /animate/i,
    /fadeIn/i,
    /slideIn/i,
    /bounceIn/i,
    /rotateIn/i,
    /data-aos/i,
    /aos-/i
  ];
  
  return animationPatterns.some(pattern => pattern.test(htmlContent));
}

/**
 * –û–ø—Ç–∏–º—ñ–∑—É—î HTML –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∞–Ω—ñ–º–∞—Ü—ñ–π —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
 */
export function optimizeHtmlForPreviewWithAnimations(htmlContent: string): string {
  let optimizedHtml = optimizeHtmlForPreview(htmlContent);
  
  // –ó–∞–º—ñ–Ω—é—î–º–æ –ø—Ä–æ–±–ª–µ–º–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞ CSS placeholder'–∏
  optimizedHtml = replaceImagesWithPlaceholders(optimizedHtml);
  
  // –Ø–∫—â–æ —î –∞–Ω—ñ–º–∞—Ü—ñ—ó, –¥–æ–¥–∞—î–º–æ CSS –¥–ª—è –ø—Ä–∏—Å–∫–æ—Ä–µ–Ω–Ω—è
  if (hasAnimations(optimizedHtml)) {
    const speedUpAnimationsCSS = `
      <style>
        *, *::before, *::after {
          animation-duration: 0.1s !important;
          animation-delay: 0s !important;
          transition-duration: 0.1s !important;
          transition-delay: 0s !important;
        }
        [data-aos] {
          animation-duration: 0.1s !important;
        }
        
        /* –°—Ç–∏–ª—ñ –¥–ª—è placeholder –∑–æ–±—Ä–∞–∂–µ–Ω—å */
        .image-placeholder {
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          border-radius: 8px;
          display: flex !important;
          align-items: center;
          justify-content: center;
          font-size: 24px;
          color: white;
          text-shadow: 0 2px 4px rgba(0,0,0,0.3);
          min-width: 150px;
          min-height: 100px;
        }
      </style>
    `;
    
    // –î–æ–¥–∞—î–º–æ CSS –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä–∏–≤–∞—é—á–∏–º —Ç–µ–≥–æ–º head –∞–±–æ body
    if (optimizedHtml.includes('</head>')) {
      optimizedHtml = optimizedHtml.replace('</head>', speedUpAnimationsCSS + '</head>');
    } else if (optimizedHtml.includes('</body>')) {
      optimizedHtml = optimizedHtml.replace('</body>', speedUpAnimationsCSS + '</body>');
    } else {
      optimizedHtml = speedUpAnimationsCSS + optimizedHtml;
    }
  }
  
  return optimizedHtml;
}

/**
 * –ó–∞–º—ñ–Ω—é—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –¥–∂–µ—Ä–µ–ª –Ω–∞ CSS placeholder'–∏
 */
function replaceImagesWithPlaceholders(htmlContent: string): string {
  const parser = new DOMParser();
  const doc = parser.parseFromString(htmlContent, 'text/html');
  
  const images = doc.querySelectorAll('img');
  
  images.forEach((img, index) => {
    const src = img.getAttribute('src');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞ –∞–±–æ –º–æ–∂–µ –±—É—Ç–∏ –ø—Ä–æ–±–ª–µ–º–Ω–∏–º
    const isExternal = src && (
      src.startsWith('http://') || 
      src.startsWith('https://') ||
      src.startsWith('//') ||
      src.includes('unsplash.com') ||
      src.includes('pixabay.com') ||
      src.includes('pexels.com') ||
      src.includes('freepik.com')
    );
    
    const isDataUrl = src && src.startsWith('data:');
    const isEmpty = !src || src.trim() === '';
    
    if (isExternal || isEmpty) {
      console.log(`üîÑ –ó–∞–º—ñ–Ω—é—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${index + 1} –Ω–∞ placeholder (src: ${src?.substring(0, 50)}...)`);
      
      // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –∑ –∞—Ç—Ä–∏–±—É—Ç—ñ–≤ –∞–±–æ CSS
      const width = img.getAttribute('width') || img.style.width || '200px';
      const height = img.getAttribute('height') || img.style.height || '150px';
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ placeholder div
      const placeholder = doc.createElement('div');
      placeholder.className = `image-placeholder ${img.className}`;
      placeholder.style.cssText = `
        width: ${width.toString().includes('px') ? width : width + 'px'};
        height: ${height.toString().includes('px') ? height : height + 'px'};
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        color: white;
        text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        min-width: 150px;
        min-height: 100px;
        ${img.style.cssText}
      `;
      placeholder.textContent = 'üñºÔ∏è';
      
      // –ó–∞–º—ñ–Ω—é—î–º–æ img –Ω–∞ placeholder
      img.parentNode?.replaceChild(placeholder, img);
    } else if (isDataUrl) {
      console.log(`‚úÖ –ó–∞–ª–∏—à–∞—é data URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${index + 1}`);
      // Data URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ —î
    }
  });
  
  return doc.documentElement.outerHTML;
} 