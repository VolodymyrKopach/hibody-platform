'use client';

import React, { useState, useEffect, useRef, useMemo, useCallback } from 'react';
import {
  Box,
  Typography,
  TextField,
  Button,
  Paper,
  Avatar,
  IconButton,
  Tooltip,
  Fade,
  Menu,
  MenuItem,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Slide,
  Zoom,
  Checkbox,
  FormControlLabel,
  Divider,
  LinearProgress,
  CircularProgress
} from '@mui/material';
import { alpha, useTheme } from '@mui/material/styles';
import { 
  Send, 
  Bot,
  User,
  Paperclip,
  Settings,
  Layers,
  MessageSquare,
  Sparkles,
  X,
  ExternalLink,
  Download,
  Play,
  ThumbsUp, 
  ThumbsDown, 
  ChevronLeft,
  ChevronRight,
  Maximize2,
  ArrowLeft,
  ArrowRight,
  Check,
  Plus,
  Image as ImageIcon
} from 'lucide-react';
import Layout from '@/components/layout/Layout';
import { LessonStorage, SavedLesson } from '@/utils/localStorage';
import PreviewSelector from '@/components/PreviewSelector';
import { generateSlideThumbnail, generateFallbackPreview, hasAnimations } from '@/utils/slidePreview';

// –°–ø—Ä–æ—â–µ–Ω—ñ —Ç–∏–ø–∏
interface Message {
  id: number;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
  status: 'sending' | 'sent' | 'delivered';
  feedback: 'like' | 'dislike' | null;
  availableActions?: Array<{
    action: string;
    label: string;
    description: string;
  }>;
}

interface SimpleSlide {
  id: string;
  title: string;
  content: string;
  htmlContent: string;
  type: 'title' | 'content' | 'interactive' | 'summary';
  status: 'completed' | 'draft';
  previewUrl?: string; // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø—Ä–µ–≤—å—é
}

interface SimpleLesson {
  id: string;
  title: string;
  description: string;
  subject: string;
  ageGroup: string;
  duration: number;
  slides: SimpleSlide[];
  createdAt: Date;
  updatedAt: Date;
  authorId: string;
}

interface SlideUIState {
  currentLesson: SimpleLesson | null;
  selectedSlideId: string | null;
  selectedSlides: Set<string>; // –î–æ–¥–∞—î–º–æ –¥–ª—è –º–Ω–æ–∂–∏–Ω–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É —Å–ª–∞–π–¥—ñ–≤
  viewMode: 'grid' | 'list';
  slidePanelOpen: boolean;
  isGenerating: boolean;
  slideDialogOpen: boolean;
  currentSlideIndex: number;
  isSavingLesson: boolean; // –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  saveDialogOpen: boolean; // –î—ñ–∞–ª–æ–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É
}

interface SaveLessonDialogData {
  title: string;
  description: string;
  subject: string;
  ageGroup: string;
  selectedPreviewId: string | null;
  previewUrl: string | null;
}

// Markdown Renderer (—Å–ø—Ä–æ—â–µ–Ω–∏–π)
const MarkdownRenderer = ({ content }: { content: string }) => {
  const theme = useTheme();
  
  const formatText = (text: string) => {
    return text
      // Headers
      .replace(/^### (.*$)/gm, '<h3>$1</h3>')
      .replace(/^## (.*$)/gm, '<h2>$1</h2>')
      .replace(/^# (.*$)/gm, '<h1>$1</h1>')
      
      // Horizontal rules
      .replace(/^---$/gm, '<hr>')
      
      // Bold and italic
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      
      // Inline code
      .replace(/`(.*?)`/g, '<code>$1</code>')
      
      // Emoji bullets - –∑–∞–ª–∏—à–∞—î–º–æ —è–∫ div –∑ –µ–º–æ–¥–∑—ñ
      .replace(/^üîπ (.*$)/gm, '<div class="emoji-item">üîπ $1</div>')
      
      // –ó–≤–∏—á–∞–π–Ω—ñ —Å–ø–∏—Å–∫–∏ - –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ HTML —Å–ø–∏—Å–∫–∏
      .replace(/^([-‚Ä¢]\s.*(?:\n[-‚Ä¢]\s.*)*)/gm, (match) => {
        const items = match
          .split('\n')
          .map(line => line.replace(/^[-‚Ä¢]\s/, '').trim())
          .filter(item => item.length > 0)
          .map(item => `<li>${item}</li>`)
          .join('');
        return `<ul>${items}</ul>`;
      })
      
      // Action items
      .replace(/^‚ö° (.*$)/gm, '<div class="action-item">‚ö° $1</div>')
      
      // Blockquotes
      .replace(/^> (.*$)/gm, '<blockquote>$1</blockquote>')
      
      // Emojis
      .replace(/üìã|üìù|üéÆ|üìä|üéâ|ü§î|ü¶ñ|üë•|‚≠ê|ü¶ï|ü¶¥|ü•¨|üèÉ|ü•ö|üîç|üåü|üéØ|üîπ|‚ùì|üöÄ/g, '<span class="emoji">$&</span>')
      
      // Paragraphs
      .replace(/\n\n/g, '</p><p>')
      .replace(/\n/g, '<br>');
  };

  const processedContent = formatText(content);
  const finalContent = `<p>${processedContent}</p>`;

  return (
    <Box
      className="chat-message"
      dangerouslySetInnerHTML={{
        __html: finalContent,
      }}
      sx={{
        fontSize: '0.875rem',
        lineHeight: 1.6,
        color: theme.palette.text.primary,
        
        // Headers
        '& h1': {
          fontSize: '1.25rem',
          fontWeight: 600,
          margin: '24px 0 12px 0',
          color: theme.palette.primary.main,
          '&:first-child': { marginTop: 0 },
        },
        '& h2': {
          fontSize: '1.125rem',
          fontWeight: 600,
          margin: '20px 0 10px 0',
          color: theme.palette.primary.main,
          '&:first-child': { marginTop: 0 },
        },
        '& h3': {
          fontSize: '1rem',
          fontWeight: 600,
          margin: '16px 0 8px 0',
          color: theme.palette.primary.main,
          '&:first-child': { marginTop: 0 },
        },
        
        // Paragraphs
        '& p': {
          margin: '12px 0',
          '&:first-child': { marginTop: 0 },
          '&:last-child': { marginBottom: 0 },
          '&:empty': { display: 'none' },
        },
        
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ HTML —Å–ø–∏—Å–∫–∏
        '& ul': {
          margin: '12px 0',
          paddingLeft: '20px',
          listStyle: 'disc',
          '& li': {
            margin: '4px 0',
            lineHeight: 1.5,
          },
        },
        
        // Emoji items
        '& .emoji-item': {
          margin: '8px 0',
          paddingLeft: '4px',
          lineHeight: 1.5,
        },
        
        // Action items
        '& .action-item': {
          margin: '12px 0',
          padding: '8px 12px',
          background: 'linear-gradient(135deg, #fff8e1 0%, #ffecb3 100%)',
          borderLeft: '4px solid #ff9800',
          borderRadius: '6px',
          fontWeight: 500,
          color: '#e65100',
        },
        
        // Text formatting
        '& strong': { 
          fontWeight: 600,
          color: theme.palette.primary.main,
        },
        '& em': { 
          fontStyle: 'italic',
          color: theme.palette.text.secondary,
        },
        '& code': {
          background: '#f5f5f5',
          padding: '2px 4px',
          borderRadius: '3px',
          fontFamily: 'monospace',
          fontSize: '0.85em',
          color: '#d32f2f',
        },
        
        // Blockquotes
        '& blockquote': {
          margin: '12px 0',
          padding: '8px 12px',
          borderLeft: '4px solid #e0e0e0',
          background: '#f9f9f9',
          fontStyle: 'italic',
          color: '#666',
        },
        
        // Horizontal rules
        '& hr': {
          border: 'none',
          borderTop: '1px solid #e0e0e0',
          margin: '20px 0',
        },
        
        // Emojis
        '& .emoji': {
          fontSize: '1.1em',
          marginRight: '4px',
        },
      }}
    />
  );
};



const ChatInterface = () => {
  const theme = useTheme();
  
  // –ë–∞–∑–æ–≤—ñ —Å—Ç–∞–Ω–∏
  const [messages, setMessages] = useState<Message[]>([
    {
      id: 1,
      text: 'üéâ –ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞—à –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö —É—Ä–æ–∫—ñ–≤!\n\n**üîÑ –ù–æ–≤–∏–π –ø–æ–µ—Ç–∞–ø–Ω–∏–π –ø—Ä–æ—Ü–µ—Å:**\nüìã **–ö—Ä–æ–∫ 1:** –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—é –ø–ª–∞–Ω —É—Ä–æ–∫—É\nüé® **–ö—Ä–æ–∫ 2:** –ü–æ—Ç—ñ–º –∫–æ–∂–µ–Ω —Å–ª–∞–π–¥ –æ–∫—Ä–µ–º–æ –∑ HTML –∫–æ–¥–æ–º\nüëÄ **–ö—Ä–æ–∫ 3:** –í–∏ –∑–º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–∞ –ø–æ–∫—Ä–∞—â—É–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω —Å–ª–∞–π–¥\n\n‚ú® **–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ:**\n‚Ä¢ "–°—Ç–≤–æ—Ä–∏ —É—Ä–æ–∫ –ø—Ä–æ –¥–∏–Ω–æ–∑–∞–≤—Ä—ñ–≤ –¥–ª—è –¥—ñ—Ç–µ–π 6 —Ä–æ–∫—ñ–≤"\n‚Ä¢ "–ó—Ä–æ–±–∏ —É—Ä–æ–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –ø—Ä–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"\n‚Ä¢ "–£—Ä–æ–∫ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –ø—Ä–æ –∫–æ–ª—å–æ—Ä–∏"\n\nüöÄ **–Ø –ø—Ä–æ–≤–µ–¥—É –≤–∞—Å —á–µ—Ä–µ–∑ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å –∫—Ä–æ–∫ –∑–∞ –∫—Ä–æ–∫–æ–º!**\nüì± –°–ª–∞–π–¥–∏ –∑\'—è–≤–ª—è—Ç—å—Å—è –≤ –ø—Ä–∞–≤—ñ–π –ø–∞–Ω–µ–ª—ñ ‚û°Ô∏è',
      sender: 'ai',
      timestamp: new Date(),
      status: 'delivered',
      feedback: null
    }
  ]);
  
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [showImproveMenu, setShowImproveMenu] = useState(false);
  const [improveMenuAnchor, setImproveMenuAnchor] = useState<null | HTMLElement>(null);
  const [conversationHistory, setConversationHistory] = useState<any>(null);
  
  // Slide UI States
  const [slideUIState, setSlideUIState] = useState<SlideUIState>({
    currentLesson: null, // –ü–æ—á–∞—Ç–∫–æ–≤–æ –Ω–µ–º–∞—î —É—Ä–æ–∫—É
    selectedSlideId: null,
    selectedSlides: new Set<string>(),
    viewMode: 'grid',
    slidePanelOpen: false,
    isGenerating: false,
    slideDialogOpen: false,
    currentSlideIndex: 0,
    isSavingLesson: false,
    saveDialogOpen: false
  });

  // –°—Ç–∞–Ω –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É
  const [saveDialogData, setSaveDialogData] = useState<SaveLessonDialogData>({
    title: '',
    description: '',
    subject: '',
    ageGroup: '',
    selectedPreviewId: null,
    previewUrl: null
  });

  // –°—Ç–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—ñ–≤
  const [slidePreviews, setSlidePreviews] = useState<Record<string, string>>({});
  const [previewsUpdating, setPreviewsUpdating] = useState<Set<string>>(new Set());



  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—É (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
  const generateSlidePreview = useCallback(async (slide: SimpleSlide, forceRegenerate = false): Promise<string> => {
    // –Ø–∫—â–æ –ø—Ä–µ–≤—å—é –≤–∂–µ —ñ—Å–Ω—É—î —ñ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
    if (slidePreviews[slide.id] && !forceRegenerate) {
      console.log(`‚ôªÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–µ—à–æ–≤–∞–Ω–µ –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}`);
      return slidePreviews[slide.id];
    }

    // –î–æ–¥–∞—î–º–æ —Å–ª–∞–π–¥ –¥–æ —Å–ø–∏—Å–∫—É —Ç–∏—Ö, —â–æ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è
    setPreviewsUpdating(prev => new Set(prev).add(slide.id));

    try {
      console.log(`üéØ –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}...`);
      console.log(`üìÑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤): ${slide.htmlContent.substring(0, 200)}...`);

      // –°–ø—Ä–æ—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è thumbnail –±–µ–∑ —Å–∫–ª–∞–¥–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å
      const thumbnailUrl = await generateSlideThumbnail(slide.htmlContent, {
        maxWidth: 320,
        maxHeight: 240,
        quality: 0.85,
        background: '#ffffff'
      });

      console.log(`üéâ –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}`);
      console.log(`üìä –†–æ–∑–º—ñ—Ä thumbnail: ${Math.round(thumbnailUrl.length / 1024)}KB`);

      // –ö–µ—à—É—î–º–æ –ø—Ä–µ–≤—å—é
      setSlidePreviews(prev => ({
        ...prev,
        [slide.id]: thumbnailUrl
      }));

      // –í–∏–¥–∞–ª—è—î–º–æ –∑ —Å–ø–∏—Å–∫—É —Ç–∏—Ö, —â–æ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è
      setPreviewsUpdating(prev => {
        const newSet = new Set(prev);
        newSet.delete(slide.id);
        return newSet;
      });

      return thumbnailUrl;
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}:`, error);
      
      // –ì–µ–Ω–µ—Ä—É—î–º–æ fallback –ø—Ä–µ–≤—å—é –ó–ê–í–ñ–î–ò —á–µ—Ä–µ–∑ –Ω–∞—à—É —Ñ—É–Ω–∫—Ü—ñ—é
      console.log(`üé® –ì–µ–Ω–µ—Ä—É—î–º–æ fallback –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}...`);
      const fallbackUrl = generateFallbackPreview(slide.id);
      
      // –ö–µ—à—É—î–º–æ fallback –ø—Ä–µ–≤—å—é
      setSlidePreviews(prev => ({
        ...prev,
        [slide.id]: fallbackUrl
      }));

      // –í–∏–¥–∞–ª—è—î–º–æ –∑ —Å–ø–∏—Å–∫—É —Ç–∏—Ö, —â–æ –æ–Ω–æ–≤–ª—é—é—Ç—å—Å—è
      setPreviewsUpdating(prev => {
        const newSet = new Set(prev);
        newSet.delete(slide.id);
        return newSet;
      });

      console.log(`‚úÖ Fallback –ø—Ä–µ–≤—å—é –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}`);
      return fallbackUrl;
    }
  }, [slidePreviews]);

  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    if (messagesEndRef.current) {
      messagesEndRef.current.scrollIntoView({ behavior: "smooth" });
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É —Å–ª–∞–π–¥—ñ–≤ –∑ HTML –∫–æ–¥—É
  const parseHTMLSlides = (htmlContent: string): { lesson: SimpleLesson, slides: SimpleSlide[] } => {
    const slides: SimpleSlide[] = [];
    let lessonTitle = '–ù–æ–≤–∏–π —É—Ä–æ–∫';
    let lessonDescription = '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —É—Ä–æ–∫';
    let ageGroup = '–í—Å—ñ –≤—ñ–∫–æ–≤—ñ –≥—Ä—É–ø–∏';
    let subject = '–ó–∞–≥–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è';
    
    // Debug logging
    console.log('parseHTMLSlides called with:', {
      contentLength: htmlContent?.length,
      contentPreview: htmlContent?.substring(0, 300),
      hasHtmlBlock: htmlContent?.includes('```html'),
      hasSlideDiv: htmlContent?.includes('<div class="slide"')
    });
    
    // –í–∏—Ç—è–≥—É—î–º–æ –Ω–∞–∑–≤—É —É—Ä–æ–∫—É –∑ title –∞–±–æ h1
    const titleMatch = htmlContent.match(/<title>(.*?)<\/title>/i);
    if (titleMatch) {
      lessonTitle = titleMatch[1].replace(/\[.*?\]/g, '').trim();
    }
    
    // –í–∏—Ç—è–≥—É—î–º–æ –æ–ø–∏—Å –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –∞–±–æ –º–µ—Ç–∞-—Ç–µ–≥—ñ–≤  
    const descMatch = htmlContent.match(/(\*\*üìù –ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:\*\*\s*\*([^*]+)\*)/);
    if (descMatch) {
      lessonDescription = descMatch[2].trim();
    }
    
    // –í–∏—Ç—è–≥—É—î–º–æ –≤—ñ–∫–æ–≤—É –≥—Ä—É–ø—É
    const ageMatch = htmlContent.match(/(\*\*üë• –î–ª—è –¥—ñ—Ç–µ–π:\*\*\s*([^|]+))/);
    if (ageMatch) {
      ageGroup = ageMatch[2].trim();
    }
    
    // If this is a markdown message with HTML code block, extract the HTML first
    let actualHtmlContent = htmlContent;
    const htmlBlockMatch = htmlContent.match(/```html\n([\s\S]*?)\n```/);
    if (htmlBlockMatch) {
      actualHtmlContent = htmlBlockMatch[1];
      console.log('Extracted HTML from markdown block:', {
        extractedLength: actualHtmlContent.length,
        extractedPreview: actualHtmlContent.substring(0, 300)
      });
    }
    
    // –ü–∞—Ä—Å–∏–º–æ —Å–ª–∞–π–¥–∏ –∑ HTML
    const slideMatches = actualHtmlContent.match(/<div class="slide"[^>]*id="slide(\d+)"[^>]*>([\s\S]*?)<\/div>/g);
    
    console.log('Slide parsing results:', {
      slideMatches: slideMatches?.length || 0,
      matchesFound: slideMatches?.map((match, index) => ({
        index,
        matchLength: match.length,
        preview: match.substring(0, 150)
      }))
    });
    
    if (slideMatches) {
      slideMatches.forEach((slideHtml, index) => {
        const slideIdMatch = slideHtml.match(/id="slide(\d+)"/);
        const slideId = slideIdMatch ? slideIdMatch[1] : String(index + 1);
        
        // –í–∏—Ç—è–≥—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥—É (h1, h2)
        const titleMatch = slideHtml.match(/<h[12][^>]*>(.*?)<\/h[12]>/i);
        let title = titleMatch ? titleMatch[1].replace(/<[^>]*>/g, '').trim() : `–°–ª–∞–π–¥ ${slideId}`;
        
        // –û—á–∏—â–∞—î–º–æ emoji –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏–≥–ª—è–¥—É
        title = title.replace(/[üìãüìùüéÆüìäüéâü§îü¶ñüéÆüë•‚≠ê]/g, '').trim();
        
        // –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∞–π–¥—É
        const textMatches = slideHtml.match(/<p[^>]*>(.*?)<\/p>/gi);
        let content = '';
        if (textMatches) {
          content = textMatches
            .map(p => p.replace(/<[^>]*>/g, '').trim())
            .filter(text => text.length > 0)
            .join(' ')
            .substring(0, 100);
        }
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Å–ª–∞–π–¥—É –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        let type: 'title' | 'content' | 'interactive' | 'summary' = 'content';
        
        if (index === 0 || title.toLowerCase().includes('–ø—Ä–∏–≤—ñ—Ç') || title.toLowerCase().includes('–≤—ñ—Ç–∞—î–º–æ')) {
          type = 'title';
        } else if (title.toLowerCase().includes('–≥—Ä–∞') || slideHtml.includes('onclick=') || slideHtml.includes('button')) {
          type = 'interactive';
        } else if (index === slideMatches.length - 1 || title.toLowerCase().includes('–º–æ–ª–æ–¥—Ü—ñ') || title.toLowerCase().includes('–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è')) {
          type = 'summary';
        }
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–∏–π HTML –¥–ª—è —Å–ª–∞–π–¥—É –∑ —É—Å—ñ–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–º
        const fullSlideHTML = `
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        ${actualHtmlContent.match(/<style[^>]*>([\s\S]*?)<\/style>/i)?.[1] || ''}
        body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
        .slide { 
          position: relative; 
          width: 100%; 
          height: 100vh; 
          display: flex; 
          flex-direction: column; 
          justify-content: center; 
          align-items: center; 
          text-align: center; 
        }
    </style>
</head>
<body>
    ${slideHtml}
    ${actualHtmlContent.includes('<script>') ? `<script>${actualHtmlContent.match(/<script[^>]*>([\s\S]*?)<\/script>/i)?.[1] || ''}</script>` : ''}
</body>
</html>`;

        console.log(`Created slide ${slideId}:`, {
          title,
          type,
          contentLength: content.length,
          fullHTMLLength: fullSlideHTML.length,
          hasValidHTML: fullSlideHTML.includes('<!DOCTYPE'),
          slideHtmlPreview: slideHtml.substring(0, 200)
        });

        slides.push({
          id: `slide-${slideId}`,
          title: title || `–°–ª–∞–π–¥ ${slideId}`,
          content: content || '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç',
          htmlContent: fullSlideHTML,
          type,
          status: 'completed'
        });
      });
    } else {
      console.warn('No slide matches found in HTML content. Falling back to single slide creation.');
      // Fallback: create a single slide from the entire content if no slide divs found
      const fallbackHTML = `
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–ª–∞–π–¥</title>
    <style>
        ${actualHtmlContent.match(/<style[^>]*>([\s\S]*?)<\/style>/i)?.[1] || ''}
        body { margin: 0; padding: 20px; font-family: Arial, sans-serif; }
    </style>
</head>
<body>
    ${actualHtmlContent}
    ${actualHtmlContent.includes('<script>') ? `<script>${actualHtmlContent.match(/<script[^>]*>([\s\S]*?)<\/script>/i)?.[1] || ''}</script>` : ''}
</body>
</html>`;
      
      slides.push({
        id: 'slide-1',
        title: lessonTitle || '–°–ª–∞–π–¥ 1',
        content: '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç',
        htmlContent: fallbackHTML,
        type: 'content',
        status: 'completed'
      });
    }
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä–µ–¥–º–µ—Ç –∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    const content = htmlContent.toLowerCase();
    if (content.includes('–¥–∏–Ω–æ–∑–∞–≤—Ä')) subject = '–ü—Ä–∏—Ä–æ–¥–æ–∑–Ω–∞–≤—Å—Ç–≤–æ';
    else if (content.includes('–º–∞—Ç–µ–º') || content.includes('—á–∏—Å–ª–æ') || content.includes('–¥–æ–¥–∞–≤')) subject = '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞';
    else if (content.includes('–∞–Ω–≥–ª—ñ–π') || content.includes('english') || content.includes('–∫–æ–ª—å–æ—Ä')) subject = '–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞';
    else if (content.includes('–ª—ñ—Ç–µ—Ä') || content.includes('–±—É–∫–≤')) subject = '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞';
    
    const lesson: SimpleLesson = {
      id: `lesson-${Date.now()}`,
      title: lessonTitle,
      description: lessonDescription,
      subject,
      ageGroup,
      duration: slides.length * 5, // 5 —Ö–≤–∏–ª–∏–Ω –Ω–∞ —Å–ª–∞–π–¥
      slides,
      createdAt: new Date(),
      updatedAt: new Date(),
      authorId: 'ai-generated'
    };
    
    return { lesson, slides };
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é –¥–ª—è –Ω–æ–≤–∏—Ö —Å–ª–∞–π–¥—ñ–≤
  useEffect(() => {
    if (slideUIState.currentLesson?.slides) {
      slideUIState.currentLesson.slides.forEach(slide => {
        if (!slidePreviews[slide.id]) {
          console.log(`üöÄ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–∞–π–¥—É ${slide.id}`);
          
          // –ê–Ω–∞–ª—ñ–∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
          const hasImages = slide.htmlContent.includes('<img');
          const hasExternalImages = /src=["']https?:\/\//.test(slide.htmlContent);
          const hasDataImages = /src=["']data:/.test(slide.htmlContent);
          
          console.log(`üìä –ê–Ω–∞–ª—ñ–∑ —Å–ª–∞–π–¥—É ${slide.id}:`, {
            hasImages,
            hasExternalImages,
            hasDataImages,
            contentLength: slide.htmlContent.length
          });
          
          generateSlidePreview(slide);
        }
      });
    }
  }, [slideUIState.currentLesson?.slides, generateSlidePreview, slidePreviews]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é
  const regenerateSlidePreview = useCallback((slideId: string) => {
    const slide = slideUIState.currentLesson?.slides.find(s => s.id === slideId);
    if (slide) {
      generateSlidePreview(slide, true);
    }
  }, [slideUIState.currentLesson?.slides, generateSlidePreview]);

  // –û–±—Ä–æ–±–∫–∞ –∫–ª–∞–≤—ñ—à –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –≤ –¥—ñ–∞–ª–æ–∑—ñ —Å–ª–∞–π–¥—ñ–≤
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (slideUIState.slideDialogOpen) {
        if (event.key === 'ArrowLeft') {
          event.preventDefault();
          goToPrevSlide();
        } else if (event.key === 'ArrowRight') {
          event.preventDefault();
          goToNextSlide();
        } else if (event.key === 'Escape') {
          event.preventDefault();
          closeSlideDialog();
        }
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [slideUIState.slideDialogOpen, slideUIState.currentSlideIndex]);

  const handleSendMessage = async (messageText?: string, action?: string) => {
    const textToSend = messageText || inputValue;
    if (!textToSend.trim()) return;

    const userMessage: Message = {
      id: messages.length + 1,
      text: textToSend,
      sender: 'user',
      timestamp: new Date(),
      status: 'sending',
      feedback: null
    };

    setMessages(prev => [...prev, userMessage]);
    if (!messageText) setInputValue('');
    setIsTyping(true);

    // Update message status
    setTimeout(() => {
      setMessages(prev => prev.map(msg => 
        msg.id === userMessage.id ? { ...msg, status: 'sent' } : msg
      ));
    }, 500);

    setTimeout(() => {
      setMessages(prev => prev.map(msg => 
        msg.id === userMessage.id ? { ...msg, status: 'delivered' } : msg
      ));
    }, 1000);

    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: textToSend,
          action: action,
          conversationHistory: conversationHistory
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      setIsTyping(false);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ conversation history –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
      if (data.conversationHistory) {
        setConversationHistory(data.conversationHistory);
      }

      let messageText = data.message;
      
      // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ action –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤–æ–Ω–∏ —î
      if (data.availableActions && data.availableActions.length > 0) {
        messageText += '\n\n**‚ö° –î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:**\n';
        data.availableActions.forEach((actionItem: any) => {
          messageText += `\nüîπ **${actionItem.label}** - ${actionItem.description}`;
        });
      }

      const aiMessage: Message = {
        id: messages.length + 2,
        text: messageText,
        sender: 'ai',
        timestamp: new Date(),
        status: 'delivered',
        feedback: null,
        availableActions: data.availableActions || []
      };
      
      setMessages(prev => [...prev, aiMessage]);

      // –û–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ —Å–ª–∞–π–¥—É (–Ω–æ–≤–∏–π –ø—ñ–¥—Ö—ñ–¥)
      if (data.slideData) {
        try {
          const slideData = data.slideData;
          const newSlide: SimpleSlide = {
            id: `slide_${Date.now()}`,
            title: slideData.title || '–ù–æ–≤–∏–π —Å–ª–∞–π–¥',
            content: slideData.description || '',
            htmlContent: slideData.content || slideData.htmlContent || '',
            type: 'interactive',
            status: 'completed'
          };

          // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —É—Ä–æ–∫ –∑ –Ω–æ–≤–∏–º –∞–±–æ –∑–∞–º—ñ–Ω—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Å–ª–∞–π–¥
          setSlideUIState(prev => {
            const currentLesson = prev.currentLesson;
        
            if (currentLesson) {
              let updatedSlides = [...currentLesson.slides];
              
              // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∑–∞–º—ñ–Ω–∞ —ñ—Å–Ω—É—é—á–æ–≥–æ —Å–ª–∞–π–¥—É
              if (slideData.isReplacement && slideData.replacesSlideNumber) {
                const slideIndex = slideData.replacesSlideNumber - 1;
                if (slideIndex >= 0 && slideIndex < updatedSlides.length) {
                  // –ó–∞–º—ñ–Ω—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π —Å–ª–∞–π–¥, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π id –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è
                  const originalSlide = updatedSlides[slideIndex];
                  updatedSlides[slideIndex] = {
                    ...newSlide,
                    id: originalSlide.id // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π ID
                  };
                  console.log(`–ó–∞–º—ñ–Ω–µ–Ω–æ —Å–ª–∞–π–¥ ${slideData.replacesSlideNumber}:`, originalSlide.title, '‚Üí', newSlide.title);
                } else {
                  // –Ø–∫—â–æ —ñ–Ω–¥–µ–∫—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –¥–æ–¥–∞—î–º–æ —è–∫ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥
                  updatedSlides.push(newSlide);
                  console.warn(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å —Å–ª–∞–π–¥—É –¥–ª—è –∑–∞–º—ñ–Ω–∏: ${slideIndex}, –¥–æ–¥–∞–Ω–æ —è–∫ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥`);
                }
              } else {
                // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —É—Ä–æ–∫—É
                updatedSlides.push(newSlide);
                console.log('–î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥:', newSlide.title);
              }
              
              const updatedLesson = {
                ...currentLesson,
                slides: updatedSlides,
                updatedAt: new Date()
              };
              
              return {
                ...prev,
                currentLesson: updatedLesson,
                slidePanelOpen: true,
                selectedSlideId: slideData.isReplacement ? 
                  (updatedSlides[slideData.replacesSlideNumber - 1]?.id || newSlide.id) : 
                  newSlide.id
              };
            } else {
              // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —É—Ä–æ–∫
              const newLesson: SimpleLesson = {
                id: `lesson_${Date.now()}`,
                title: '–ù–æ–≤–∏–π —É—Ä–æ–∫',
                description: '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —É—Ä–æ–∫',
                subject: '–ó–∞–≥–∞–ª—å–Ω–∏–π',
                ageGroup: '6-12 —Ä–æ–∫—ñ–≤',
                duration: 30,
                slides: [newSlide],
                createdAt: new Date(),
                updatedAt: new Date(),
                authorId: 'current_user'
              };
              
              return {
                ...prev,
                currentLesson: newLesson,
                slidePanelOpen: true,
                selectedSlideId: newSlide.id
              };
            }
          });
        } catch (error) {
          console.log('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö —Å–ª–∞–π–¥—É:', error);
                }
      }
      // Fallback: —è–∫—â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º—ñ—Å—Ç–∏—Ç—å HTML –∫–æ–¥ (—Å—Ç–∞—Ä–∏–π –ø—ñ–¥—Ö—ñ–¥)
      else if (data.message.includes('```html')) {
        try {
          const { lesson, slides } = parseHTMLSlides(data.message);
          
          setSlideUIState(prev => {
            const currentLesson = prev.currentLesson;
            
            // –Ø–∫—â–æ —Ü–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —Å–ª–∞–π–¥—É (EDIT_SLIDE intent)
            if (currentLesson && data.intent === 'EDIT_SLIDE' && slides.length === 1) {
              const slideToEdit = slides[0];
              const updatedSlides = [...currentLesson.slides];
              
              // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å–ª–∞–π–¥ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è (–ø–µ—Ä—à–∏–π –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)
              const slideIndex = 0; // –î–ª—è "–ø–µ—Ä—à–∏–π —Å–ª–∞–π–¥" –∑–∞–≤–∂–¥–∏ 0
              
              if (slideIndex < updatedSlides.length) {
                // –ó–∞–º—ñ–Ω—é—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Å–ª–∞–π–¥, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π ID
                const originalSlide = updatedSlides[slideIndex];
                updatedSlides[slideIndex] = {
                  ...slideToEdit,
                  id: originalSlide.id // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π ID
                };
                
                const updatedLesson = {
                  ...currentLesson,
                  slides: updatedSlides,
                  updatedAt: new Date()
                };
                
                console.log('–í—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ —Å–ª–∞–π–¥:', slideIndex + 1, originalSlide.title, '‚Üí', slideToEdit.title);
                
                return {
                  ...prev,
                  currentLesson: updatedLesson,
                  slidePanelOpen: true,
                  selectedSlideId: originalSlide.id
                };
              }
            }
            
            // –Ø–∫—â–æ —î —É—Ä–æ–∫ —ñ —Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–ª–∞–π–¥—É
            if (currentLesson && slides.length === 1) {
              const newSlide = slides[0];
              const updatedSlides = [...currentLesson.slides, newSlide];
              
              const updatedLesson = {
                ...currentLesson,
                slides: updatedSlides,
                updatedAt: new Date()
              };
              
              console.log('–î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —É—Ä–æ–∫—É:', newSlide.title);
              
              return {
                ...prev,
                currentLesson: updatedLesson,
                slidePanelOpen: true,
                selectedSlideId: newSlide.id
              };
            }
            
            // –¢—ñ–ª—å–∫–∏ —è–∫—â–æ —É—Ä–æ–∫ –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
            if (!currentLesson) {
              return {
                ...prev,
                currentLesson: lesson,
                slidePanelOpen: true,
                selectedSlideId: lesson.slides[0]?.id || null
              };
            }
            
            // –Ø–∫—â–æ —É—Ä–æ–∫ —ñ—Å–Ω—É—î, –ù–ï –∑–∞–º—ñ–Ω—é—î–º–æ –π–æ–≥–æ
            return prev;
          });
        } catch (error) {
          console.log('–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É HTML —Å–ª–∞–π–¥—ñ–≤:', error);
        }
      }

    } catch (error) {
      console.error('Error sending message:', error);
      setIsTyping(false);
      
      const errorMessage: Message = {
        id: messages.length + 2,
        text: '–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
        sender: 'ai',
        timestamp: new Date(),
        status: 'delivered',
        feedback: null
      };
      
      setMessages(prev => [...prev, errorMessage]);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent<HTMLDivElement>) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleFeedback = (messageId: number, type: 'like' | 'dislike') => {
    setMessages(prev => prev.map(msg => 
      msg.id === messageId ? { ...msg, feedback: type } : msg
    ));
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'sending':
        return '‚è≥';
      case 'sent':
        return '‚úì';
      case 'delivered':
        return '‚úì‚úì';
      default:
        return '';
    }
  };

  const handleImproveMenuOpen = (event: React.MouseEvent<HTMLElement>) => {
    setImproveMenuAnchor(event.currentTarget);
    setShowImproveMenu(true);
  };

  const handleImproveMenuClose = () => {
    setShowImproveMenu(false);
    setImproveMenuAnchor(null);
  };

  const handleAutoImprove = () => {
    handleSendMessage('–ü–æ–∫—Ä–∞—â —Ü–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ', 'auto_improve');
    setShowImproveMenu(false);
  };

  const handleManualImprove = () => {
    const comment = prompt('–ù–∞–ø–∏—à—ñ—Ç—å —â–æ —Å–∞–º–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–º—ñ–Ω–∏—Ç–∏:');
    if (comment) {
      handleSendMessage(`–ü–æ–∫—Ä–∞—â —Ü–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç: ${comment}`, 'manual_improve');
    }
    setShowImproveMenu(false);
  };

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥—ñ–∞–ª–æ–≥–æ–º —Å–ª–∞–π–¥—ñ–≤

  const openSlideDialog = (slideIndex: number) => {
    setSlideUIState(prev => ({
      ...prev,
      slideDialogOpen: true,
      currentSlideIndex: slideIndex
    }));
  };

  const closeSlideDialog = () => {
    setSlideUIState(prev => ({
      ...prev,
      slideDialogOpen: false
    }));
  };

  const goToNextSlide = () => {
    if (slideUIState.currentLesson && slideUIState.currentSlideIndex < slideUIState.currentLesson.slides.length - 1) {
      setSlideUIState(prev => ({
        ...prev,
        currentSlideIndex: prev.currentSlideIndex + 1
      }));
    }
  };

  const goToPrevSlide = () => {
    if (slideUIState.currentSlideIndex > 0) {
      setSlideUIState(prev => ({
        ...prev,
        currentSlideIndex: prev.currentSlideIndex - 1
      }));
    }
  };

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–∏–±–æ—Ä–æ–º —Å–ª–∞–π–¥—ñ–≤
  const toggleSlideSelection = (slideId: string) => {
    setSlideUIState(prev => {
      const newSelectedSlides = new Set(prev.selectedSlides);
      if (newSelectedSlides.has(slideId)) {
        newSelectedSlides.delete(slideId);
      } else {
        newSelectedSlides.add(slideId);
      }
      return {
        ...prev,
        selectedSlides: newSelectedSlides
      };
    });
  };

  const selectAllSlides = () => {
    if (!slideUIState.currentLesson) return;
    setSlideUIState(prev => ({
      ...prev,
      selectedSlides: new Set(prev.currentLesson?.slides.map(slide => slide.id) || [])
    }));
  };

  const deselectAllSlides = () => {
    setSlideUIState(prev => ({
      ...prev,
      selectedSlides: new Set<string>()
    }));
  };

  // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É
  const openSaveDialog = () => {
    if (!slideUIState.currentLesson || slideUIState.selectedSlides.size === 0) {
      return;
    }

    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —É—Ä–æ–∫—É
    setSaveDialogData({
      title: slideUIState.currentLesson.title || '–ù–æ–≤–∏–π —É—Ä–æ–∫',
      description: slideUIState.currentLesson.description || `–£—Ä–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑ ${slideUIState.selectedSlides.size} —Å–ª–∞–π–¥—ñ–≤`,
      subject: slideUIState.currentLesson.subject || '–ó–∞–≥–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è',
      ageGroup: slideUIState.currentLesson.ageGroup || '6-12 —Ä–æ–∫—ñ–≤',
      selectedPreviewId: null,
      previewUrl: null
    });

    setSlideUIState(prev => ({ ...prev, saveDialogOpen: true }));
  };

  // –ó–∞–∫—Ä–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  const closeSaveDialog = () => {
    setSlideUIState(prev => ({ ...prev, saveDialogOpen: false }));
  };

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–µ–≤—å—é
  const handlePreviewSelect = (slideId: string, previewUrl: string) => {
    setSaveDialogData(prev => ({
      ...prev,
      selectedPreviewId: slideId,
      previewUrl: previewUrl
    }));
  };

  // –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤ –¥—ñ–∞–ª–æ–∑—ñ
  const saveSelectedSlides = async (dialogData: SaveLessonDialogData) => {
    if (!slideUIState.currentLesson || slideUIState.selectedSlides.size === 0) {
      return;
    }

    setSlideUIState(prev => ({ ...prev, isSavingLesson: true }));

    try {
      const selectedSlides = slideUIState.currentLesson.slides.filter(
        slide => slideUIState.selectedSlides.has(slide.id)
      );

      const newLessonId = `lesson_${Date.now()}`;
      let savedPreviewUrl = dialogData.previewUrl || '/images/default-lesson.png';

      // –Ø–∫—â–æ —î –ø—Ä–µ–≤—å—é, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ —è–∫ —Ñ–∞–π–ª
      if (dialogData.previewUrl && dialogData.previewUrl.startsWith('data:image/')) {
        try {
          const previewResponse = await fetch('/api/images/preview', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              imageData: dialogData.previewUrl,
              lessonId: newLessonId,
              slideId: dialogData.selectedPreviewId || 'main',
              type: 'lesson-thumbnail'
            })
          });

          if (previewResponse.ok) {
            const previewResult = await previewResponse.json();
            savedPreviewUrl = previewResult.imagePath;
            console.log('‚úÖ Preview saved as file:', savedPreviewUrl);
          } else {
            console.warn('Failed to save preview as file, using base64');
          }
        } catch (error) {
          console.error('Error saving preview:', error);
        }
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ —É—Ä–æ–∫ –¥–ª—è localStorage –∑ –¥–∞–Ω–∏–º–∏ –∑ –¥—ñ–∞–ª–æ–≥—É
      const newLesson: SavedLesson = {
        id: newLessonId,
        title: dialogData.title.trim(),
        description: dialogData.description.trim(),
        subject: dialogData.subject.trim(),
        ageGroup: dialogData.ageGroup.trim(),
        duration: slideUIState.currentLesson.duration,
        slides: selectedSlides.map(slide => ({
          id: slide.id,
          title: slide.title,
          content: slide.content,
          htmlContent: slide.htmlContent,
          type: slide.type,
          status: slide.status
        })),
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        authorId: 'current-user',
        thumbnail: savedPreviewUrl,
        tags: ['—Å—Ç–≤–æ—Ä–µ–Ω–∏–π-–≤-—á–∞—Ç—ñ', '—ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π'],
        difficulty: 'easy' as const,
        views: 0,
        rating: 0,
        status: 'published' as const,
        completionRate: 0
      };

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage
      const success = LessonStorage.saveLesson(newLesson);
      
      if (success) {
        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        const newMessage: Message = {
          id: messages.length + 1,
          text: `‚úÖ **–£—Ä–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!**\n\nüìö **"${newLesson.title}"** —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤.\n\nüìä **–ó–±–µ—Ä–µ–∂–µ–Ω–æ —Å–ª–∞–π–¥—ñ–≤:** ${selectedSlides.length}\n\nüéØ –í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ —É—Ä–æ–∫ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ [–ú–æ—ó –º–∞—Ç–µ—Ä—ñ–∞–ª–∏](/materials).`,
          sender: 'ai',
          timestamp: new Date(),
          status: 'sent',
          feedback: null
        };

        setMessages(prev => [...prev, newMessage]);
        
        // –û—á–∏—â–∞—î–º–æ –≤–∏–±—ñ—Ä –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥
        setSlideUIState(prev => ({
          ...prev,
          selectedSlides: new Set<string>(),
          saveDialogOpen: false
        }));
      } else {
        throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ localStorage');
      }
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É:', error);
      
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
      const errorMessage: Message = {
        id: messages.length + 1,
        text: `‚ùå **–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è**\n\n–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.`,
        sender: 'ai',
        timestamp: new Date(),
        status: 'sent',
        feedback: null
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setSlideUIState(prev => ({ ...prev, isSavingLesson: false }));
    }
  };

  // Slide Panel Component
  const SlidePanel = () => {
    const getSlideIcon = (type: string) => {
      switch (type) {
        case 'title': return 'üìã';
        case 'content': return 'üìù';
        case 'interactive': return 'üéÆ';
        case 'summary': return 'üìä';
        default: return 'üìÑ';
    }
  };

    const renderSlideCard = (slide: SimpleSlide, index: number) => {
      const isSelected = slideUIState.selectedSlides.has(slide.id);
      const isUpdating = previewsUpdating.has(slide.id);
      
      return (
        <Paper
          key={slide.id}
          elevation={0}
          sx={{
            mb: 3,
            border: `1px solid ${isSelected ? theme.palette.primary.main : alpha(theme.palette.divider, 0.1)}`,
            borderRadius: '12px',
            overflow: 'hidden',
            transition: 'all 0.2s ease',
            backgroundColor: isSelected 
              ? alpha(theme.palette.primary.main, 0.08)
              : 'white',
            '&:hover': {
              borderColor: theme.palette.primary.main,
              backgroundColor: alpha(theme.palette.primary.main, 0.04),
              transform: 'translateY(-2px)',
              boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
            }
          }}
        >
          {/* –ü—Ä–µ–≤—å—é —Å–ª–∞–π–¥—É */}
          <Box sx={{ 
            position: 'relative',
            height: 160, 
            overflow: 'hidden',
            backgroundColor: alpha(theme.palette.grey[100], 0.3),
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}`
          }}>
            {/* –†–µ–∞–ª—å–Ω–µ –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—É */}
            {slidePreviews[slide.id] && !isUpdating ? (
              <img
                src={slidePreviews[slide.id]}
                alt={`–ü—Ä–µ–≤—å—é —Å–ª–∞–π–¥—É ${index + 1}`}
                style={{
                  width: '100%',
                  height: '100%',
                  objectFit: 'cover',
                  opacity: isUpdating ? 0.5 : 1
                }}
              />
            ) : (
              <Box
                sx={{
                  width: '100%',
                  height: '100%',
                  background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.1)} 0%, ${alpha(theme.palette.secondary.main, 0.1)} 100%)`,
                  display: 'flex',
                  flexDirection: 'column',
                  alignItems: 'center',
                  justifyContent: 'center',
                  position: 'relative'
                }}
              >
                {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ —ñ–∫–æ–Ω–∫–∞ */}
                <CircularProgress 
                  size={24} 
                  sx={{ 
                    color: theme.palette.primary.main,
                    opacity: 0.6
                  }} 
                />
                <Typography variant="caption" sx={{ 
                  mt: 1, 
                  opacity: 0.6,
                  fontSize: '0.7rem'
                }}>
                  {isUpdating ? '–û–Ω–æ–≤–ª–µ–Ω–Ω—è...' : '–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è...'}
                </Typography>
              </Box>
            )}
            
            {/* –ù–æ–º–µ—Ä —Å–ª–∞–π–¥—É */}
            <Typography 
              variant="caption" 
              sx={{ 
                position: 'absolute',
                top: 8,
                right: 8,
                backgroundColor: alpha(theme.palette.primary.main, 0.8),
                color: 'white',
                px: 1,
                py: 0.5,
                borderRadius: 1,
                fontSize: '0.7rem',
                fontWeight: 600
              }}
            >
              {index + 1}
            </Typography>

            {/* –°—Ç–∞—Ç—É—Å —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
            <Box
              sx={{
                position: 'absolute',
                top: 8,
                left: 8,
                width: 8,
                height: 8,
                borderRadius: '50%',
                backgroundColor: slide.status === 'completed' 
                  ? theme.palette.success.main 
                  : theme.palette.warning.main,
                boxShadow: '0 2px 4px rgba(0,0,0,0.2)'
              }}
            />

            {/* –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é */}
            {slidePreviews[slide.id] && (
              <Tooltip title={isUpdating ? "–û–Ω–æ–≤–ª—é—î—Ç—å—Å—è..." : "–û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–µ–≤—å—é"}>
                <IconButton
                  size="small"
                  disabled={isUpdating}
                  onClick={(e) => {
                    e.stopPropagation();
                    regenerateSlidePreview(slide.id);
                  }}
                  sx={{
                    position: 'absolute',
                    bottom: 8,
                    right: 8,
                    backgroundColor: alpha(theme.palette.background.paper, 0.9),
                    width: 24,
                    height: 24,
                    '&:hover': {
                      backgroundColor: alpha(theme.palette.primary.main, 0.1),
                    },
                    '&:disabled': {
                      opacity: 0.5
                    }
                  }}
                >
                  {isUpdating ? (
                    <CircularProgress size={12} />
                  ) : (
                    <Box component="span" sx={{ fontSize: '12px' }}>üîÑ</Box>
                  )}
                </IconButton>
              </Tooltip>
            )}
            
            {/* –•–æ–≤–µ—Ä –µ—Ñ–µ–∫—Ç */}
            <Box
              sx={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                background: 'transparent',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                opacity: 0,
                transition: 'opacity 0.2s ease',
                '&:hover': {
                  opacity: 1,
                  background: alpha(theme.palette.primary.main, 0.1),
                }
              }}
            >
              <Box
                sx={{
                  background: theme.palette.primary.main,
                  color: 'white',
                  borderRadius: '50%',
                  width: 32,
                  height: 32,
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  boxShadow: '0 4px 12px rgba(0,0,0,0.2)',
                  transition: 'transform 0.2s ease',
                  '&:hover': {
                    transform: 'scale(1.1)',
                  }
                }}
              >
                <Maximize2 size={16} />
              </Box>
            </Box>
          </Box>

          {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–ª–∞–π–¥ */}
          <Box sx={{ p: 2.5 }}>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1, mb: 1.5 }}>
              {/* Checkbox –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ª–∞–π–¥—É */}
              <Checkbox
                checked={isSelected}
                onChange={(e) => {
                  e.stopPropagation();
                  toggleSlideSelection(slide.id);
                }}
                size="small"
                sx={{
                  p: 0.5,
                  color: theme.palette.primary.main,
                  '&.Mui-checked': {
                    color: theme.palette.primary.main,
                  }
                }}
              />
              <Typography 
                variant="subtitle2" 
                sx={{ 
                  fontWeight: 600, 
                  flex: 1,
                  cursor: 'pointer',
                  fontSize: '0.9rem'
                }}
                onClick={() => openSlideDialog(index)}
              >
                {slide.title}
              </Typography>
              {/* –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É */}
              <IconButton
                size="small"
                onClick={(e) => {
                  e.stopPropagation();
                  openSlideDialog(index);
                }}
                sx={{ 
                  color: 'text.secondary',
                  '&:hover': {
                    color: 'primary.main',
                    backgroundColor: alpha(theme.palette.primary.main, 0.1)
                  }
                }}
              >
                <Maximize2 size={14} />
              </IconButton>
            </Box>
            <Typography 
              variant="caption" 
              color="text.secondary" 
              sx={{ 
                lineHeight: 1.4,
                overflow: 'hidden',
                textOverflow: 'ellipsis',
                display: '-webkit-box',
                WebkitLineClamp: 3,
                WebkitBoxOrient: 'vertical',
                ml: 3, // –í—ñ–¥—Å—Ç—É–ø –≤—ñ–¥ checkbox
                fontSize: '0.75rem'
              }}
            >
              {slide.content}
            </Typography>
          </Box>
        </Paper>
      );
    };

    return (
      <Box sx={{ p: 3, height: '100%', display: 'flex', flexDirection: 'column' }}>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
          <Typography variant="h6" sx={{ fontWeight: 600 }}>
            –°–ª–∞–π–¥–∏ —É—Ä–æ–∫—É
          </Typography>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
            {slideUIState.currentLesson && (
              <Tooltip title="–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —É—Ä–æ–∫">
                <IconButton
                  onClick={() => {
                    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ HTML
                    const htmlMessage = messages.find(msg => 
                      msg.sender === 'ai' && msg.text.includes('```html')
                    );
                    if (htmlMessage) {
                      const htmlMatch = htmlMessage.text.match(/```html\n([\s\S]*?)\n```/);
                      if (htmlMatch) {
                        const blob = new Blob([htmlMatch[1]], { type: 'text/html' });
                        const url = URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `${slideUIState.currentLesson?.title.replace(/[^a-zA-Z0-9]/g, '-') || 'lesson'}.html`;
                        document.body.appendChild(a);
                        a.click();
                        document.body.removeChild(a);
                        URL.revokeObjectURL(url);
                      }
                    }
                  }}
                  size="small"
                  sx={{ color: 'primary.main' }}
                >
                  <Download size={16} />
                </IconButton>
              </Tooltip>
            )}
            <IconButton
              onClick={() => setSlideUIState(prev => ({ ...prev, slidePanelOpen: false }))}
              size="small"
              sx={{ color: 'text.secondary' }}
            >
              <X size={16} />
            </IconButton>
          </Box>
        </Box>

        {slideUIState.currentLesson ? (
          <>
            {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —É—Ä–æ–∫ */}
            <Paper elevation={0} sx={{ p: 2, mb: 3, backgroundColor: alpha(theme.palette.primary.main, 0.04), borderRadius: 2 }}>
              <Typography variant="subtitle1" sx={{ fontWeight: 600, color: 'primary.main', mb: 1 }}>
                {slideUIState.currentLesson.title}
                  </Typography>
              <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
                {slideUIState.currentLesson.description}
              </Typography>
              
              <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
                  <Chip
                  label={slideUIState.currentLesson.subject} 
                    size="small"
                    color="primary"
                    variant="outlined"
                />
                <Chip 
                  label={slideUIState.currentLesson.ageGroup} 
                  size="small" 
                  color="secondary" 
                  variant="outlined"
                />
                <Chip 
                  label={`${slideUIState.currentLesson.duration} —Ö–≤`} 
                  size="small" 
                  variant="outlined"
                  />
                </Box>
            </Paper>
            
            {/* –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä–æ–º */}
            <Paper elevation={0} sx={{ p: 2, mb: 2, backgroundColor: alpha(theme.palette.grey[50], 0.5), borderRadius: 2 }}>
              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
                <Typography variant="body2" color="text.secondary">
                  –í–∏–±—Ä–∞–Ω–æ: <strong>{slideUIState.selectedSlides.size}</strong> –∑ <strong>{slideUIState.currentLesson.slides.length}</strong> —Å–ª–∞–π–¥—ñ–≤
                </Typography>
                <Box sx={{ display: 'flex', gap: 1 }}>
                  <Button
                    size="small"
                    variant="outlined"
                    onClick={selectAllSlides}
                    disabled={slideUIState.selectedSlides.size === slideUIState.currentLesson.slides.length}
                  >
                    –í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ
                  </Button>
                  <Button
                    size="small"
                    variant="outlined"
                    onClick={deselectAllSlides}
                    disabled={slideUIState.selectedSlides.size === 0}
                  >
                    –û—á–∏—Å—Ç–∏—Ç–∏
                  </Button>
                </Box>
              </Box>
              
              {/* –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è */}
              {slideUIState.selectedSlides.size > 0 && (
                <Box sx={{ display: 'flex', justifyContent: 'center' }}>
                  <Button
                    variant="contained"
                    onClick={openSaveDialog}
                    disabled={slideUIState.isSavingLesson}
                    startIcon={slideUIState.isSavingLesson ? <LinearProgress /> : null}
                    sx={{
                      px: 4,
                      py: 1,
                      fontSize: '0.875rem',
                      fontWeight: 600,
                      borderRadius: 2,
                      textTransform: 'none',
                      boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                      '&:hover': {
                        boxShadow: '0 4px 16px rgba(0,0,0,0.2)',
                      }
                    }}
                  >
                    {slideUIState.isSavingLesson ? '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : `–ó–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫ (${slideUIState.selectedSlides.size} —Å–ª–∞–π–¥—ñ–≤)`}
                  </Button>
                </Box>
              )}
            </Paper>
            
            <Box sx={{ flex: 1, overflow: 'auto' }}>
              {slideUIState.currentLesson.slides.map((slide, index) => renderSlideCard(slide, index))}
              </Box>
          </>
        ) : (
          /* –ó–∞–æ—Ö–æ—á–µ–Ω–Ω—è –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ —É—Ä–æ–∫—É */
          <Box sx={{ 
            flex: 1, 
            display: 'flex', 
            flexDirection: 'column', 
            justifyContent: 'center', 
            alignItems: 'center',
            textAlign: 'center',
            p: 3
          }}>
            <Box sx={{ fontSize: '4rem', mb: 2 }}>üé®</Box>
            
            <Typography variant="h6" sx={{ fontWeight: 600, mb: 2, color: 'text.primary' }}>
              –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π –ø–µ—Ä—à–∏–π —É—Ä–æ–∫!
                </Typography>
            
            <Typography variant="body2" color="text.secondary" sx={{ mb: 3, lineHeight: 1.6 }}>
              –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤ —á–∞—Ç—ñ —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
            </Typography>
            
            <Paper elevation={0} sx={{ 
              p: 2, 
              mb: 3, 
                          backgroundColor: alpha(theme.palette.primary.main, 0.04),
              borderRadius: 2,
              width: '100%'
            }}>
              <Typography variant="body2" sx={{ fontStyle: 'italic', color: 'text.secondary' }}>
                üí° "–°—Ç–≤–æ—Ä–∏ —É—Ä–æ–∫ –ø—Ä–æ –∫–æ—Å–º–æ—Å –¥–ª—è –¥—ñ—Ç–µ–π 7 —Ä–æ–∫—ñ–≤"
                        </Typography>
              <Typography variant="body2" sx={{ fontStyle: 'italic', color: 'text.secondary', mt: 1 }}>
                üìö "–ó—Ä–æ–±–∏ —É—Ä–æ–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –ø—Ä–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"
                      </Typography>
              <Typography variant="body2" sx={{ fontStyle: 'italic', color: 'text.secondary', mt: 1 }}>
                üåà "–£—Ä–æ–∫ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –ø—Ä–æ –∫–æ–ª—å–æ—Ä–∏"
              </Typography>
            </Paper>
            
            <Typography variant="caption" color="text.secondary" sx={{ textAlign: 'center' }}>
              ‚ú® –ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫—É —Ç—É—Ç –∑'—è–≤–ª—è—Ç—å—Å—è –≤—Å—ñ —Å–ª–∞–π–¥–∏ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            </Typography>
                </Box>
        )}
              </Box>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç—É —Å–ª–∞–π–¥—É (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π)
  const SlideContent = React.memo(({ htmlContent }: { htmlContent: string }) => {
    const iframeRef = useRef<HTMLIFrameElement>(null);
    
    // Debug logging to see what content we're receiving
    useEffect(() => {
      console.log('SlideContent received htmlContent:', {
        content: htmlContent,
        length: htmlContent?.length,
        isValidHTML: htmlContent?.includes('<html') || htmlContent?.includes('<!DOCTYPE'),
        preview: htmlContent?.substring(0, 200) + '...'
      });
    }, [htmlContent]);
    
    useEffect(() => {
      if (iframeRef.current) {
        iframeRef.current.srcdoc = htmlContent;
      }
    }, [htmlContent]);

    return (
      <iframe
        ref={iframeRef}
        srcDoc={htmlContent}
        style={{
          width: '100%',
          height: '100%',
          border: 'none',
          background: 'white',
        }}
      />
    );
  });

  SlideContent.displayName = 'SlideContent';

  // –ú–µ–º–æ—ñ–∑–æ–≤–∞–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥—ñ–∞–ª–æ–≥—É
  const SlideDialogHeader = React.memo(({ 
    title, 
    currentIndex, 
    totalSlides, 
    hasNext, 
    hasPrev 
  }: {
    title: string;
    currentIndex: number;
    totalSlides: number;
    hasNext: boolean;
    hasPrev: boolean;
  }) => (
    <Box
      sx={{
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        background: alpha(theme.palette.background.paper, 0.95),
        backdropFilter: 'blur(10px)',
        borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
        p: 2,
        zIndex: 1,
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
      }}
    >
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
        <Typography variant="h6" sx={{ fontWeight: 600 }}>
          {title}
        </Typography>
        <Chip
          label={`${currentIndex + 1} –∑ ${totalSlides}`}
          size="small"
          color="primary"
          variant="outlined"
        />
        <Typography variant="caption" color="text.secondary" sx={{ ml: 2 }}>
          ‚Üê ‚Üí –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó ‚Ä¢ Esc –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
        </Typography>
      </Box>
      
      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
        <Tooltip title="–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ª–∞–π–¥">
          <IconButton
            onClick={goToPrevSlide}
            disabled={!hasPrev}
            sx={{
              backgroundColor: alpha(theme.palette.primary.main, 0.1),
              '&:hover': {
                backgroundColor: alpha(theme.palette.primary.main, 0.2),
              },
              '&:disabled': {
                backgroundColor: alpha(theme.palette.grey[300], 0.5),
              }
            }}
          >
            <ChevronLeft size={20} />
          </IconButton>
        </Tooltip>

        <Tooltip title="–ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥">
          <IconButton
            onClick={goToNextSlide}
            disabled={!hasNext}
            sx={{
              backgroundColor: alpha(theme.palette.primary.main, 0.1),
              '&:hover': {
                backgroundColor: alpha(theme.palette.primary.main, 0.2),
              },
              '&:disabled': {
                backgroundColor: alpha(theme.palette.grey[300], 0.5),
              }
            }}
          >
            <ChevronRight size={20} />
          </IconButton>
        </Tooltip>

        <Tooltip title="–ó–∞–∫—Ä–∏—Ç–∏">
          <IconButton
            onClick={closeSlideDialog}
            sx={{
              backgroundColor: alpha(theme.palette.error.main, 0.1),
              color: theme.palette.error.main,
              '&:hover': {
                backgroundColor: alpha(theme.palette.error.main, 0.2),
              }
            }}
          >
            <X size={20} />
          </IconButton>
        </Tooltip>
      </Box>
    </Box>
  ));

  SlideDialogHeader.displayName = 'SlideDialogHeader';

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥—ñ–∞–ª–æ–≥—É —Å–ª–∞–π–¥—ñ–≤
  const SlideDialog = () => {
    if (!slideUIState.currentLesson || !slideUIState.slideDialogOpen) return null;

    const currentSlide = slideUIState.currentLesson.slides[slideUIState.currentSlideIndex];
    if (!currentSlide) return null;
    
    const hasNext = slideUIState.currentSlideIndex < slideUIState.currentLesson.slides.length - 1;
    const hasPrev = slideUIState.currentSlideIndex > 0;

    return (
      <Dialog
        open={slideUIState.slideDialogOpen}
        onClose={closeSlideDialog}
        maxWidth={false}
        fullWidth
        sx={{
          '& .MuiDialog-paper': {
            width: '95vw',
            height: '95vh',
            maxWidth: 'none',
            margin: '2.5vh auto',
            borderRadius: '16px',
            overflow: 'hidden',
          }
        }}
      >
        <DialogContent sx={{ p: 0, position: 'relative', height: '100%' }}>
          <SlideDialogHeader
            title={currentSlide.title}
            currentIndex={slideUIState.currentSlideIndex}
            totalSlides={slideUIState.currentLesson.slides.length}
            hasNext={hasNext}
            hasPrev={hasPrev}
          />

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∞–π–¥—É */}
          <Box sx={{ width: '100%', height: '100%', pt: '80px', position: 'relative' }}>
            <SlideContent htmlContent={currentSlide.htmlContent} />
              </Box>
        </DialogContent>
      </Dialog>
    );
  };

  return (
    <Layout title="AI –ß–∞—Ç" noPadding>
      <Box sx={{ height: 'calc(100vh - 64px)', display: 'flex', backgroundColor: theme.palette.background.default }}>
        {/* Chat Area */}
        <Box sx={{ 
          flex: 1,
            display: 'flex', 
            flexDirection: 'column',
          minWidth: 0
          }}>
          {/* Chat Header */}
          <Paper
            elevation={0}
            sx={{
              p: 3,
              borderRadius: 0,
              borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
              backgroundColor: 'white',
            }}
          >
            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
                <Avatar
                  sx={{
                    background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.light} 100%)`,
                    width: 48,
                    height: 48,
                    boxShadow: `0 4px 12px ${alpha(theme.palette.primary.main, 0.3)}`,
                  }}
                >
                  <Bot size={24} color="white" />
                </Avatar>
                <Box>
                  <Typography variant="h6" sx={{ fontWeight: 600 }}>
                    –ü–æ–º—ñ—á–Ω–∏–∫ –í—á–∏—Ç–µ–ª—è
                  </Typography>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Box
                      sx={{
                        width: 8,
                        height: 8,
                        borderRadius: '50%',
                        backgroundColor: theme.palette.success.main,
                      }}
                    />
                    <Typography variant="body2" color="text.secondary">
                      –û–Ω–ª–∞–π–Ω ‚Ä¢ –ì–æ—Ç–æ–≤–∏–π —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —É—Ä–æ–∫–∏
                    </Typography>
                  </Box>
                </Box>
              </Box>
              
              {/* Header Controls */}
              <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                <Tooltip title={slideUIState.slidePanelOpen ? "–°—Ö–æ–≤–∞—Ç–∏ —Å–ª–∞–π–¥–∏" : "–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ª–∞–π–¥–∏"}>
                  <Box sx={{ position: 'relative' }}>
                    <IconButton
                      onClick={() => setSlideUIState(prev => ({ ...prev, slidePanelOpen: !prev.slidePanelOpen }))}
                      sx={{
                        backgroundColor: slideUIState.slidePanelOpen ? alpha(theme.palette.primary.main, 0.1) : 'transparent',
                        color: slideUIState.slidePanelOpen ? 'primary.main' : 'text.secondary',
                        '&:hover': {
                          backgroundColor: alpha(theme.palette.primary.main, 0.1),
                          color: 'primary.main',
                        }
                      }}
                    >
                      <Layers size={18} />
                    </IconButton>
                    {slideUIState.currentLesson && slideUIState.currentLesson.slides && slideUIState.currentLesson.slides.length > 0 && !slideUIState.slidePanelOpen && (
                      <Box
                        sx={{
                          position: 'absolute',
                          top: 8,
                          right: 8,
                          width: 8,
                          height: 8,
                          borderRadius: '50%',
                          backgroundColor: theme.palette.error.main,
                          animation: 'pulse 2s infinite',
                          '@keyframes pulse': {
                            '0%': { opacity: 1 },
                            '50%': { opacity: 0.5 },
                            '100%': { opacity: 1 },
                          }
                        }}
                      />
                    )}
                  </Box>
                </Tooltip>
                
                <Tooltip title="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è">
                  <IconButton sx={{ color: 'text.secondary' }}>
                    <Settings size={18} />
                  </IconButton>
                </Tooltip>
              </Box>
            </Box>
          </Paper>

          {/* Messages Area */}
          <Box sx={{ flex: 1, overflow: 'auto', p: 2, backgroundColor: theme.palette.background.default }}>
            <Box sx={{ maxWidth: '1200px', mx: 'auto', width: '100%' }}>
              {messages.map((message) => (
                <Fade in timeout={300} key={message.id}>
                  <Box
                    sx={{
                      display: 'flex',
                      justifyContent: message.sender === 'user' ? 'flex-end' : 'flex-start',
                      mb: 3,
                    }}
                  >
                    <Box
                      sx={{
                        display: 'flex',
                        flexDirection: message.sender === 'user' ? 'row-reverse' : 'row',
                        alignItems: 'flex-start',
                        gap: 2,
                        maxWidth: '80%',
                      }}
                    >
                      <Avatar
                        sx={{
                          width: 36,
                          height: 36,
                          backgroundColor: message.sender === 'user' 
                            ? theme.palette.secondary.main 
                            : theme.palette.primary.main,
                        }}
                      >
                        {message.sender === 'user' ? <User size={18} /> : <Bot size={18} />}
                      </Avatar>

                      <Paper
                        elevation={0}
                        sx={{
                          p: 2.5,
                          borderRadius: '16px',
                          backgroundColor: message.sender === 'user' 
                            ? theme.palette.primary.main 
                            : 'white',
                          color: message.sender === 'user' ? 'white' : 'text.primary',
                          border: message.sender === 'ai' ? `1px solid ${alpha(theme.palette.divider, 0.1)}` : 'none',
                          boxShadow: message.sender === 'user' 
                            ? `0 4px 12px ${alpha(theme.palette.primary.main, 0.3)}`
                            : '0 2px 12px rgba(0,0,0,0.06)',
                        }}
                                              >
                          <MarkdownRenderer content={message.text} />

                        {/* Action Buttons */}
                        {message.sender === 'ai' && message.availableActions && message.availableActions.length > 0 && (
                          <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                            {message.availableActions.map((actionItem, index) => (
                                <Button
                                key={index}
                                variant="outlined"
                                  size="small"
                                onClick={() => handleSendMessage(actionItem.label, actionItem.action)}
                                  sx={{
                                    borderRadius: 2,
                                    textTransform: 'none',
                                  fontSize: '0.875rem',
                                  color: theme.palette.primary.main,
                                  borderColor: alpha(theme.palette.primary.main, 0.3),
                                    '&:hover': {
                                    borderColor: theme.palette.primary.main,
                                    backgroundColor: alpha(theme.palette.primary.main, 0.04),
                                    }
                                  }}
                                >
                                {actionItem.label}
                                </Button>
                            ))}
                          </Box>
                        )}

                        {/* Message Status */}
                        {message.sender === 'user' && (
                          <Box sx={{ textAlign: 'right', mt: 1 }}>
                            <Typography variant="caption" sx={{ opacity: 0.7 }}>
                              {getStatusIcon(message.status)}
                            </Typography>
                          </Box>
                        )}
                      </Paper>
                    </Box>
                  </Box>
                </Fade>
              ))}

              {/* Typing Indicator */}
              {isTyping && (
                <Fade in>
                  <Box sx={{ display: 'flex', justifyContent: 'flex-start', mb: 3 }}>
                    <Box sx={{ display: 'flex', alignItems: 'flex-start', gap: 2, maxWidth: '80%' }}>
                      <Avatar
                        sx={{
                          width: 36,
                          height: 36,
                          backgroundColor: theme.palette.primary.main,
                        }}
                      >
                        <Bot size={18} />
                      </Avatar>
                      <Paper
                        elevation={0}
                        sx={{
                          p: 2.5,
                          borderRadius: '16px',
                          backgroundColor: 'white',
                          border: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
                          boxShadow: '0 2px 12px rgba(0,0,0,0.06)',
                        }}
                      >
                        <Typography variant="body2" color="text.secondary">
                          –î—Ä—É–∫—É—é...
                        </Typography>
                      </Paper>
                    </Box>
                  </Box>
                </Fade>
              )}
              
              <div ref={messagesEndRef} />
            </Box>
          </Box>

          {/* Input Area */}
          <Paper
            elevation={0}
            sx={{
              p: 3,
              borderRadius: 0,
              borderTop: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
              backgroundColor: 'white',
            }}
          >
            <Box sx={{ display: 'flex', gap: 2, alignItems: 'flex-end' }}>
              <TextField
                fullWidth
                multiline
                maxRows={4}
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="–ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ —è–∫–∏–π —É—Ä–æ–∫ –≤–∏ –º—Ä—ñ—î—Ç–µ (–ø—Ä–µ–¥–º–µ—Ç, –≤—ñ–∫ –¥—ñ—Ç–µ–π, —Ç–µ–º–∞)..."
                variant="outlined"
                sx={{
                  '& .MuiOutlinedInput-root': {
                    borderRadius: 3,
                    backgroundColor: alpha(theme.palette.primary.main, 0.02),
                    '&:hover': {
                      backgroundColor: alpha(theme.palette.primary.main, 0.04),
                    },
                    '&.Mui-focused': {
                      backgroundColor: alpha(theme.palette.primary.main, 0.06),
                    }
                  }
                }}
              />
              <Box sx={{ display: 'flex', gap: 1 }}>
                <Tooltip title="–ü—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–∞–π–ª">
                  <IconButton color="primary" size="large">
                    <Paperclip size={20} />
                  </IconButton>
                </Tooltip>
                <Button
                  variant="contained"
                  onClick={(e) => {
                    e.preventDefault();
                    handleSendMessage();
                  }}
                  disabled={!inputValue.trim() || isTyping}
                  sx={{
                    minWidth: 56,
                    height: 56,
                    borderRadius: 3,
                    background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.dark} 100%)`,
                    '&:hover': {
                      background: `linear-gradient(135deg, ${theme.palette.primary.dark} 0%, ${alpha(theme.palette.primary.dark, 0.8)} 100%)`,
                    },
                    '&:disabled': {
                      background: theme.palette.grey[300],
                    }
                  }}
                >
                  <Send size={20} />
                </Button>
              </Box>
            </Box>
          </Paper>
          </Box>

        {/* Right Slide Panel */}
        {slideUIState.slidePanelOpen && (
          <Paper
          elevation={0}
          sx={{
              width: 400,
            borderRadius: 0,
            borderLeft: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
            display: 'flex',
            flexDirection: 'column',
            backgroundColor: 'white',
          }}
        >
            <SlidePanel />
                </Paper>
                            )}
                          </Box>

      {/* –î—ñ–∞–ª–æ–≥ —Å–ª–∞–π–¥—ñ–≤ */}
      <SlideDialog />

      {/* –î—ñ–∞–ª–æ–≥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É */}
      <Dialog
        open={slideUIState.saveDialogOpen}
        onClose={closeSaveDialog}
        maxWidth="md"
        fullWidth
        PaperProps={{
          sx: { 
            borderRadius: '16px',
            background: 'linear-gradient(135deg, rgba(255,255,255,0.95) 0%, rgba(250,250,250,0.95) 100%)',
            backdropFilter: 'blur(10px)'
          }
        }}
      >
        <DialogTitle sx={{ 
          pb: 2, 
          pt: 3,
          px: 3,
          display: 'flex', 
          alignItems: 'center', 
          gap: 2,
          background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.08)} 0%, ${alpha(theme.palette.secondary.main, 0.08)} 100%)`,
          borderRadius: '16px 16px 0 0',
          borderBottom: `1px solid ${alpha(theme.palette.divider, 0.1)}`
        }}>
          <Box sx={{ 
            p: 2, 
            borderRadius: '16px', 
            backgroundColor: alpha(theme.palette.primary.main, 0.1),
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '1.5rem',
            minWidth: 56,
            minHeight: 56
          }}>
            üíæ
          </Box>
          <Box sx={{ flex: 1 }}>
            <Typography variant="h5" sx={{ 
              fontWeight: 700, 
              color: 'text.primary',
              mb: 0.5,
              fontSize: '1.3rem'
            }}>
              –ó–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫
            </Typography>
            <Typography variant="body2" sx={{ 
              color: 'text.secondary',
              fontSize: '0.875rem',
              lineHeight: 1.4
            }}>
              –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞—à —É—Ä–æ–∫ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
            </Typography>
          </Box>
        </DialogTitle>

        <DialogContent sx={{ pt: 4, pb: 3, px: 3 }}>
          <Box sx={{ display: 'flex', flexDirection: 'column', gap: 3.5 }}>
            {/* –ù–∞–∑–≤–∞ —É—Ä–æ–∫—É */}
            <TextField
              label="üìö –ù–∞–∑–≤–∞ —É—Ä–æ–∫—É"
              variant="outlined"
              fullWidth
              value={saveDialogData.title}
              onChange={(e) => setSaveDialogData(prev => ({ ...prev, title: e.target.value }))}
              sx={{
                '& .MuiOutlinedInput-root': {
                  borderRadius: 3,
                  backgroundColor: alpha(theme.palette.primary.main, 0.02),
                  '&:hover': {
                    backgroundColor: alpha(theme.palette.primary.main, 0.04),
                  },
                  '&.Mui-focused': {
                    backgroundColor: alpha(theme.palette.primary.main, 0.06),
                  }
                },
                '& .MuiInputLabel-root': {
                  fontSize: '1rem',
                  fontWeight: 500
                }
              }}
              placeholder="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —É—Ä–æ–∫—É"
              required
            />

            {/* –û–ø–∏—Å —É—Ä–æ–∫—É */}
            <TextField
              label="üìù –û–ø–∏—Å —É—Ä–æ–∫—É"
              variant="outlined"
              fullWidth
              multiline
              rows={3}
              value={saveDialogData.description}
              onChange={(e) => setSaveDialogData(prev => ({ ...prev, description: e.target.value }))}
              sx={{
                '& .MuiOutlinedInput-root': {
                  borderRadius: 3,
                  backgroundColor: alpha(theme.palette.primary.main, 0.02),
                  '&:hover': {
                    backgroundColor: alpha(theme.palette.primary.main, 0.04),
                  },
                  '&.Mui-focused': {
                    backgroundColor: alpha(theme.palette.primary.main, 0.06),
                  }
                },
                '& .MuiInputLabel-root': {
                  fontSize: '1rem',
                  fontWeight: 500
                }
              }}
              placeholder="–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –∑–º—ñ—Å—Ç—É —Ç–∞ –º–µ—Ç–∏ —É—Ä–æ–∫—É"
            />

            {/* –ü—Ä–µ–¥–º–µ—Ç/–∂–∞–Ω—Ä */}
            <TextField
              label="üéØ –ü—Ä–µ–¥–º–µ—Ç/–ñ–∞–Ω—Ä"
              variant="outlined"
              fullWidth
              select
              value={saveDialogData.subject}
              onChange={(e) => setSaveDialogData(prev => ({ ...prev, subject: e.target.value }))}
              sx={{
                '& .MuiOutlinedInput-root': {
                  borderRadius: 3,
                  backgroundColor: alpha(theme.palette.primary.main, 0.02),
                  '&:hover': {
                    backgroundColor: alpha(theme.palette.primary.main, 0.04),
                  },
                  '&.Mui-focused': {
                    backgroundColor: alpha(theme.palette.primary.main, 0.06),
                  }
                },
                '& .MuiInputLabel-root': {
                  fontSize: '1rem',
                  fontWeight: 500
                }
              }}
            >
              <MenuItem value="–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞">üî¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞</MenuItem>
              <MenuItem value="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞">üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞</MenuItem>
              <MenuItem value="–ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞">üá¨üáß –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –º–æ–≤–∞</MenuItem>
              <MenuItem value="–ü—Ä–∏—Ä–æ–¥–æ–∑–Ω–∞–≤—Å—Ç–≤–æ">üåø –ü—Ä–∏—Ä–æ–¥–æ–∑–Ω–∞–≤—Å—Ç–≤–æ</MenuItem>
              <MenuItem value="–Ü—Å—Ç–æ—Ä—ñ—è">üìú –Ü—Å—Ç–æ—Ä—ñ—è</MenuItem>
              <MenuItem value="–ì–µ–æ–≥—Ä–∞—Ñ—ñ—è">üåç –ì–µ–æ–≥—Ä–∞—Ñ—ñ—è</MenuItem>
              <MenuItem value="–§—ñ–∑–∏–∫–∞">‚ö° –§—ñ–∑–∏–∫–∞</MenuItem>
              <MenuItem value="–•—ñ–º—ñ—è">üß™ –•—ñ–º—ñ—è</MenuItem>
              <MenuItem value="–ë—ñ–æ–ª–æ–≥—ñ—è">üß¨ –ë—ñ–æ–ª–æ–≥—ñ—è</MenuItem>
              <MenuItem value="–ú–∏—Å—Ç–µ—Ü—Ç–≤–æ">üé® –ú–∏—Å—Ç–µ—Ü—Ç–≤–æ</MenuItem>
              <MenuItem value="–ú—É–∑–∏–∫–∞">üéµ –ú—É–∑–∏–∫–∞</MenuItem>
              <MenuItem value="–§—ñ–∑–∫—É–ª—å—Ç—É—Ä–∞">‚öΩ –§—ñ–∑–∫—É–ª—å—Ç—É—Ä–∞</MenuItem>
              <MenuItem value="–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞">üíª –Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞</MenuItem>
              <MenuItem value="–¢—Ä—É–¥–æ–≤–µ –Ω–∞–≤—á–∞–Ω–Ω—è">üî® –¢—Ä—É–¥–æ–≤–µ –Ω–∞–≤—á–∞–Ω–Ω—è</MenuItem>
              <MenuItem value="–ó–∞–≥–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è">üìö –ó–∞–≥–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è</MenuItem>
            </TextField>

            {/* –í—ñ–∫–æ–≤–∞ –≥—Ä—É–ø–∞ */}
            <TextField
              label="üë• –í—ñ–∫–æ–≤–∞ –≥—Ä—É–ø–∞"
              variant="outlined"
              fullWidth
              select
              value={saveDialogData.ageGroup}
              onChange={(e) => setSaveDialogData(prev => ({ ...prev, ageGroup: e.target.value }))}
              sx={{
                '& .MuiOutlinedInput-root': {
                  borderRadius: 3,
                  backgroundColor: alpha(theme.palette.primary.main, 0.02),
                  '&:hover': {
                    backgroundColor: alpha(theme.palette.primary.main, 0.04),
                  },
                  '&.Mui-focused': {
                    backgroundColor: alpha(theme.palette.primary.main, 0.06),
                  }
                },
                '& .MuiInputLabel-root': {
                  fontSize: '1rem',
                  fontWeight: 500
                }
              }}
            >
              <MenuItem value="3-5 —Ä–æ–∫—ñ–≤">üçº 3-5 —Ä–æ–∫—ñ–≤ (–¥–æ—à–∫—ñ–ª—å–Ω–∞)</MenuItem>
              <MenuItem value="6-7 —Ä–æ–∫—ñ–≤">üéí 6-7 —Ä–æ–∫—ñ–≤ (1 –∫–ª–∞—Å)</MenuItem>
              <MenuItem value="8-9 —Ä–æ–∫—ñ–≤">üìñ 8-9 —Ä–æ–∫—ñ–≤ (2-3 –∫–ª–∞—Å–∏)</MenuItem>
              <MenuItem value="10-11 —Ä–æ–∫—ñ–≤">üßÆ 10-11 —Ä–æ–∫—ñ–≤ (4-5 –∫–ª–∞—Å–∏)</MenuItem>
              <MenuItem value="12-13 —Ä–æ–∫—ñ–≤">üî¨ 12-13 —Ä–æ–∫—ñ–≤ (6-7 –∫–ª–∞—Å–∏)</MenuItem>
              <MenuItem value="14-15 —Ä–æ–∫—ñ–≤">üéì 14-15 —Ä–æ–∫—ñ–≤ (8-9 –∫–ª–∞—Å–∏)</MenuItem>
              <MenuItem value="16-18 —Ä–æ–∫—ñ–≤">üéØ 16-18 —Ä–æ–∫—ñ–≤ (10-11 –∫–ª–∞—Å–∏)</MenuItem>
              <MenuItem value="–í—Å—ñ –≤—ñ–∫–æ–≤—ñ –≥—Ä—É–ø–∏">üåà –í—Å—ñ –≤—ñ–∫–æ–≤—ñ –≥—Ä—É–ø–∏</MenuItem>
            </TextField>

            {/* –ü—Ä–µ–≤—å—é —Å–µ–ª–µ–∫—Ç–æ—Ä */}
            {slideUIState.currentLesson && slideUIState.selectedSlides.size > 0 && (
              <PreviewSelector
                slides={slideUIState.currentLesson.slides
                  .filter(slide => slideUIState.selectedSlides.has(slide.id))
                  .map(slide => ({
                    id: slide.id,
                    title: slide.title,
                    htmlContent: slide.htmlContent,
                    type: slide.type
                  }))
                }
                selectedPreviewId={saveDialogData.selectedPreviewId}
                onPreviewSelect={handlePreviewSelect}
                disabled={slideUIState.isSavingLesson}
                cachedPreviews={slidePreviews}
              />
            )}
          </Box>
        </DialogContent>

        <DialogActions sx={{ 
          p: 3, 
          pt: 2, 
          gap: 2,
          borderTop: `1px solid ${alpha(theme.palette.divider, 0.1)}`,
          backgroundColor: alpha(theme.palette.grey[50], 0.5)
        }}>
          <Button 
            onClick={closeSaveDialog} 
            sx={{ 
              textTransform: 'none',
              borderRadius: 3,
              px: 4,
              py: 1.5,
              fontSize: '1rem',
              fontWeight: 500,
              color: theme.palette.text.secondary,
              '&:hover': {
                backgroundColor: alpha(theme.palette.grey[400], 0.1),
                color: theme.palette.text.primary
              }
            }}
          >
            –°–∫–∞—Å—É–≤–∞—Ç–∏
          </Button>
          <Button 
            onClick={() => saveSelectedSlides(saveDialogData)}
            variant="contained"
            disabled={!saveDialogData.title.trim() || slideUIState.isSavingLesson}
            startIcon={slideUIState.isSavingLesson ? <LinearProgress /> : null}
            sx={{ 
              textTransform: 'none',
              borderRadius: 3,
              px: 4,
              py: 1.5,
              fontSize: '1rem',
              fontWeight: 600,
              background: `linear-gradient(135deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.dark} 100%)`,
              boxShadow: '0 4px 12px rgba(0,0,0,0.15)',
              '&:hover': {
                background: `linear-gradient(135deg, ${theme.palette.primary.dark} 0%, ${alpha(theme.palette.primary.dark, 0.8)} 100%)`,
                boxShadow: '0 6px 16px rgba(0,0,0,0.2)',
                transform: 'translateY(-1px)'
              },
              '&:disabled': {
                background: theme.palette.grey[300],
                color: theme.palette.grey[500],
                boxShadow: 'none'
              }
            }}
          >
            {slideUIState.isSavingLesson ? '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : '–ó–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Menu –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è */}
      <Menu
        anchorEl={improveMenuAnchor}
        open={showImproveMenu}
        onClose={handleImproveMenuClose}
        anchorOrigin={{
          vertical: 'bottom',
          horizontal: 'center',
        }}
        transformOrigin={{
          vertical: 'top',
          horizontal: 'center',
        }}
      >
        <MenuItem onClick={handleAutoImprove}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <Sparkles size={18} />
            <Typography>–ü–æ–∫—Ä–∞—â–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ</Typography>
          </Box>
        </MenuItem>
        <MenuItem onClick={handleManualImprove}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <MessageSquare size={18} />
            <Typography>–ü–æ–∫—Ä–∞—â–∏—Ç–∏ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º</Typography>
          </Box>
        </MenuItem>
      </Menu>
    </Layout>
  );
};

export default ChatInterface; 