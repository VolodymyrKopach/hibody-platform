import { NextRequest, NextResponse } from 'next/server';
import { Lesson, LessonSlide } from '../../../types/lesson';
import { CreateLessonRequest, CreateLessonResponse } from '../../../types/api';

// –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ —É—Ä–æ–∫—ñ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ –±—É–¥–µ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö)
let lessons: Map<string, Lesson> = new Map();
let slideCounter = 0;

function generateId(): string {
  return Math.random().toString(36).substr(2, 9);
}

function createInitialSlides(lessonData: CreateLessonRequest): LessonSlide[] {
  const baseSlides: Partial<LessonSlide>[] = [
    {
      number: 1,
      title: '–í—ñ—Ç–∞–Ω–Ω—è',
      description: '–ó–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑ —Ç–µ–º–æ—é —É—Ä–æ–∫—É',
      type: 'welcome',
      icon: 'üëã'
    },
    {
      number: 2,
      title: '–û—Å–Ω–æ–≤–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª',
      description: '–ü–æ–¥–∞—á–∞ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É',
      type: 'content',
      icon: 'üìö'
    },
    {
      number: 3,
      title: '–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è',
      description: '–ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –∑–Ω–∞–Ω—å',
      type: 'activity',
      icon: 'üéØ'
    },
    {
      number: 4,
      title: '–ü—ñ–¥—Å—É–º–æ–∫',
      description: '–£–∑–∞–≥–∞–ª—å–Ω–µ–Ω–Ω—è –≤–∏–≤—á–µ–Ω–æ–≥–æ',
      type: 'summary',
      icon: 'üìù'
    }
  ];

  // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–µ—Ä–µ–¥–∞–≤ –≤–ª–∞—Å–Ω—ñ —Å–ª–∞–π–¥–∏
  if (lessonData.initialSlides && lessonData.initialSlides.length > 0) {
    return lessonData.initialSlides.map((slide, index) => ({
      id: generateId(),
      number: index + 1,
      title: slide.title || `–°–ª–∞–π–¥ ${index + 1}`,
      description: slide.description || '–û–ø–∏—Å —Å–ª–∞–π–¥—É',
      type: slide.type || 'content',
      icon: slide.icon || 'üìÑ',
      status: 'draft' as const,
      preview: slide.description || '–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
      _internal: {
        filename: `slide_${index + 1}_${(slide.title || 'slide').toLowerCase().replace(/\s+/g, '_')}.html`,
        htmlContent: '',
        dependencies: [],
        lastModified: new Date(),
        version: 1
      },
      createdAt: new Date(),
      updatedAt: new Date()
    }));
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ —Å–ª–∞–π–¥–∏
  return baseSlides.map(slide => ({
    id: generateId(),
    number: slide.number!,
    title: slide.title!,
    description: slide.description!,
    type: slide.type!,
    icon: slide.icon!,
    status: 'draft' as const,
    preview: slide.description!,
    _internal: {
      filename: `slide_${slide.number}_${slide.title!.toLowerCase().replace(/\s+/g, '_')}.html`,
      htmlContent: '',
      dependencies: [],
      lastModified: new Date(),
      version: 1
    },
    createdAt: new Date(),
    updatedAt: new Date()
  }));
}

// GET /api/lessons - –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —É—Ä–æ–∫–∏
export async function GET(request: NextRequest) {
  try {
    const url = new URL(request.url);
    const lessonId = url.searchParams.get('id');

    if (lessonId) {
      // –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —É—Ä–æ–∫
      const lesson = lessons.get(lessonId);
      if (!lesson) {
        return NextResponse.json({
          success: false,
          error: { message: '–£—Ä–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ', code: 'LESSON_NOT_FOUND' }
        }, { status: 404 });
      }

      return NextResponse.json({
        lesson,
        success: true,
        message: '–£—Ä–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —É—Ä–æ–∫–∏
    const allLessons = Array.from(lessons.values());
    return NextResponse.json({
      lessons: allLessons,
      total: allLessons.length,
      success: true,
      message: '–£—Ä–æ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ'
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —É—Ä–æ–∫—ñ–≤:', error);
    return NextResponse.json({
      success: false,
      error: { 
        message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        code: 'INTERNAL_ERROR'
      }
    }, { status: 500 });
  }
}

// POST /api/lessons - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —É—Ä–æ–∫
export async function POST(request: NextRequest) {
  try {
    const body: CreateLessonRequest = await request.json();
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!body.title?.trim()) {
      return NextResponse.json({
        success: false,
        error: { 
          message: '–ù–∞–∑–≤–∞ —É—Ä–æ–∫—É –æ–±–æ–≤\'—è–∑–∫–æ–≤–∞',
          code: 'VALIDATION_ERROR'
        }
      }, { status: 400 });
    }

    if (!body.targetAge?.trim()) {
      return NextResponse.json({
        success: false,
        error: { 
          message: '–¶—ñ–ª—å–æ–≤–∏–π –≤—ñ–∫ –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π',
          code: 'VALIDATION_ERROR'
        }
      }, { status: 400 });
    }

    const lessonId = generateId();
    const now = new Date();
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–∞–π–¥–∏ –∑ –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∞–±–æ –±–∞–∑–æ–≤—ñ —Å–ª–∞–π–¥–∏
    let slides: LessonSlide[] = [];
    
    if (body.slides && body.slides.length > 0) {
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ —Å–ª–∞–π–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç LessonSlide
      slides = body.slides.map((slideData, index) => ({
        id: generateId(),
        number: index + 1,
        title: slideData.title || `–°–ª–∞–π–¥ ${index + 1}`,
        description: slideData.content || slideData.description || '–û–ø–∏—Å —Å–ª–∞–π–¥—É',
        type: (slideData.type as any) || 'content',
        icon: getSlideIcon((slideData.type as any) || 'content'),
        status: 'ready' as const,
        preview: slideData.content || slideData.description || '–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥',
        _internal: {
          filename: `slide_${index + 1}_${(slideData.title || 'slide').toLowerCase().replace(/\s+/g, '_')}.html`,
          htmlContent: slideData.htmlContent || '',
          dependencies: [],
          lastModified: now,
          version: 1
        },
        createdAt: now,
        updatedAt: now
      }));
    } else {
      slides = createInitialSlides(body);
    }

    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ —Å–ª–∞–π–¥—É
    function getSlideIcon(type: string): string {
      switch (type) {
        case 'welcome': return 'üëã';
        case 'content': return 'üìö';
        case 'activity': return 'üéØ';
        case 'game': return 'üéÆ';
        case 'summary': return 'üìù';
        case 'title': return 'üìã';
        case 'interactive': return 'üéÆ';
        default: return 'üìÑ';
      }
    }

    const lesson: Lesson = {
      id: lessonId,
      title: body.title.trim(),
      description: body.description?.trim() || '',
      targetAge: body.targetAge.trim(),
      subject: body.subject?.trim() || '',
      duration: body.duration || 30,
      slides,
      _internal: {
        projectPath: `/projects/lesson_${lessonId}`,
        files: [],
        structure: {},
        metadata: {
          lessonTitle: body.title.trim(),
          targetAge: body.targetAge.trim(),
          subject: body.subject?.trim() || '',
          duration: body.duration || 30,
          slidesCount: slides.length,
          language: 'uk',
          createdBy: 'user',
          version: '1.0.0'
        },
        lastSync: now
      },
      createdAt: now,
      updatedAt: now,
      status: 'planning'
    };

    lessons.set(lessonId, lesson);

    const response: CreateLessonResponse = {
      lesson,
      success: true,
      message: '–£—Ä–æ–∫ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ'
    };

    return NextResponse.json(response);

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —É—Ä–æ–∫—É:', error);
    return NextResponse.json({
      success: false,
      error: { 
        message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —É—Ä–æ–∫—É',
        code: 'CREATE_ERROR'
      }
    }, { status: 500 });
  }
}

// PUT /api/lessons - –æ–Ω–æ–≤–∏—Ç–∏ —É—Ä–æ–∫
export async function PUT(request: NextRequest) {
  try {
    const body = await request.json();
    const { lessonId, updates } = body;

    if (!lessonId) {
      return NextResponse.json({
        success: false,
        error: { 
          message: 'ID —É—Ä–æ–∫—É –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π',
          code: 'VALIDATION_ERROR'
        }
      }, { status: 400 });
    }

    const lesson = lessons.get(lessonId);
    if (!lesson) {
      return NextResponse.json({
        success: false,
        error: { 
          message: '–£—Ä–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
          code: 'LESSON_NOT_FOUND'
        }
      }, { status: 404 });
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —É—Ä–æ–∫
    const updatedLesson: Lesson = {
      ...lesson,
      ...updates,
      id: lessonId, // –ó–∞—Ö–∏—â–∞—î–º–æ –≤—ñ–¥ –∑–º—ñ–Ω–∏ ID
      updatedAt: new Date()
    };

    lessons.set(lessonId, updatedLesson);

    return NextResponse.json({
      lesson: updatedLesson,
      success: true,
      message: '–£—Ä–æ–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —É—Ä–æ–∫—É:', error);
    return NextResponse.json({
      success: false,
      error: { 
        message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —É—Ä–æ–∫—É',
        code: 'UPDATE_ERROR'
      }
    }, { status: 500 });
  }
}

// DELETE /api/lessons - –≤–∏–¥–∞–ª–∏—Ç–∏ —É—Ä–æ–∫
export async function DELETE(request: NextRequest) {
  try {
    const url = new URL(request.url);
    const lessonId = url.searchParams.get('id');

    if (!lessonId) {
      return NextResponse.json({
        success: false,
        error: { 
          message: 'ID —É—Ä–æ–∫—É –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π',
          code: 'VALIDATION_ERROR'
        }
      }, { status: 400 });
    }

    const lesson = lessons.get(lessonId);
    if (!lesson) {
      return NextResponse.json({
        success: false,
        error: { 
          message: '–£—Ä–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
          code: 'LESSON_NOT_FOUND'
        }
      }, { status: 404 });
    }

    lessons.delete(lessonId);

    return NextResponse.json({
      deletedLessonId: lessonId,
      success: true,
      message: '–£—Ä–æ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ'
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —É—Ä–æ–∫—É:', error);
    return NextResponse.json({
      success: false,
      error: { 
        message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —É—Ä–æ–∫—É',
        code: 'DELETE_ERROR'
      }
    }, { status: 500 });
  }
}
