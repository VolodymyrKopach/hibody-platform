import { NextRequest, NextResponse } from 'next/server';
import { LessonSlide } from '../../../../../types/lesson';
import { 
  CreateSlideRequest, 
  CreateSlideResponse,
  UpdateSlideRequest,
  UpdateSlideResponse,
  DeleteSlideRequest,
  DeleteSlideResponse
} from '../../../../../types/api';

// –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —É—Ä–æ–∫–∏ –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω—ñ —Ü–µ –±—É–¥–µ –±–∞–∑–∞ –¥–∞–Ω–∏—Ö)
// –¢–∏–º—á–∞—Å–æ–≤–æ –¥—É–±–ª—é—î–º–æ —Å—Ö–æ–≤–∏—â–µ
let lessons: Map<string, any> = new Map();

function generateId(): string {
  return Math.random().toString(36).substr(2, 9);
}

// GET /api/lessons/[lessonId]/slides - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ª–∞–π–¥–∏ —É—Ä–æ–∫—É
export async function GET(
  request: NextRequest,
  { params }: { params: { lessonId: string } }
) {
  try {
    const { lessonId } = await params;
    
    const lesson = lessons.get(lessonId);
    if (!lesson) {
      return NextResponse.json({
        success: false,
        error: { 
          message: '–£—Ä–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
          code: 'LESSON_NOT_FOUND'
        }
      }, { status: 404 });
    }

    return NextResponse.json({
      slides: lesson.slides || [],
      total: lesson.slides?.length || 0,
      lessonTitle: lesson.title,
      success: true,
      message: '–°–ª–∞–π–¥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ'
    });

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ª–∞–π–¥—ñ–≤:', error);
    return NextResponse.json({
      success: false,
      error: { 
        message: '–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        code: 'INTERNAL_ERROR'
      }
    }, { status: 500 });
  }
}

// POST /api/lessons/[lessonId]/slides - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥
export async function POST(
  request: NextRequest,
  { params }: { params: { lessonId: string } }
) {
  try {
    const { lessonId } = await params;
    const body: CreateSlideRequest = await request.json();
    
    const lesson = lessons.get(lessonId);
    if (!lesson) {
      return NextResponse.json({
        success: false,
        error: { 
          message: '–£—Ä–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
          code: 'LESSON_NOT_FOUND'
        }
      }, { status: 404 });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è
    if (!body.slide.title?.trim()) {
      return NextResponse.json({
        success: false,
        error: { 
          message: '–ù–∞–∑–≤–∞ —Å–ª–∞–π–¥—É –æ–±–æ–≤\'—è–∑–∫–æ–≤–∞',
          code: 'VALIDATION_ERROR'
        }
      }, { status: 400 });
    }

    const slideId = generateId();
    const now = new Date();
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –Ω–æ–≤–æ–≥–æ —Å–ª–∞–π–¥—É
    const currentSlides = lesson.slides || [];
    const slideNumber = body.position !== undefined 
      ? body.position 
      : currentSlides.length + 1;

    // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–º–µ—Ä–∏ —ñ—Å–Ω—É—é—á–∏—Ö —Å–ª–∞–π–¥—ñ–≤ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if (body.position !== undefined && body.position <= currentSlides.length) {
      currentSlides.forEach(slide => {
        if (slide.number >= body.position) {
          slide.number += 1;
        }
      });
    }

    const newSlide: LessonSlide = {
      id: slideId,
      number: slideNumber,
      title: body.slide.title.trim(),
      description: body.slide.description?.trim() || '',
      type: body.slide.type || 'content',
      icon: body.slide.icon || 'üìÑ',
      status: 'draft',
      preview: body.slide.description?.trim() || '–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π',
      _internal: {
        filename: `slide_${slideNumber}_${body.slide.title.toLowerCase().replace(/\s+/g, '_')}.html`,
        htmlContent: body.generateContent ? generateBasicHTML(body.slide) : '',
        dependencies: [],
        lastModified: now,
        version: 1
      },
      createdAt: now,
      updatedAt: now
    };

    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥ –¥–æ —É—Ä–æ–∫—É
    const updatedSlides = [...currentSlides, newSlide].sort((a, b) => a.number - b.number);
    lesson.slides = updatedSlides;
    lesson.updatedAt = now;
    
    lessons.set(lessonId, lesson);

    const response: CreateSlideResponse = {
      slide: newSlide,
      htmlFile: newSlide._internal.filename,
      preview: newSlide.preview,
      success: true,
      message: '–°–ª–∞–π–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ'
    };

    return NextResponse.json(response);

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–ª–∞–π–¥—É:', error);
    return NextResponse.json({
      success: false,
      error: { 
        message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å–ª–∞–π–¥—É',
        code: 'CREATE_ERROR'
      }
    }, { status: 500 });
  }
}

// PUT /api/lessons/[lessonId]/slides - –æ–Ω–æ–≤–∏—Ç–∏ —Å–ª–∞–π–¥
export async function PUT(
  request: NextRequest,
  { params }: { params: { lessonId: string } }
) {
  try {
    const { lessonId } = await params;
    const body: UpdateSlideRequest = await request.json();
    
    const lesson = lessons.get(lessonId);
    if (!lesson) {
      return NextResponse.json({
        success: false,
        error: { 
          message: '–£—Ä–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
          code: 'LESSON_NOT_FOUND'
        }
      }, { status: 404 });
    }

    const slideIndex = lesson.slides?.findIndex(s => s.id === body.slideId);
    if (slideIndex === -1 || slideIndex === undefined) {
      return NextResponse.json({
        success: false,
        error: { 
          message: '–°–ª–∞–π–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
          code: 'SLIDE_NOT_FOUND'
        }
      }, { status: 404 });
    }

    const currentSlide = lesson.slides[slideIndex];
    const now = new Date();

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ª–∞–π–¥
    const updatedSlide: LessonSlide = {
      ...currentSlide,
      ...body.updates,
      id: body.slideId, // –ó–∞—Ö–∏—â–∞—î–º–æ –≤—ñ–¥ –∑–º—ñ–Ω–∏ ID
      updatedAt: now,
      _internal: {
        ...currentSlide._internal,
        ...body.updates._internal,
        lastModified: now,
        version: currentSlide._internal.version + 1
      }
    };

    // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏
    if (body.regenerateFiles) {
      updatedSlide._internal.htmlContent = generateBasicHTML(updatedSlide);
      updatedSlide.preview = updatedSlide.description;
    }

    lesson.slides[slideIndex] = updatedSlide;
    lesson.updatedAt = now;
    lessons.set(lessonId, lesson);

    const response: UpdateSlideResponse = {
      slide: updatedSlide,
      updatedFiles: [updatedSlide._internal.filename],
      preview: updatedSlide.preview,
      success: true,
      message: '–°–ª–∞–π–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ'
    };

    return NextResponse.json(response);

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–ª–∞–π–¥—É:', error);
    return NextResponse.json({
      success: false,
      error: { 
        message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–ª–∞–π–¥—É',
        code: 'UPDATE_ERROR'
      }
    }, { status: 500 });
  }
}

// DELETE /api/lessons/[lessonId]/slides - –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–ª–∞–π–¥
export async function DELETE(
  request: NextRequest,
  { params }: { params: { lessonId: string } }
) {
  try {
    const lessonId = params.lessonId;
    const url = new URL(request.url);
    const slideId = url.searchParams.get('slideId');
    const deleteFiles = url.searchParams.get('deleteFiles') === 'true';

    if (!slideId) {
      return NextResponse.json({
        success: false,
        error: { 
          message: 'ID —Å–ª–∞–π–¥—É –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–π',
          code: 'VALIDATION_ERROR'
        }
      }, { status: 400 });
    }
    
    const lesson = lessons.get(lessonId);
    if (!lesson) {
      return NextResponse.json({
        success: false,
        error: { 
          message: '–£—Ä–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
          code: 'LESSON_NOT_FOUND'
        }
      }, { status: 404 });
    }

    const slideIndex = lesson.slides?.findIndex(s => s.id === slideId);
    if (slideIndex === -1 || slideIndex === undefined) {
      return NextResponse.json({
        success: false,
        error: { 
          message: '–°–ª–∞–π–¥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
          code: 'SLIDE_NOT_FOUND'
        }
      }, { status: 404 });
    }

    const deletedSlide = lesson.slides[slideIndex];
    const deletedFiles = deleteFiles ? [deletedSlide._internal.filename] : [];

    // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª–∞–π–¥
    lesson.slides.splice(slideIndex, 1);

    // –û–Ω–æ–≤–ª—é—î–º–æ –Ω–æ–º–µ—Ä–∏ —Ä–µ—à—Ç–∏ —Å–ª–∞–π–¥—ñ–≤
    lesson.slides.forEach((slide, index) => {
      slide.number = index + 1;
    });

    lesson.updatedAt = new Date();
    lessons.set(lessonId, lesson);

    const response: DeleteSlideResponse = {
      deletedSlideId: slideId,
      deletedFiles,
      success: true,
      message: '–°–ª–∞–π–¥ –≤–∏–¥–∞–ª–µ–Ω–æ'
    };

    return NextResponse.json(response);

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å–ª–∞–π–¥—É:', error);
    return NextResponse.json({
      success: false,
      error: { 
        message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å–ª–∞–π–¥—É',
        code: 'DELETE_ERROR'
      }
    }, { status: 500 });
  }
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –±–∞–∑–æ–≤–æ–≥–æ HTML
function generateBasicHTML(slide: Partial<LessonSlide>): string {
  return `<!DOCTYPE html>
<html lang="uk">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${slide.title || '–°–ª–∞–π–¥'}</title>
  <style>
    body {
      font-family: 'Comic Sans MS', cursive, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      margin: 0;
      padding: 20px;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      color: white;
    }
    .slide-container {
      background: rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      padding: 40px;
      max-width: 800px;
      text-align: center;
      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    }
    h1 {
      font-size: 3em;
      margin: 0 0 20px 0;
      text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    }
    p {
      font-size: 1.5em;
      line-height: 1.6;
      margin: 20px 0;
    }
    .icon {
      font-size: 4em;
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <div class="slide-container">
    <div class="icon">${slide.icon || 'üìÑ'}</div>
    <h1>${slide.title || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥—É'}</h1>
    <p>${slide.description || '–û–ø–∏—Å —Å–ª–∞–π–¥—É'}</p>
  </div>
</body>
</html>`;
}
