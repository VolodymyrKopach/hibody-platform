import { IIntentDetectionService } from '../intent/IIntentDetectionService';
import { IntentDetectionServiceFactory } from '../intent/IntentDetectionServiceFactory';
import { IIntentHandler, ChatHandlerResult, ConversationHistory } from './handlers/IIntentHandler';
import { CreateLessonHandler } from './handlers/CreateLessonHandler';
import { EditPlanHandler } from './handlers/EditPlanHandler';
import { HelpHandler } from './handlers/HelpHandler';
import { FallbackHandler } from './handlers/FallbackHandler';

// Single Responsibility: –ö–æ–æ—Ä–¥–∏–Ω—É—î —Ä–æ–±–æ—Ç—É —á–∞—Ç—É —á–µ—Ä–µ–∑ dependency injection
export class ChatService {
  private intentDetectionService: IIntentDetectionService;
  private handlers: IIntentHandler[];

  constructor() {
    // Dependency Inversion: –∑–∞–ª–µ–∂–∏–º–æ –≤—ñ–¥ –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ–π, –Ω–µ –≤—ñ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –∫–ª–∞—Å—ñ–≤
    this.intentDetectionService = IntentDetectionServiceFactory.createService();
    
    // Open/Closed: –ª–µ–≥–∫–æ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –±–µ–∑ –∑–º—ñ–Ω–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–¥—É
    this.handlers = [
      new CreateLessonHandler(),
      new EditPlanHandler(),
      new HelpHandler(),
      new FallbackHandler() // –ó–∞–≤–∂–¥–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π
    ];
  }

  async processMessage(
    message: string, 
    conversationHistory?: ConversationHistory,
    action?: string
  ): Promise<ChatHandlerResult> {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const intentResult = await this.intentDetectionService.detectIntent(message);
      
      console.log(`üéØ [INTENT DETECTED] ${intentResult.intent} (confidence: ${intentResult.confidence})`);
      console.log(`üìù [PARAMETERS]`, intentResult.parameters);
      
      // –û–±—Ä–æ–±–ª—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –¥—ñ—ó (approve_plan, edit_plan —Ç–æ—â–æ)
      if (action) {
        return await this.handleAction(action, conversationHistory, intentResult);
      }
      
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
      const handler = this.findHandler(intentResult, conversationHistory);
      
      if (!handler) {
        throw new Error(`No handler found for intent: ${intentResult.intent}`);
      }

      // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç
      return await handler.handle(intentResult, conversationHistory);

    } catch (error) {
      console.error('Chat service error:', error);
      
      return {
        success: false,
        message: `–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`,
        conversationHistory,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private findHandler(
    intentResult: any, 
    conversationHistory?: ConversationHistory
  ): IIntentHandler | undefined {
    return this.handlers.find(handler => 
      handler.canHandle(intentResult, conversationHistory)
    );
  }

  private async handleAction(
    action: string, 
    conversationHistory?: ConversationHistory,
    intentResult?: any
  ): Promise<ChatHandlerResult> {
    switch (action) {
      case 'approve_plan':
        return await this.handleApprovePlan(conversationHistory);
      
      case 'edit_plan':
        return await this.handleEditPlanAction(conversationHistory);
        
      case 'help':
        const helpHandler = new HelpHandler();
        return await helpHandler.handle(intentResult || { intent: 'help', language: 'uk' });
      
      default:
        throw new Error(`Unknown action: ${action}`);
    }
  }

  private async handleApprovePlan(conversationHistory?: ConversationHistory): Promise<ChatHandlerResult> {
    if (!conversationHistory?.planningResult) {
      throw new Error('No plan to approve');
    }

    console.log('üé® Generating first slide HTML...');
    console.log('‚öôÔ∏è  Processing animations and styling...');
    
    // Simulate slide generation time
    await new Promise(resolve => setTimeout(resolve, 2500));

    const mockSlideHTML = this.generateMockSlide();

    const newConversationHistory: ConversationHistory = {
      ...conversationHistory,
      step: 'slide_generation',
      currentSlideIndex: 1,
      generatedSlides: [{ id: 1, html: mockSlideHTML }]
    };

    return {
      success: true,
      message: `‚úÖ **–ü–µ—Ä—à–∏–π —Å–ª–∞–π–¥ –≥–æ—Ç–æ–≤–∏–π!** (1/${conversationHistory.totalSlides})

–°–ª–∞–π–¥ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ç–∞ –¥–æ–¥–∞–Ω–∏–π –¥–æ –ø—Ä–∞–≤–æ—ó –ø–∞–Ω–µ–ª—ñ. 

üéØ **–©–æ –¥–∞–ª—ñ?**
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ª–∞–π–¥ —É –ø—Ä–∞–≤—ñ–π –ø–∞–Ω–µ–ª—ñ ‚û°Ô∏è
‚Ä¢ –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥
‚Ä¢ –ü–æ–∫—Ä–∞—â–∏—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥`,
      conversationHistory: newConversationHistory,
      actions: [
        {
          action: 'generate_next_slide',
          label: '‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥',
          description: `–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ª–∞–π–¥ 2/${conversationHistory.totalSlides}`
        },
        {
          action: 'regenerate_slide',
          label: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏',
          description: '–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Ü—å–æ–≥–æ —Å–ª–∞–π–¥—É'
        }
      ]
    };
  }

  private async handleEditPlanAction(conversationHistory?: ConversationHistory): Promise<ChatHandlerResult> {
    if (!conversationHistory) {
      throw new Error('No conversation history for plan editing');
    }

    const newConversationHistory: ConversationHistory = {
      ...conversationHistory,
      step: 'plan_editing'
    };

    return {
      success: true,
      message: `–ù–∞–ø–∏—à—ñ—Ç—å —è–∫—ñ –∑–º—ñ–Ω–∏ —Ö–æ—á–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –¥–æ –ø–ª–∞–Ω—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
        
- "–î–æ–¥–∞–π —Å–ª–∞–π–¥ –ø—Ä–æ –ª—ñ—Ç–∞—é—á–∏—Ö –¥–∏–Ω–æ–∑–∞–≤—Ä—ñ–≤"
- "–ó–º—ñ–Ω–∏ –≤—ñ–∫ –¥—ñ—Ç–µ–π –Ω–∞ 8 —Ä–æ–∫—ñ–≤"  
- "–ó—Ä–æ–±–∏ —É—Ä–æ–∫ –∫–æ—Ä–æ—Ç—à–∏–º - 4 —Å–ª–∞–π–¥–∏"
- "–î–æ–¥–∞–π –±—ñ–ª—å—à–µ —ñ–≥–æ—Ä"`,
      conversationHistory: newConversationHistory,
      actions: []
    };
  }

  private generateMockSlide(): string {
    return `<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–°–ª–∞–π–¥ 1 - –í—ñ—Ç–∞–Ω–Ω—è</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Comic Sans MS', cursive;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            overflow: hidden;
        }
        .slide-container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 40px;
            text-align: center;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            max-width: 800px;
            animation: slideIn 1s ease-out;
        }
        @keyframes slideIn {
            from { transform: translateY(50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }
        h1 {
            color: #2c3e50;
            font-size: 2.5em;
            margin-bottom: 20px;
            animation: bounce 2s infinite;
        }
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
            40% { transform: translateY(-10px); }
            60% { transform: translateY(-5px); }
        }
        .start-button {
            background: linear-gradient(45deg, #ff6b6b, #ee5a52);
            color: white;
            border: none;
            padding: 15px 30px;
            font-size: 1.2em;
            border-radius: 50px;
            cursor: pointer;
            transition: all 0.3s;
        }
        .start-button:hover {
            transform: scale(1.1);
            box-shadow: 0 10px 20px rgba(0,0,0,0.2);
        }
    </style>
</head>
<body>
    <div class="slide-container">
        <h1>üéâ –í—ñ—Ç–∞—î–º–æ –≤ —Å–≤—ñ—Ç—ñ –Ω–∞–≤—á–∞–Ω–Ω—è! üéâ</h1>
        <p style="font-size: 1.3em; color: #34495e;">–ì–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏ –∑–∞—Ö–æ–ø–ª—é—é—á—É –ø–æ–¥–æ—Ä–æ–∂?</p>
        <!-- generate image: Happy cartoon children with books and educational symbols [400:300] -->
        <button class="start-button" onclick="startJourney()">
            üöÄ –ü–æ—á–∞—Ç–∏ –ø–æ–¥–æ—Ä–æ–∂!
        </button>
    </div>
    
    <script>
        function startJourney() {
            alert('–ü–æ–¥–æ—Ä–æ–∂ –ø–æ—á–∞–ª–∞—Å—è! üéä');
        }
    </script>
</body>
</html>`;
  }
} 