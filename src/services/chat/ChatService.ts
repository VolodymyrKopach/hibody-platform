import { IIntentDetectionService } from '../intent/IIntentDetectionService';
import { IntentDetectionServiceFactory } from '../intent/IntentDetectionServiceFactory';
import { IIntentHandler } from './handlers/IIntentHandler';
import { GeminiContentService } from '@/services/content/GeminiContentService';
import { GeminiSimpleEditService } from '@/services/content/GeminiSimpleEditService';
import { FallbackHandler } from './handlers/FallbackHandler';
import { EditPlanHandler } from './handlers/EditPlanHandler';
import { EnhancedCreateLessonHandler } from './handlers/EnhancedCreateLessonHandler';
import { HelpHandler } from './handlers/HelpHandler';
import { DataCollectionHandler } from './handlers/DataCollectionHandler';
import { type ConversationHistory, type ChatResponse } from './types';
import { type SimpleSlide, type SlideDescription, type SlideGenerationProgress, type BulkSlideGenerationResult, type SimpleLesson } from '@/types/chat';
import { type SlideImageInfo } from '@/types/lesson';
import { type ProcessedSlideData, extractImagePrompts, processSlideWithImages } from '@/utils/slideImageProcessor';
import { GeminiIntentService, EnhancedIntentDetectionResult } from '../intent/GeminiIntentService';

// Single Responsibility: –ö–æ–æ—Ä–¥–∏–Ω—É—î —Ä–æ–±–æ—Ç—É —á–∞—Ç—É —á–µ—Ä–µ–∑ dependency injection
export class ChatService {
  private intentDetectionService: IIntentDetectionService;
  private handlers: IIntentHandler[];
  private contentService: GeminiContentService;
  private simpleEditService: GeminiSimpleEditService;

  constructor() {
    // –¢–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î GeminiIntentService —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
    this.intentDetectionService = IntentDetectionServiceFactory.create();
    
    // Open/Closed: –ª–µ–≥–∫–æ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –±–µ–∑ –∑–º—ñ–Ω–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ–¥—É
    this.handlers = [
      new DataCollectionHandler(), // –ü–µ—Ä—à–∏–º - –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–±–æ—Ä—É –¥–∞–Ω–∏—Ö
      new EnhancedCreateLessonHandler(),
      new EditPlanHandler(),
      new HelpHandler(),
      new FallbackHandler() // –ó–∞–≤–∂–¥–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π
    ];

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ content service –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—ñ–≤
    const geminiApiKey = process.env.GEMINI_API_KEY;
    if (!geminiApiKey) {
      throw new Error('Gemini API key not found in environment variables (GEMINI_API_KEY)');
    }
    this.contentService = new GeminiContentService();
    this.simpleEditService = new GeminiSimpleEditService();
  }

  async processMessage(
    message: string, 
    conversationHistory?: ConversationHistory,
    action?: string
  ): Promise<ChatResponse> {
    try {
      // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–º—ñ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
      const intentResult = await this.intentDetectionService.detectIntent(message, conversationHistory);
      
      console.log(`üéØ [INTENT DETECTED] ${intentResult.intent} (confidence: ${intentResult.confidence})`);
      console.log(`üìù [PARAMETERS]`, intentResult.parameters);
      
      // –û–±—Ä–æ–±–ª—è—î–º–æ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –¥—ñ—ó (approve_plan, edit_plan —Ç–æ—â–æ)
      if (action) {
        return await this.handleAction(action, conversationHistory, intentResult);
      }
      
      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤ —è–∫—ñ –º–∞—é—Ç—å –æ–±—Ä—É–±–ª—è—Ç–∏—Å—è —è–∫ –¥—ñ—ó
      if (intentResult.intent === 'create_new_slide') {
        console.log('üîÑ Handling CREATE_NEW_SLIDE intent as generate_next_slide action');
        return await this.handleGenerateNextSlide(conversationHistory);
      }
      
      // –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤ - —Ç–µ–ø–µ—Ä —Ü–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–ª–∞–π–¥—É –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —É—Ä–æ–∫—É
      if (intentResult.intent === 'create_slide') {
        console.log('üé® Handling CREATE_SLIDE intent');
        
        // –Ø–∫—â–æ —î –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Ä–æ–∫—É - —Ü–µ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π —Å–ª–∞–π–¥
        if (conversationHistory?.currentLesson) {
          console.log('üìö Existing lesson found, creating additional slide');
          return await this.handleCreateAdditionalSlide(conversationHistory, intentResult);
        }
        
        // –Ü–Ω–∞–∫—à–µ —Ü–µ –ø–æ–º–∏–ª–∫–∞ - CREATE_SLIDE –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –º–∞—î –±—É—Ç–∏ CREATE_LESSON
        return {
          success: false,
          message: 'ü§î –°—Ö–æ–∂–µ –≤–∏ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ª–∞–π–¥, –∞–ª–µ —Å–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫.\n\n–°–ø—Ä–æ–±—É–π—Ç–µ: "–°—Ç–≤–æ—Ä–∏ —É—Ä–æ–∫ –ø—Ä–æ [—Ç–µ–º–∞] –¥–ª—è –¥—ñ—Ç–µ–π [–≤—ñ–∫] —Ä–æ–∫—ñ–≤"',
          conversationHistory,
          error: 'CREATE_SLIDE without lesson context'
        };
      }
      
      if (intentResult.intent === 'regenerate_slide') {
        return await this.handleRegenerateSlide(conversationHistory, intentResult);
      }

      // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤
      if (intentResult.intent === 'edit_slide') {
        return await this.handleEditSlide(conversationHistory, intentResult);
      }

      if (intentResult.intent === 'improve_html') {
        return await this.handleImproveSlide(conversationHistory, intentResult);
      }

      if (intentResult.intent === 'edit_html_inline') {
        return await this.handleInlineEditSlide(conversationHistory, intentResult);
      }
      
      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
      const handler = this.findHandler(intentResult, conversationHistory);
      
      if (!handler) {
        // –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏ –Ω–µ–≤—ñ–¥–æ–º–∏–π —ñ–Ω—Ç–µ–Ω—Ç –Ω–∞ —ñ—Å–Ω—É—é—á–∏–π
        const mappedIntent = this.tryMapUnknownIntent(intentResult);
        if (mappedIntent) {
          console.log(`üîÑ Mapped unknown intent ${intentResult.intent} ‚Üí ${mappedIntent.intent}`);
          const mappedHandler = this.findHandler(mappedIntent, conversationHistory);
          if (mappedHandler) {
            return await mappedHandler.handle(mappedIntent, conversationHistory as any);
          }
        }
        
        // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥—Ä—É–∂–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è–º–∏
        return this.generateFallbackResponse(intentResult, conversationHistory);
      }

      // –û–±—Ä–æ–±–ª—è—î–º–æ –∑–∞–ø–∏—Ç
      return await handler.handle(intentResult, conversationHistory);

    } catch (error) {
      console.error('Chat service error:', error);
      
      return {
        success: false,
        message: `–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`,
        conversationHistory,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private findHandler(
    intentResult: any, 
    conversationHistory?: ConversationHistory
  ): IIntentHandler | undefined {
    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –≤–∏–ø–∞–¥–∫–∏ –¥–ª—è —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤ —è–∫—ñ –Ω–µ –º–∞—é—Ç—å –æ–∫—Ä–µ–º–∏—Ö handlers
    if (intentResult.intent === 'create_new_slide' || intentResult.intent === 'regenerate_slide') {
      // –¶—ñ —ñ–Ω—Ç–µ–Ω—Ç–∏ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è —á–µ—Ä–µ–∑ actions
      return undefined;
    }

    return this.handlers.find(handler => 
      handler.canHandle(intentResult, conversationHistory)
    );
  }

  private async handleAction(
    action: string, 
    conversationHistory?: ConversationHistory,
    intentResult?: any
  ): Promise<ChatResponse> {
    switch (action) {
      case 'approve_plan':
        return await this.handleApprovePlan(conversationHistory);
      
      case 'edit_plan':
        return await this.handleEditPlanAction(conversationHistory);

      case 'generate_next_slide':
        // DEPRECATED: —Ç–µ–ø–µ—Ä —Å–ª–∞–π–¥–∏ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è –≤—Å—ñ –≤—ñ–¥—Ä–∞–∑—É
        return {
          success: false,
          message: 'ü§î –°–ª–∞–π–¥–∏ —Ç–µ–ø–µ—Ä –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è –≤—Å—ñ –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É —É—Ä–æ–∫—É.\n\n–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —É—Ä–æ–∫—É, —Å–∫–∞–∂—ñ—Ç—å: "–î–æ–¥–∞–π —Å–ª–∞–π–¥ –ø—Ä–æ [—Ç–µ–º–∞]"',
          conversationHistory,
          error: 'generate_next_slide deprecated - use bulk generation'
        };

      case 'regenerate_slide':
        return await this.handleRegenerateSlide(conversationHistory, intentResult);
        
      case 'help':
        const helpHandler = new HelpHandler();
        return await helpHandler.handle(intentResult || { intent: 'help', language: 'uk' });
      
      default:
        throw new Error(`Unknown action: ${action}`);
    }
  }

  private async handleApprovePlan(conversationHistory?: ConversationHistory): Promise<ChatResponse> {
    if (!conversationHistory?.planningResult) {
      throw new Error('No plan to approve');
    }

    console.log('üé® Starting bulk slide generation using Gemini 2.5 Flash...');
    console.log('üìã Lesson plan:', conversationHistory.planningResult.substring(0, 200) + '...');
    
    try {
      // === –ö–†–û–ö 1: –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –æ–ø–∏—Å–∏ —Å–ª–∞–π–¥—ñ–≤ –∑ –ø–ª–∞–Ω—É ===
      const slideDescriptions = this.extractAllSlideDescriptions(conversationHistory.planningResult);
      console.log(`üìÑ Extracted ${slideDescriptions.length} slide descriptions from plan`);

      // === –ö–†–û–ö 2: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —É—Ä–æ–∫ ===
      const lesson = {
        id: `lesson_${Date.now()}`,
        title: conversationHistory.lessonTopic || '–ù–æ–≤–∏–π —É—Ä–æ–∫',
        description: `–£—Ä–æ–∫ –ø—Ä–æ ${conversationHistory.lessonTopic} –¥–ª—è –¥—ñ—Ç–µ–π ${conversationHistory.lessonAge}`,
        subject: '–ó–∞–≥–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è',
        ageGroup: conversationHistory.lessonAge || '8-9 —Ä–æ–∫—ñ–≤',
        duration: 30,
        createdAt: new Date(),
        updatedAt: new Date(),
        authorId: 'ai-chat',
        slides: [] // –ü–æ–∫–∏ —â–æ –ø—É—Å—Ç–∏–π –º–∞—Å–∏–≤, —Å–ª–∞–π–¥–∏ –¥–æ–¥–∞—é—Ç—å—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—ñ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
      };

      // === –ö–†–û–ö 3: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—É ===
      const initialProgress: SlideGenerationProgress[] = slideDescriptions.map(desc => ({
        slideNumber: desc.slideNumber,
        title: desc.title,
        status: 'pending',
        progress: 0
      }));

      const newConversationHistory: ConversationHistory = {
        ...conversationHistory,
        step: 'bulk_generation',
        slideDescriptions,
        slideGenerationProgress: initialProgress,
        bulkGenerationStartTime: new Date(),
        isGeneratingAllSlides: true,
        currentLesson: lesson
      };

      // === –ö–†–û–ö 4: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó ===
      const initialMessage = `üé® **–†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –≤—Å—ñ—Ö —Å–ª–∞–π–¥—ñ–≤!**

üìä **–ü–ª–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:**
${slideDescriptions.map(desc => `${desc.slideNumber}. ${desc.title}`).join('\n')}

‚è≥ **–ü—Ä–æ–≥—Ä–µ—Å:** –ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è ${slideDescriptions.length} —Å–ª–∞–π–¥(—ñ–≤)...

–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω. –°–ª–∞–π–¥–∏ –∑'—è–≤–ª—è—Ç–∏–º—É—Ç—å—Å—è –≤ –ø—Ä–∞–≤—ñ–π –ø–∞–Ω–µ–ª—ñ –ø–æ –º—ñ—Ä—ñ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ.`;

      // === –ö–†–û–ö 5: –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —Å–ª–∞–π–¥—ñ–≤ ===
      this.generateAllSlidesAsync(
        slideDescriptions,
        conversationHistory.lessonTopic || '—É—Ä–æ–∫',
        conversationHistory.lessonAge || '6-8 —Ä–æ–∫—ñ–≤',
        lesson,
        conversationHistory,
        (slide) => {
          // –°–ª–∞–π–¥ –≤–∂–µ –¥–æ–¥–∞–Ω–æ –¥–æ —É—Ä–æ–∫—É –≤ generateAllSlidesAsync
          console.log(`‚úÖ Slide "${slide.title}" ready and added to lesson`);
          
          // TODO: –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ real-time –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ WebSocket
          console.log('üìä Current lesson slides count:', lesson.slides.length);
        }
      );

      return {
        success: true,
        message: initialMessage,
        conversationHistory: newConversationHistory,
        actions: [
          {
            action: 'cancel_generation',
            label: '‚èπÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é',
            description: '–ó—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—ñ–≤'
          }
        ],
        lesson: lesson
      };

    } catch (error) {
      console.error('‚ùå Error starting bulk slide generation:', error);
      
      return {
        success: false,
        message: `üòî –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.

**–ü–æ–º–∏–ª–∫–∞:** ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
        conversationHistory,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // === –ê–°–ò–ù–•–†–û–ù–ù–ê –ì–ï–ù–ï–†–ê–¶–Ü–Ø –í–°–Ü–• –°–õ–ê–ô–î–Ü–í (–ù–ï –ë–õ–û–ö–£–Ñ UI) ===
  private async generateAllSlidesAsync(
    slideDescriptions: SlideDescription[],
    lessonTopic: string,
    lessonAge: string,
    lesson: SimpleLesson,
    conversationHistory?: ConversationHistory,
    onSlideReady?: (slide: SimpleSlide) => void
  ): Promise<void> {
    try {
      console.log('üöÄ Starting SEQUENTIAL slide generation...');
      
      // –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—Å—ñ —Å–ª–∞–π–¥–∏ –ü–û–°–õ–Ü–î–û–í–ù–û
      const result = await this.generateAllSlides(
        slideDescriptions,
        lessonTopic,
        lessonAge,
        (progress) => {
          // –õ–æ–≥—ñ–∫–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—É
          console.log('üìä Sequential generation progress:', progress);
        }
      );

      // –î–æ–¥–∞—î–º–æ –≤—Å—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Å–ª–∞–π–¥–∏ –¥–æ —É—Ä–æ–∫—É
      for (const slide of result.slides) {
        lesson.slides.push(slide);
        lesson.updatedAt = new Date();
        
        console.log(`‚úÖ Slide "${slide.title}" ready and added to lesson`);
        
        // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è UI –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ª–∞–π–¥—É
        if (onSlideReady) {
          onSlideReady(slide);
        }
      }

      console.log(`üéâ SEQUENTIAL generation completed! ${result.completedSlides}/${result.totalSlides} slides generated`);
      
      if (result.failedSlides > 0) {
        console.warn(`‚ö†Ô∏è ${result.failedSlides} slides failed to generate`);
      }
      
    } catch (error) {
      console.error('‚ùå Error in sequential slide generation:', error);
      // TODO: –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É —á–µ—Ä–µ–∑ UI
    }
  }

  // === –î–û–î–ê–í–ê–ù–ù–Ø –û–ö–†–ï–ú–û–ì–û –°–õ–ê–ô–î–£ –î–û –Ü–°–ù–£–Æ–ß–û–ì–û –£–†–û–ö–£ ===
  private async handleCreateAdditionalSlide(
    conversationHistory?: ConversationHistory,
    intentResult?: any
  ): Promise<ChatResponse> {
    if (!conversationHistory?.currentLesson) {
      throw new Error('No lesson context for additional slide creation');
    }

    const currentLesson = conversationHistory.currentLesson;
    const nextSlideNumber = currentLesson.slides.length + 1;
    
    console.log(`üìÑ Creating additional slide ${nextSlideNumber} for lesson "${currentLesson.title}"`);
    
    try {
      // –í–∏—Ç—è–≥—É—î–º–æ –æ–ø–∏—Å–∏ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —ñ–Ω—Ç–µ–Ω—Ç—É –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π
      const slideTitle = intentResult?.parameters?.slideTitle || `–î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Å–ª–∞–π–¥ ${nextSlideNumber}`;
      const slideDescription = intentResult?.parameters?.slideDescription || 
        `–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –Ω–∞–≤—á–∞–ª—å–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª –¥–ª—è —É—Ä–æ–∫—É –ø—Ä–æ ${conversationHistory.lessonTopic}`;

      // –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∞–π–¥—É
      const slideHTML = await this.contentService.generateSlideContent(
        slideDescription,
        conversationHistory.lessonTopic || '—É—Ä–æ–∫',
        conversationHistory.lessonAge || '6-8 —Ä–æ–∫—ñ–≤'
      );

      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥
      const newSlide: SimpleSlide = {
        id: `slide_${Date.now()}_additional`,
        title: slideTitle,
        content: slideDescription,
        htmlContent: slideHTML,
        type: 'content',
        status: 'completed'
      };

      // –î–æ–¥–∞—î–º–æ –¥–æ —É—Ä–æ–∫—É
      const updatedLesson = {
        ...currentLesson,
        slides: [...currentLesson.slides, newSlide],
        updatedAt: new Date()
      };

      const newConversationHistory: ConversationHistory = {
        ...conversationHistory,
        currentLesson: updatedLesson
      };

      return {
        success: true,
        message: `‚úÖ **–ù–æ–≤–∏–π —Å–ª–∞–π–¥ –¥–æ–¥–∞–Ω–æ!**

–°–ª–∞–π–¥ "${slideTitle}" —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞ –¥–æ–¥–∞–Ω–æ –¥–æ —É—Ä–æ–∫—É. –¢–µ–ø–µ—Ä —É –≤–∞—à–æ–º—É —É—Ä–æ—Ü—ñ ${updatedLesson.slides.length} —Å–ª–∞–π–¥(—ñ–≤).

üéØ **–©–æ –¥–∞–ª—ñ?**
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥ —É –ø—Ä–∞–≤—ñ–π –ø–∞–Ω–µ–ª—ñ
‚Ä¢ –î–æ–¥–∞—Ç–∏ —â–µ –æ–¥–∏–Ω —Å–ª–∞–π–¥
‚Ä¢ –ó–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫`,
        conversationHistory: newConversationHistory,
        actions: [
          {
            action: 'create_slide',
            label: '‚ûï –î–æ–¥–∞—Ç–∏ —â–µ —Å–ª–∞–π–¥',
            description: '–°—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ –æ–¥–∏–Ω —Å–ª–∞–π–¥ –¥–ª—è —Ü—å–æ–≥–æ —É—Ä–æ–∫—É'
          },
          {
            action: 'save_lesson',
            label: 'üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫',
            description: '–ó–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫ –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏'
          }
        ],
        lesson: updatedLesson
      };

    } catch (error) {
      console.error('‚ùå Error creating additional slide:', error);
      
      return {
        success: false,
        message: `üòî –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ —Å–ª–∞–π–¥—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.

**–ü–æ–º–∏–ª–∫–∞:** ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
        conversationHistory,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private async handleEditPlanAction(conversationHistory?: ConversationHistory): Promise<ChatResponse> {
    if (!conversationHistory) {
      throw new Error('No conversation history for plan editing');
    }

    const newConversationHistory: ConversationHistory = {
      ...conversationHistory,
      step: 'plan_editing'
    };

    return {
      success: true,
      message: `–ù–∞–ø–∏—à—ñ—Ç—å —è–∫—ñ –∑–º—ñ–Ω–∏ —Ö–æ—á–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –¥–æ –ø–ª–∞–Ω—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
        
- "–î–æ–¥–∞–π —Å–ª–∞–π–¥ –ø—Ä–æ –ª—ñ—Ç–∞—é—á–∏—Ö –¥–∏–Ω–æ–∑–∞–≤—Ä—ñ–≤"
- "–ó–º—ñ–Ω–∏ –≤—ñ–∫ –¥—ñ—Ç–µ–π –Ω–∞ 8 —Ä–æ–∫—ñ–≤"  
- "–ó—Ä–æ–±–∏ —É—Ä–æ–∫ –∫–æ—Ä–æ—Ç—à–∏–º - 4 —Å–ª–∞–π–¥–∏"
- "–î–æ–¥–∞–π –±—ñ–ª—å—à–µ —ñ–≥–æ—Ä"`,
      conversationHistory: newConversationHistory,
      actions: []
    };
  }

  private async handleGenerateNextSlide(conversationHistory?: ConversationHistory): Promise<ChatResponse> {
    if (!conversationHistory || !conversationHistory.currentLesson) {
      throw new Error('No lesson context for next slide generation');
    }

    const currentSlideNumber = conversationHistory.currentSlideIndex || 1;
    const nextSlideNumber = currentSlideNumber + 1;
    
    if (nextSlideNumber > (conversationHistory.totalSlides || 6)) {
      return {
        success: true,
        message: `üéâ **–£—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**

–í—Å—ñ ${conversationHistory.totalSlides} —Å–ª–∞–π–¥—ñ–≤ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏!

üéØ **–î–æ—Å—Ç—É–ø–Ω—ñ –¥—ñ—ó:**
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ —Å–ª–∞–π–¥–∏ —É –ø—Ä–∞–≤—ñ–π –ø–∞–Ω–µ–ª—ñ
‚Ä¢ –ó–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫ –¥–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏
‚Ä¢ –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —É—Ä–æ–∫`,
        conversationHistory,
        actions: [
          {
            action: 'save_lesson',
            label: 'üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫',
            description: '–ó–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫ –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏'
          }
        ]
      };
    }

    console.log(`üé® Generating slide ${nextSlideNumber} using Gemini 2.5 Flash...`);
    
    try {
      // –í–∏—Ç—è–≥—É—î–º–æ –æ–ø–∏—Å —Å–ª–∞–π–¥—É –∑ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏
      const slideDescription = this.extractSlideDescription(
        conversationHistory.planningResult || '', 
        nextSlideNumber
      );
      
      console.log('üìù Slide description:', slideDescription.substring(0, 100) + '...');

      // –ì–µ–Ω–µ—Ä—É—î–º–æ HTML —Å–ª–∞–π–¥ —á–µ—Ä–µ–∑ Gemini 2.5 Flash
      const slideHTML = await this.contentService.generateSlideContent(
        slideDescription,
        conversationHistory.lessonTopic || '—É—Ä–æ–∫',
        conversationHistory.lessonAge || '6-8 —Ä–æ–∫—ñ–≤'
      );

      console.log('‚úÖ Slide HTML generated successfully, length:', slideHTML.length);

      // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ —É—Ä–æ–∫—É
      const updatedLesson = {
        ...conversationHistory.currentLesson,
        slides: [
          ...conversationHistory.currentLesson.slides,
          {
            id: `slide_${Date.now()}`,
            title: `${conversationHistory.lessonTopic} - –°–ª–∞–π–¥ ${nextSlideNumber}`,
            content: `–°–ª–∞–π–¥ ${nextSlideNumber} –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏`,
            htmlContent: slideHTML,
            type: 'content' as const,
            status: 'completed' as const
          }
        ]
      };

      const newConversationHistory: ConversationHistory = {
        ...conversationHistory,
        currentSlideIndex: nextSlideNumber,
        generatedSlides: [
          ...(conversationHistory.generatedSlides || []),
          { id: nextSlideNumber, html: slideHTML }
        ],
        currentLesson: updatedLesson
      };

      return {
        success: true,
        message: `‚úÖ **–°–ª–∞–π–¥ ${nextSlideNumber} –≥–æ—Ç–æ–≤–∏–π!** (${nextSlideNumber}/${conversationHistory.totalSlides})

–°–ª–∞–π–¥ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç–∞ –¥–æ–¥–∞–Ω–æ –¥–æ –ø—Ä–∞–≤–æ—ó –ø–∞–Ω–µ–ª—ñ.

üéØ **–©–æ –¥–∞–ª—ñ?**`,
        conversationHistory: newConversationHistory,
        actions: nextSlideNumber < (conversationHistory.totalSlides || 6) ? [
          {
            action: 'generate_next_slide',
            label: '‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥',
            description: `–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ª–∞–π–¥ ${nextSlideNumber + 1}/${conversationHistory.totalSlides}`
          },
          {
            action: 'regenerate_slide',
            label: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏',
            description: `–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Å–ª–∞–π–¥—É ${nextSlideNumber}`
          }
        ] : [
          {
            action: 'save_lesson',
            label: 'üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫',
            description: '–ó–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫ –¥–æ –æ—Å–æ–±–∏—Å—Ç–æ—ó –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏'
          }
        ],
        lesson: updatedLesson
      };
    } catch (error) {
      console.error('‚ùå Error generating next slide with Gemini 2.5 Flash:', error);
      
      return {
        success: false,
        message: `üòî –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—É ${nextSlideNumber}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.

**–ü–æ–º–∏–ª–∫–∞:** ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
        conversationHistory,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private async handleRegenerateSlide(conversationHistory?: ConversationHistory, intentResult?: any): Promise<ChatResponse> {
    if (!conversationHistory || !conversationHistory.currentLesson) {
      return {
        success: false,
        message: `‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó**

–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—ñ–≤. 

üîç **–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:**
‚Ä¢ –£—Ä–æ–∫ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π
‚Ä¢ –°–ª–∞–π–¥–∏ —â–µ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ

üí° **–†—ñ—à–µ–Ω–Ω—è:**
‚Ä¢ –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —É—Ä–æ–∫: "–°—Ç–≤–æ—Ä–∏ —É—Ä–æ–∫ –ø—Ä–æ [—Ç–µ–º–∞] –¥–ª—è –¥—ñ—Ç–µ–π [–≤—ñ–∫] —Ä–æ–∫—ñ–≤"
‚Ä¢ –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—ñ–≤
‚Ä¢ –ü–æ—Ç—ñ–º —Å–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ª–∞–π–¥–∏`,
        conversationHistory,
        error: 'No lesson context for slide regeneration'
      };
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–º–µ—Ä —Å–ª–∞–π–¥—É –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —ñ–Ω—Ç–µ–Ω—Ç—É, —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥
    const slideNumberToRegenerate = intentResult?.parameters?.slideNumber || conversationHistory.currentSlideIndex || 1;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Å–ª–∞–π–¥ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    if (slideNumberToRegenerate < 1 || slideNumberToRegenerate > conversationHistory.currentLesson.slides.length) {
      return {
        success: false,
        message: `‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó**

–°–ª–∞–π–¥ ${slideNumberToRegenerate} –Ω–µ —ñ—Å–Ω—É—î. –£ –ø–æ—Ç–æ—á–Ω–æ–º—É —É—Ä–æ—Ü—ñ —î —Ç—ñ–ª—å–∫–∏ ${conversationHistory.currentLesson.slides.length} —Å–ª–∞–π–¥(—ñ–≤).

–î–æ—Å—Ç—É–ø–Ω—ñ —Å–ª–∞–π–¥–∏: 1-${conversationHistory.currentLesson.slides.length}`,
        conversationHistory,
        error: `Slide ${slideNumberToRegenerate} does not exist`
      };
    }
    
    console.log(`üîÑ Regenerating slide ${slideNumberToRegenerate} using Gemini 2.5 Flash...`);
    
    try {
      // –í–∏—Ç—è–≥—É—î–º–æ –æ–ø–∏—Å —Å–ª–∞–π–¥—É –∑ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏
      const slideDescription = this.extractSlideDescription(
        conversationHistory.planningResult || '', 
        slideNumberToRegenerate
      );
      
      console.log('üìù Slide description for regeneration:', slideDescription.substring(0, 100) + '...');

      // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π HTML —Å–ª–∞–π–¥ —á–µ—Ä–µ–∑ Gemini 2.5 Flash
      const newSlideHTML = await this.contentService.generateSlideContent(
        `${slideDescription}. –°—Ç–≤–æ—Ä—ñ—Ç—å –ù–û–í–ò–ô –≤–∞—Ä—ñ–∞–Ω—Ç —Ü—å–æ–≥–æ —Å–ª–∞–π–¥—É –∑ —ñ–Ω—à–∏–º –¥–∏–∑–∞–π–Ω–æ–º —Ç–∞ –ø—ñ–¥—Ö–æ–¥–æ–º.`,
        conversationHistory.lessonTopic || '—É—Ä–æ–∫',
        conversationHistory.lessonAge || '6-8 —Ä–æ–∫—ñ–≤'
      );

      console.log('‚úÖ Slide HTML regenerated successfully, length:', newSlideHTML.length);

      // –ó–Ω–∞—Ö–æ–¥–∏–º–æ ID —Å–ª–∞–π–¥—É —è–∫–∏–π —Ç—Ä–µ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏
      const slideToUpdate = conversationHistory.currentLesson.slides[slideNumberToRegenerate - 1];
      const slideId = slideToUpdate.id;

      // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–∏ –º—ñ–∂ —Å—Ç–∞—Ä–∏–º —Ç–∞ –Ω–æ–≤–∏–º —Å–ª–∞–π–¥–æ–º
      const detectedChanges = this.analyzeSlideChanges(slideToUpdate, newSlideHTML, '–ü–æ–≤–Ω–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–ª–∞–π–¥—É');

      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥ (–ó–ê–ú–Ü–ù–Æ–Ñ–ú–û, –∞ –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π)
      const updatedLesson = {
        ...conversationHistory.currentLesson,
        slides: conversationHistory.currentLesson.slides.map((slide, index) => 
          index === slideNumberToRegenerate - 1 ? {
            ...slide,
            id: slideId, // –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û —Ç–æ–π –∂–µ ID!
            htmlContent: newSlideHTML,
            content: `–°–ª–∞–π–¥ ${slideNumberToRegenerate} –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏`,
            updatedAt: new Date()
          } : slide
        )
      };

      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–∫–æ–∂ generatedSlides –∑ —Ç–∏–º –∂–µ ID
      const newConversationHistory: ConversationHistory = {
        ...conversationHistory,
        generatedSlides: (conversationHistory.generatedSlides || []).map(slide => 
          slide.id === slideNumberToRegenerate ? { 
            ...slide, 
            id: slideNumberToRegenerate, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ numberic ID
            html: newSlideHTML 
          } : slide
        ),
        currentLesson: updatedLesson,
        currentSlideIndex: slideNumberToRegenerate // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ —Ä–µ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π —Å–ª–∞–π–¥
      };

      return {
        success: true,
        message: `üîÑ **–°–ª–∞–π–¥ ${slideNumberToRegenerate} –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!**

–ù–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Å–ª–∞–π–¥—É —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –®–Ü –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ —Ç–∞ **–∑–∞–º—ñ–Ω–µ–Ω–æ** –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ª–∞–π–¥ –≤ –ø—Ä–∞–≤—ñ–π –ø–∞–Ω–µ–ª—ñ.

üìã **–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –∑–º—ñ–Ω–∏:**
${detectedChanges.map((change: string) => `‚Ä¢ ${change}`).join('\n')}

üéØ **–¢–∏–ø –æ–ø–µ—Ä–∞—Ü—ñ—ó:** –ü–æ–≤–Ω–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–Ω—Ç–µ–Ω—Ç—É`,
        conversationHistory: newConversationHistory,
        actions: [
          {
            action: 'generate_next_slide',
            label: '‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥',
            description: `–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ª–∞–π–¥ ${slideNumberToRegenerate + 1}/${conversationHistory.totalSlides}`
          },
          {
            action: 'regenerate_slide',
            label: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑',
            description: `–°—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ –æ–¥–∏–Ω –≤–∞—Ä—ñ–∞–Ω—Ç —Å–ª–∞–π–¥—É ${slideNumberToRegenerate}`
          }
        ],
        lesson: updatedLesson
      };
    } catch (error) {
      console.error('‚ùå Error regenerating slide with Gemini 2.5 Flash:', error);
      
      return {
        success: false,
        message: `üòî –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—É ${slideNumberToRegenerate}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.

**–ü–æ–º–∏–ª–∫–∞:** ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
        conversationHistory,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private async handleEditSlide(conversationHistory?: ConversationHistory, intentResult?: any): Promise<ChatResponse> {
    if (!conversationHistory || !conversationHistory.currentLesson) {
      return {
        success: false,
        message: `‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è**

–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤. 

üîç **–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:**
‚Ä¢ –£—Ä–æ–∫ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π
‚Ä¢ –°–ª–∞–π–¥–∏ —â–µ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ

üí° **–†—ñ—à–µ–Ω–Ω—è:**
‚Ä¢ –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —É—Ä–æ–∫: "–°—Ç–≤–æ—Ä–∏ —É—Ä–æ–∫ –ø—Ä–æ [—Ç–µ–º–∞] –¥–ª—è –¥—ñ—Ç–µ–π [–≤—ñ–∫] —Ä–æ–∫—ñ–≤"
‚Ä¢ –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—ñ–≤
‚Ä¢ –ü–æ—Ç—ñ–º —Å–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ª–∞–π–¥–∏`,
        conversationHistory,
        error: 'No lesson context for slide editing'
      };
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–º–µ—Ä —Å–ª–∞–π–¥—É –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —ñ–Ω—Ç–µ–Ω—Ç—É, —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥
    const slideNumberToEdit = intentResult?.parameters?.slideNumber || conversationHistory.currentSlideIndex || 1;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Å–ª–∞–π–¥ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    if (slideNumberToEdit < 1 || slideNumberToEdit > conversationHistory.currentLesson.slides.length) {
      return {
        success: false,
        message: `‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è**

–°–ª–∞–π–¥ ${slideNumberToEdit} –Ω–µ —ñ—Å–Ω—É—î. –£ –ø–æ—Ç–æ—á–Ω–æ–º—É —É—Ä–æ—Ü—ñ —î —Ç—ñ–ª—å–∫–∏ ${conversationHistory.currentLesson.slides.length} —Å–ª–∞–π–¥(—ñ–≤).

–î–æ—Å—Ç—É–ø–Ω—ñ —Å–ª–∞–π–¥–∏: 1-${conversationHistory.currentLesson.slides.length}`,
        conversationHistory,
        error: `Slide ${slideNumberToEdit} does not exist`
      };
    }
    
          console.log(`üîß Performing simple edit on slide ${slideNumberToEdit}...`);
    
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥
      const currentSlide = conversationHistory.currentLesson.slides[slideNumberToEdit - 1];
      const editInstruction = intentResult?.parameters?.rawMessage || '–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–ª–∞–π–¥';
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ö—ñ–¥ - –Ω–∞–¥—Å–∏–ª–∞—î–º–æ HTML –¥–æ Gemini 2.5 Flash
      const editedSlideHTML = await this.simpleEditService.editSlide(
        currentSlide.htmlContent || currentSlide.content,
        editInstruction,
        conversationHistory.lessonTopic || '—É—Ä–æ–∫',
        conversationHistory.lessonAge || '6-8 —Ä–æ–∫—ñ–≤'
      );

      console.log('‚úÖ Simple slide edit completed, length:', editedSlideHTML.length);

      // –í–ê–ñ–õ–ò–í–û: –û–±—Ä–æ–±–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
      console.log('üé® Processing images after slide editing...');
      const imageProcessingResult: ProcessedSlideData = await processSlideWithImages(editedSlideHTML);
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTML –∑ –æ–±—Ä–æ–±–ª–µ–Ω–∏–º–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
      const finalSlideHTML = imageProcessingResult.htmlWithImages;
      
      // –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å
      if (imageProcessingResult.generatedImages.length > 0) {
        const successful = imageProcessingResult.generatedImages.filter(img => img.success).length;
        const failed = imageProcessingResult.generatedImages.length - successful;
        console.log(`üì∏ Image processing after edit: ${successful} successful, ${failed} failed`);
      }
      
      // –í–∏–≤–æ–¥–∏–º–æ –ø–æ–º–∏–ª–∫–∏ —è–∫—â–æ —î
      if (imageProcessingResult.processingErrors.length > 0) {
        console.warn('‚ö†Ô∏è Image processing errors after edit:', imageProcessingResult.processingErrors);
      }

      console.log('‚úÖ Final slide with images ready after edit, length:', finalSlideHTML.length);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å–ª–∞–π–¥—É —è–∫–∏–π —Ç—Ä–µ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏
      const slideId = currentSlide.id;

      // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–∏ –º—ñ–∂ —Å—Ç–∞—Ä–∏–º —Ç–∞ –Ω–æ–≤–∏–º —Å–ª–∞–π–¥–æ–º
      const analysisResult = this.simpleEditService.analyzeChanges(
        currentSlide.htmlContent || currentSlide.content,
        finalSlideHTML,
        editInstruction
      );
      const detectedChanges = analysisResult.detectedChanges;

      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥ (–ó–ê–ú–Ü–ù–Æ–Ñ–ú–û, –∞ –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π)
      const updatedLesson = {
        ...conversationHistory.currentLesson,
        slides: conversationHistory.currentLesson.slides.map((slide, index) => 
          index === slideNumberToEdit - 1 ? {
            ...slide,
            id: slideId, // –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û —Ç–æ–π –∂–µ ID!
            htmlContent: finalSlideHTML,
            content: `–°–ª–∞–π–¥ ${slideNumberToEdit} –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ: ${editInstruction}`,
            updatedAt: new Date()
          } : slide
        )
      };

      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–∫–æ–∂ generatedSlides –∑ —Ç–∏–º –∂–µ ID
      const newConversationHistory: ConversationHistory = {
        ...conversationHistory,
        generatedSlides: (conversationHistory.generatedSlides || []).map(slide => 
          slide.id === slideNumberToEdit ? { 
            ...slide, 
            id: slideNumberToEdit, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ numberic ID
            html: finalSlideHTML 
          } : slide
        ),
        currentLesson: updatedLesson,
        currentSlideIndex: slideNumberToEdit // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –Ω–∞ —Ä–µ–¥–∞–≥–æ–≤–∞–Ω–∏–π —Å–ª–∞–π–¥
      };

      return {
        success: true,
        message: `üîß **–°–ª–∞–π–¥ ${slideNumberToEdit} –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ!**

–°–ª–∞–π–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–æ—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é. –°–ª–∞–π–¥ **–∑–∞–º—ñ–Ω–µ–Ω–æ** –≤ –ø—Ä–∞–≤—ñ–π –ø–∞–Ω–µ–ª—ñ.

üìã **–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –∑–º—ñ–Ω–∏:**
${detectedChanges.map((change: string) => `‚Ä¢ ${change}`).join('\n')}

üéØ **–í–∞—à–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:** "${editInstruction}"

‚ú® **–ü—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ö—ñ–¥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:**
‚Ä¢ Claude –æ—Ç—Ä–∏–º—É—î –≤–µ—Å—å HTML —Å–ª–∞–π–¥—É
‚Ä¢ –í–∏–∫–æ–Ω—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
‚Ä¢ –ü–æ–≤–µ—Ä—Ç–∞—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ª–∞–π–¥`,
        conversationHistory: newConversationHistory,
        actions: [
          {
            action: 'regenerate_slide',
            label: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏',
            description: `–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Å–ª–∞–π–¥—É ${slideNumberToEdit}`
          },
          {
            action: 'generate_next_slide',
            label: '‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥',
            description: `–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ª–∞–π–¥ ${slideNumberToEdit + 1}/${conversationHistory.totalSlides}`
          }
        ],
        lesson: updatedLesson
      };
    } catch (error) {
      console.error('‚ùå Error with simple slide editing:', error);
      
      return {
        success: false,
        message: `üòî –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ —Å–ª–∞–π–¥—É ${slideNumberToEdit}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.

**–ü–æ–º–∏–ª–∫–∞:** ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
        conversationHistory,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private async handleImproveSlide(conversationHistory?: ConversationHistory, intentResult?: any): Promise<ChatResponse> {
    if (!conversationHistory || !conversationHistory.currentLesson) {
      return {
        success: false,
        message: `‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è**

–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤. 

üîç **–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:**
‚Ä¢ –£—Ä–æ–∫ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π
‚Ä¢ –°–ª–∞–π–¥–∏ —â–µ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ

üí° **–†—ñ—à–µ–Ω–Ω—è:**
‚Ä¢ –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —É—Ä–æ–∫: "–°—Ç–≤–æ—Ä–∏ —É—Ä–æ–∫ –ø—Ä–æ [—Ç–µ–º–∞] –¥–ª—è –¥—ñ—Ç–µ–π [–≤—ñ–∫] —Ä–æ–∫—ñ–≤"
‚Ä¢ –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—ñ–≤
‚Ä¢ –ü–æ—Ç—ñ–º —Å–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–ª–∞–π–¥–∏`,
        conversationHistory,
        error: 'No lesson context for slide improvement'
      };
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–º–µ—Ä —Å–ª–∞–π–¥—É –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —ñ–Ω—Ç–µ–Ω—Ç—É, —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥
    const slideNumberToImprove = intentResult?.parameters?.slideNumber || conversationHistory.currentSlideIndex || 1;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Å–ª–∞–π–¥ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    if (slideNumberToImprove < 1 || slideNumberToImprove > conversationHistory.currentLesson.slides.length) {
      return {
        success: false,
        message: `‚ùå **–ü–æ–º–∏–ª–∫–∞ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è**

–ü–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥ ${slideNumberToImprove} –Ω–µ —ñ—Å–Ω—É—î. –£ –ø–æ—Ç–æ—á–Ω–æ–º—É —É—Ä–æ—Ü—ñ —î —Ç—ñ–ª—å–∫–∏ ${conversationHistory.currentLesson.slides.length} —Å–ª–∞–π–¥(—ñ–≤).`,
        conversationHistory,
        error: `Current slide ${slideNumberToImprove} does not exist`
      };
    }
    
    console.log(`üé® Improving slide ${slideNumberToImprove} using Gemini 2.5 Flash...`);
    
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥
      const currentSlide = conversationHistory.currentLesson.slides[slideNumberToImprove - 1];
      const improvementInstruction = intentResult?.parameters?.rawMessage || '–ó—Ä–æ–±–∏—Ç–∏ —Å–ª–∞–π–¥ —è—Å–∫—Ä–∞–≤—ñ—à–∏–º —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—à–∏–º';
      
      // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π HTML —Å–ª–∞–π–¥ —á–µ—Ä–µ–∑ Gemini 2.5 Flash
      const improvedSlideHTML = await this.contentService.generateSlideContent(
        `–ü–æ–∫—Ä–∞—â–∏—Ç–∏ –¥–∏–∑–∞–π–Ω —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —ñ—Å–Ω—É—é—á–æ–≥–æ —Å–ª–∞–π–¥—É: "${improvementInstruction}". 
        
–ü–æ—Ç–æ—á–Ω–∏–π HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∞–π–¥—É –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è (–∑–±–µ—Ä–µ–≥—Ç–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –∑–º—ñ—Å—Ç, –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –¥–∏–∑–∞–π–Ω):
${currentSlide.htmlContent.substring(0, 1000)}...

–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–æ–∫—Ä–∞—â–µ–Ω—É –≤–µ—Ä—Å—ñ—é –∑ –∫—Ä–∞—â–∏–º –¥–∏–∑–∞–π–Ω–æ–º, –∞–Ω—ñ–º–∞—Ü—ñ—è–º–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é.`,
        conversationHistory.lessonTopic || '—É—Ä–æ–∫',
        conversationHistory.lessonAge || '6-8 —Ä–æ–∫—ñ–≤'
      );

      console.log('‚úÖ Slide HTML improved successfully, length:', improvedSlideHTML.length);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å–ª–∞–π–¥—É —è–∫–∏–π —Ç—Ä–µ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏
      const slideId = currentSlide.id;

      // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–∏ –º—ñ–∂ —Å—Ç–∞—Ä–∏–º —Ç–∞ –Ω–æ–≤–∏–º —Å–ª–∞–π–¥–æ–º
      const detectedChanges = this.analyzeSlideChanges(currentSlide, improvedSlideHTML, improvementInstruction);

      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥ (–ó–ê–ú–Ü–ù–Æ–Ñ–ú–û, –∞ –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π)
      const updatedLesson = {
        ...conversationHistory.currentLesson,
        slides: conversationHistory.currentLesson.slides.map((slide, index) => 
          index === slideNumberToImprove - 1 ? {
            ...slide,
            id: slideId, // –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û —Ç–æ–π –∂–µ ID!
            htmlContent: improvedSlideHTML,
            content: `–°–ª–∞–π–¥ ${slideNumberToImprove} –ø–æ–∫—Ä–∞—â–µ–Ω–æ: ${improvementInstruction}`,
            updatedAt: new Date()
          } : slide
        )
      };

      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–∫–æ–∂ generatedSlides –∑ —Ç–∏–º –∂–µ ID
      const newConversationHistory: ConversationHistory = {
        ...conversationHistory,
        generatedSlides: (conversationHistory.generatedSlides || []).map(slide => 
          slide.id === slideNumberToImprove ? { 
            ...slide, 
            id: slideNumberToImprove, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ numberic ID
            html: improvedSlideHTML 
          } : slide
        ),
        currentLesson: updatedLesson
      };

      return {
        success: true,
        message: `üé® **–°–ª–∞–π–¥ ${slideNumberToImprove} –ø–æ–∫—Ä–∞—â–µ–Ω–æ!**

–°–ª–∞–π–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ –∫—Ä–∞—â–∏–º –¥–∏–∑–∞–π–Ω–æ–º —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é, **–∑–∞–º—ñ–Ω–µ–Ω–æ** –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ª–∞–π–¥ –≤ –ø—Ä–∞–≤—ñ–π –ø–∞–Ω–µ–ª—ñ.

üìã **–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è:**
${detectedChanges.map(change => `‚Ä¢ ${change}`).join('\n')}

üéØ **–ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ:** "${improvementInstruction}"`,
        conversationHistory: newConversationHistory,
        actions: [
          {
            action: 'regenerate_slide',
            label: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏',
            description: `–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Å–ª–∞–π–¥—É ${slideNumberToImprove}`
          },
          {
            action: 'generate_next_slide',
            label: '‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥',
            description: `–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ª–∞–π–¥ ${slideNumberToImprove + 1}/${conversationHistory.totalSlides}`
          }
        ],
        lesson: updatedLesson
      };
    } catch (error) {
      console.error('‚ùå Error improving slide with Gemini 2.5 Flash:', error);
      
      return {
        success: false,
        message: `üòî –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—ñ —Å–ª–∞–π–¥—É ${slideNumberToImprove}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.

**–ü–æ–º–∏–ª–∫–∞:** ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
        conversationHistory,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private async handleInlineEditSlide(conversationHistory?: ConversationHistory, intentResult?: any): Promise<ChatResponse> {
    if (!conversationHistory || !conversationHistory.currentLesson) {
      return {
        success: false,
        message: `‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è**

–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤. 

üîç **–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:**
‚Ä¢ –£—Ä–æ–∫ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π
‚Ä¢ –°–ª–∞–π–¥–∏ —â–µ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ
‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏ –≤—Ç—Ä–∞—á–µ–Ω–æ

üí° **–†—ñ—à–µ–Ω–Ω—è:**
‚Ä¢ –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —É—Ä–æ–∫: "–°—Ç–≤–æ—Ä–∏ —É—Ä–æ–∫ –ø—Ä–æ [—Ç–µ–º–∞] –¥–ª—è –¥—ñ—Ç–µ–π [–≤—ñ–∫] —Ä–æ–∫—ñ–≤"
‚Ä¢ –î–æ—á–µ–∫–∞–π—Ç–µ—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—ñ–≤
‚Ä¢ –ü–æ—Ç—ñ–º —Å–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å–ª–∞–π–¥–∏`,
        conversationHistory,
        error: 'No lesson context for inline slide editing'
      };
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–º–µ—Ä —Å–ª–∞–π–¥—É –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —ñ–Ω—Ç–µ–Ω—Ç—É, —è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥
    const slideNumberToEdit = intentResult?.parameters?.slideNumber || conversationHistory.currentSlideIndex || 1;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Å–ª–∞–π–¥ –∑ —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
    if (slideNumberToEdit < 1 || slideNumberToEdit > conversationHistory.currentLesson.slides.length) {
      return {
        success: false,
        message: `‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è**

–°–ª–∞–π–¥ ${slideNumberToEdit} –Ω–µ —ñ—Å–Ω—É—î. –£ –ø–æ—Ç–æ—á–Ω–æ–º—É —É—Ä–æ—Ü—ñ —î —Ç—ñ–ª—å–∫–∏ ${conversationHistory.currentLesson.slides.length} —Å–ª–∞–π–¥(—ñ–≤).

–î–æ—Å—Ç—É–ø–Ω—ñ —Å–ª–∞–π–¥–∏: 1-${conversationHistory.currentLesson.slides.length}`,
        conversationHistory,
        error: `Slide ${slideNumberToEdit} does not exist`
      };
    }
    
          console.log(`üîß Performing simple inline edit on slide ${slideNumberToEdit}...`);
    
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥
      const currentSlide = conversationHistory.currentLesson.slides[slideNumberToEdit - 1];
      const editInstruction = intentResult?.parameters?.rawMessage || '';
      const targetText = intentResult?.parameters?.targetText || '';
      const newText = intentResult?.parameters?.newText || '';
      
      // –§–æ—Ä–º—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –¥–ª—è —Ç–æ—á–∫–æ–≤–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
      let finalInstruction = '';
      if (targetText && newText) {
        finalInstruction = `–ó–∞–º—ñ–Ω—ñ—Ç—å "${targetText}" –Ω–∞ "${newText}"`;
      } else {
        finalInstruction = editInstruction;
      }
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ö—ñ–¥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
      const editedSlideHTML = await this.simpleEditService.editSlide(
        currentSlide.htmlContent || currentSlide.content,
        finalInstruction,
        conversationHistory.lessonTopic || '—É—Ä–æ–∫',
        conversationHistory.lessonAge || '6-8 —Ä–æ–∫—ñ–≤'
      );

      console.log('‚úÖ Simple inline edit completed, length:', editedSlideHTML.length);

      // –í–ê–ñ–õ–ò–í–û: –û–±—Ä–æ–±–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è inline —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
      console.log('üé® Processing images after inline slide editing...');
      const imageProcessingResult: ProcessedSlideData = await processSlideWithImages(editedSlideHTML);
      
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ HTML –∑ –æ–±—Ä–æ–±–ª–µ–Ω–∏–º–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏
      const finalSlideHTML = imageProcessingResult.htmlWithImages;
      
      // –õ–æ–≥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å
      if (imageProcessingResult.generatedImages.length > 0) {
        const successful = imageProcessingResult.generatedImages.filter(img => img.success).length;
        const failed = imageProcessingResult.generatedImages.length - successful;
        console.log(`üì∏ Image processing after inline edit: ${successful} successful, ${failed} failed`);
      }
      
      // –í–∏–≤–æ–¥–∏–º–æ –ø–æ–º–∏–ª–∫–∏ —è–∫—â–æ —î
      if (imageProcessingResult.processingErrors.length > 0) {
        console.warn('‚ö†Ô∏è Image processing errors after inline edit:', imageProcessingResult.processingErrors);
      }

      console.log('‚úÖ Final slide with images ready after inline edit, length:', finalSlideHTML.length);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID —Å–ª–∞–π–¥—É —è–∫–∏–π —Ç—Ä–µ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏
      const slideId = currentSlide.id;

      // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–º—ñ–Ω–∏ –º—ñ–∂ —Å—Ç–∞—Ä–∏–º —Ç–∞ –Ω–æ–≤–∏–º —Å–ª–∞–π–¥–æ–º
      const analysisResult = this.simpleEditService.analyzeChanges(
        currentSlide.htmlContent || currentSlide.content,
        finalSlideHTML,
        finalInstruction
      );
      const detectedChanges = analysisResult.detectedChanges;

      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥ (–ó–ê–ú–Ü–ù–Æ–Ñ–ú–û, –∞ –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π)
      const updatedLesson = {
        ...conversationHistory.currentLesson,
        slides: conversationHistory.currentLesson.slides.map((slide, index) => 
          index === slideNumberToEdit - 1 ? {
            ...slide,
            id: slideId, // –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û —Ç–æ–π –∂–µ ID!
            htmlContent: finalSlideHTML,
            content: targetText && newText 
              ? `–°–ª–∞–π–¥ ${slideNumberToEdit}: –∑–∞–º—ñ–Ω–µ–Ω–æ "${targetText}" –Ω–∞ "${newText}"`
              : `–°–ª–∞–π–¥ ${slideNumberToEdit} –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ: ${editInstruction}`,
            updatedAt: new Date()
          } : slide
        )
      };

      // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–∫–æ–∂ generatedSlides –∑ —Ç–∏–º –∂–µ ID
      const newConversationHistory: ConversationHistory = {
        ...conversationHistory,
        generatedSlides: (conversationHistory.generatedSlides || []).map(slide => 
          slide.id === slideNumberToEdit ? { 
            ...slide, 
            id: slideNumberToEdit, // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ numberic ID
            html: finalSlideHTML 
          } : slide
        ),
        currentLesson: updatedLesson
      };

      const changeDescription = targetText && newText 
        ? `–ó–∞–º—ñ–Ω–µ–Ω–æ "${targetText}" –Ω–∞ "${newText}"`
        : editInstruction;

      return {
        success: true,
        message: `üîß **–°–ª–∞–π–¥ ${slideNumberToEdit} –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ!**

–°–ª–∞–π–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑–≥—ñ–¥–Ω–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é. –°–ª–∞–π–¥ **–∑–∞–º—ñ–Ω–µ–Ω–æ** –≤ –ø—Ä–∞–≤—ñ–π –ø–∞–Ω–µ–ª—ñ.

üìã **–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:**
${detectedChanges.map((change: string) => `‚Ä¢ ${change}`).join('\n')}

üéØ **–í–∞—à–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:** "${changeDescription}"

‚ú® **–ü—Ä–æ—Å—Ç–∏–π –ø—ñ–¥—Ö—ñ–¥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:**
‚Ä¢ Claude –æ—Ç—Ä–∏–º—É—î –≤–µ—Å—å HTML —Å–ª–∞–π–¥—É
‚Ä¢ –í–∏–∫–æ–Ω—É—î —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞  
‚Ä¢ –ü–æ–≤–µ—Ä—Ç–∞—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ª–∞–π–¥`,
        conversationHistory: newConversationHistory,
        actions: [
          {
            action: 'regenerate_slide',
            label: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏',
            description: `–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Å–ª–∞–π–¥—É ${slideNumberToEdit}`
          },
          {
            action: 'generate_next_slide',
            label: '‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥',
            description: `–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ª–∞–π–¥ ${slideNumberToEdit + 1}/${conversationHistory.totalSlides}`
          }
        ],
        lesson: updatedLesson
      };
    } catch (error) {
      console.error('‚ùå Error simple inline editing slide:', error);
      
      return {
        success: false,
        message: `üòî –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ —Å–ª–∞–π–¥—É ${slideNumberToEdit}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.

**–ü–æ–º–∏–ª–∫–∞:** ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
        conversationHistory,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤ –Ω–∞ —ñ—Å–Ω—É—é—á—ñ
  private tryMapUnknownIntent(intentResult: any): any | null {
    // –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –ø—Ä—è–º–∏–π –º–∞–ø—ñ–Ω–≥ (—à–≤–∏–¥–∫–æ)
    const directMappings: { [key: string]: string } = {
      'generate_plan': 'create_lesson',
      'create_plan': 'create_lesson',
      'make_lesson': 'create_lesson',
      'edit_lesson': 'edit_plan',
      'modify_plan': 'edit_plan',
      'update_plan': 'edit_plan',
      'general_chat': 'free_chat',
      'greeting': 'free_chat'
    };

    const directMatch = directMappings[intentResult.intent];
    if (directMatch) {
      console.log(`üéØ Direct mapping: ${intentResult.intent} ‚Üí ${directMatch}`);
      return {
        ...intentResult,
        intent: directMatch,
        reasoning: `Direct mapping from ${intentResult.intent} to ${directMatch}`
      };
    }

    // –Ø–∫—â–æ –ø—Ä—è–º–æ–≥–æ –º–∞–ø—ñ–Ω–≥—É –Ω–µ–º–∞—î, –∞–Ω–∞–ª—ñ–∑—É—î–º–æ —Å—Ö–æ–∂—ñ—Å—Ç—å –∑ –¥–æ—Å—Ç—É–ø–Ω–∏–º–∏ —ñ–Ω—Ç–µ–Ω—Ç–∞–º–∏
    const availableIntents = [
      'create_lesson',
      'edit_plan', 
      'create_slide',
      'create_new_slide',
      'regenerate_slide',
      'edit_html_inline',
      'edit_slide',
      'improve_html',
      'free_chat',
      'help',
      'export',
      'preview'
    ];

         const bestMatch = this.findBestIntentMatch(intentResult.intent, availableIntents, intentResult.parameters);
     
     if (bestMatch) {
       console.log(`üß† Smart mapping: ${intentResult.intent} ‚Üí ${bestMatch.intent} (confidence: ${bestMatch.confidence})`);
       return {
         ...intentResult,
         intent: bestMatch.intent,
         reasoning: `Smart mapping from ${intentResult.intent} to ${bestMatch.intent} (${bestMatch.reason})`
       };
     }

    return null;
  }

  // –†–æ–∑—É–º–Ω–∏–π –ø–æ—à—É–∫ –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–∫–∞ —Å–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —ñ–Ω—Ç–µ–Ω—Ç—ñ–≤
  private findBestIntentMatch(unknownIntent: string, availableIntents: string[], parameters: any): { intent: string; confidence: number; reason: string } | null {
    const scores: Array<{ intent: string; score: number; reason: string }> = [];

    for (const availableIntent of availableIntents) {
      let score = 0;
      let reasons: string[] = [];

      // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ö–æ–∂—ñ—Å—Ç—å –≤ –Ω–∞–∑–≤–∞—Ö
      const similarity = this.calculateStringSimilarity(unknownIntent, availableIntent);
      if (similarity > 0.3) {
        score += similarity * 40;
        reasons.push(`name similarity: ${(similarity * 100).toFixed(1)}%`);
      }

      // 2. –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
      const unknownWords = unknownIntent.toLowerCase().split('_');
      const availableWords = availableIntent.toLowerCase().split('_');
      
      for (const word of unknownWords) {
        if (availableWords.includes(word)) {
          score += 20;
          reasons.push(`keyword match: "${word}"`);
        }
      }

             // 3. –°–µ–º–∞–Ω—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –±–∞–∑—É—î—Ç—å—Å—è –Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
       if (parameters) {
         // –Ø–∫—â–æ —î —Ç–µ–º–∞ –∞–±–æ –≤—ñ–∫ - —Å—Ö–æ–∂–µ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫—É
         if ((parameters.topic || parameters.age) && availableIntent === 'create_lesson') {
           score += 30;
           reasons.push('has lesson parameters');
         }
         
         // –Ø–∫—â–æ —î slideNumber - —Å—Ö–æ–∂–µ –Ω–∞ —Ä–æ–±–æ—Ç—É –∑—ñ —Å–ª–∞–π–¥–∞–º–∏
         if (parameters.slideNumber && availableIntent.includes('slide')) {
           score += 25;
           reasons.push('has slide number');
         }
         
         // –Ø–∫—â–æ –∑–≥–∞–¥—É—î—Ç—å—Å—è –ø–ª–∞–Ω - —Å—Ö–æ–∂–µ –Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É
         if (unknownIntent.includes('plan') && availableIntent === 'edit_plan') {
           score += 35;
           reasons.push('plan-related');
         }
       }

       // 4. –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ - —á–∏ —î –ø–æ—Ç–æ—á–Ω–∏–π —É—Ä–æ–∫
       if (this.hasActiveLessonContext()) {
         // –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∏–π —É—Ä–æ–∫ —ñ –∑–≥–∞–¥—É—î—Ç—å—Å—è —Å–ª–∞–π–¥ - —Ü–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–ª–∞–π–¥—É
         if ((unknownIntent.includes('—Å–ª–∞–π–¥') || unknownIntent.includes('slide')) && 
             availableIntent === 'create_new_slide') {
           score += 40;
           reasons.push('active lesson context + slide mention');
         }
         
         // –°–ª–æ–≤–∞ —Ç–∏–ø—É "–Ω–∞—Å—Ç—É–ø–Ω–∏–π", "—Ç—Ä–µ—Ç—ñ–π", "–¥–∞–ª—ñ" –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ —É—Ä–æ–∫—É
         if ((unknownIntent.includes('–Ω–∞—Å—Ç—É–ø–Ω') || unknownIntent.includes('—Ç—Ä–µ—Ç—ñ–π') || 
              unknownIntent.includes('–¥–∞–ª—ñ') || unknownIntent.includes('–¥–∞–≤–∞–π') ||
              unknownIntent.includes('next') || unknownIntent.includes('third')) && 
             availableIntent === 'create_new_slide') {
           score += 35;
           reasons.push('continuation words + lesson context');
         }
       }

      // 4. –ó–∞–≥–∞–ª—å–Ω—ñ —à–∞–±–ª–æ–Ω–∏
      if (unknownIntent.includes('create') || unknownIntent.includes('generate')) {
        if (availableIntent === 'create_lesson' || availableIntent === 'create_slide') {
          score += 15;
          reasons.push('creation intent');
        }
      }

      if (unknownIntent.includes('edit') || unknownIntent.includes('modify') || unknownIntent.includes('update')) {
        if (availableIntent.includes('edit') || availableIntent === 'edit_plan') {
          score += 15;
          reasons.push('modification intent');
        }
      }

      if (score > 0) {
        scores.push({
          intent: availableIntent,
          score,
          reason: reasons.join(', ')
        });
      }
    }

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    scores.sort((a, b) => b.score - a.score);
    
    if (scores.length > 0 && scores[0].score >= 30) { // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø–æ—Ä—ñ–≥
      return {
        intent: scores[0].intent,
        confidence: Math.min(scores[0].score / 100, 0.8), // –ú–∞–∫—Å–∏–º—É–º 0.8 –¥–ª—è –º–∞–ø—ñ–Ω–≥—É
        reason: scores[0].reason
      };
    }

    return null;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —É—Ä–æ–∫ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
  private hasActiveLessonContext(): boolean {
    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É –∞–±–æ —Å–µ—Å—ñ—ó
    // –ù–∞—Ä–∞–∑—ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ true, —è–∫—â–æ –º–µ—Ç–æ–¥ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    // –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É –º–æ–∂–Ω–∞ –±—É–¥–µ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–µ—Ä–µ–∑ localStorage –∞–±–æ —Å—Ç–∞–Ω –ø—Ä–æ–≥—Ä–∞–º–∏
    return true; // –°–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ - –ø–æ—Ç—Ä–µ–±—É—î –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
  }

  // –ü—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞ –¥–ª—è —Å—Ö–æ–∂–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤
  private calculateStringSimilarity(str1: string, str2: string): number {
    const len1 = str1.length;
    const len2 = str2.length;
    
    if (len1 === 0) return len2 === 0 ? 1 : 0;
    if (len2 === 0) return 0;

    const matrix = Array(len2 + 1).fill(null).map(() => Array(len1 + 1).fill(null));

    for (let i = 0; i <= len1; i++) matrix[0][i] = i;
    for (let j = 0; j <= len2; j++) matrix[j][0] = j;

    for (let j = 1; j <= len2; j++) {
      for (let i = 1; i <= len1; i++) {
        const substitutionCost = str1[i - 1] === str2[j - 1] ? 0 : 1;
        matrix[j][i] = Math.min(
          matrix[j][i - 1] + 1, // insertion
          matrix[j - 1][i] + 1, // deletion
          matrix[j - 1][i - 1] + substitutionCost // substitution
        );
      }
    }

    const maxLen = Math.max(len1, len2);
    return (maxLen - matrix[len2][len1]) / maxLen;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó fallback –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  private generateFallbackResponse(intentResult: any, conversationHistory?: ConversationHistory): ChatResponse {
    const language = intentResult.language || 'uk';
    
    let message = '';
    if (language === 'uk') {
      message = `ü§î –Ø –ø–æ–∫–∏ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —è–∫ —Å–∞–º–µ –≤–∞–º –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —Ü–∏–º –∑–∞–ø–∏—Ç–æ–º.

**–û—Å—å —â–æ —è –º–æ–∂—É –∑—Ä–æ–±–∏—Ç–∏:**
‚Ä¢ üìö –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —É—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "—Å—Ç–≤–æ—Ä–∏ —É—Ä–æ–∫ –ø—Ä–æ –¥–∏–Ω–æ–∑–∞–≤—Ä—ñ–≤ –¥–ª—è –¥—ñ—Ç–µ–π 6 —Ä–æ–∫—ñ–≤")
‚Ä¢ üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –ø–ª–∞–Ω —É—Ä–æ–∫—É
‚Ä¢ üé® –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ —Å–ª–∞–π–¥–∏ –¥–æ —É—Ä–æ–∫—É
‚Ä¢ ‚ùì –ù–∞–¥–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É –∑ –∫–æ–º–∞–Ω–¥–∞–º–∏

**–°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –≤–∞—à –∑–∞–ø–∏—Ç –±—ñ–ª—å—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ.**`;
    } else {
      message = `ü§î I'm not sure how to help you with this request yet.

**Here's what I can do:**
‚Ä¢ üìö Create a new lesson (e.g., "create a lesson about dinosaurs for 6-year-olds")
‚Ä¢ üìù Edit existing lesson plans
‚Ä¢ üé® Add new slides to lessons
‚Ä¢ ‚ùì Provide help with commands

**Try rephrasing your request more specifically.**`;
    }

    return {
      success: true,
      message,
      conversationHistory,
      actions: [
        {
          action: 'help',
          label: '‚ùì –î–æ–ø–æ–º–æ–≥–∞',
          description: '–ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏'
        }
      ]
    };
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∑–º—ñ–Ω —É —Å–ª–∞–π–¥—ñ
  private analyzeSlideChanges(oldSlide: any, newSlideHTML: string, editInstruction: string): string[] {
    const changes: string[] = [];
    
    try {
      // –ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å
      const oldImages = (oldSlide.htmlContent.match(/<img[^>]*>/g) || []).length;
      const newImages = (newSlideHTML.match(/<img[^>]*>/g) || []).length;
      
      if (newImages > oldImages) {
        changes.push(`‚ûï –î–æ–¥–∞–Ω–æ ${newImages - oldImages} –Ω–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å`);
      } else if (newImages < oldImages) {
        changes.push(`‚ûñ –í–∏–¥–∞–ª–µ–Ω–æ ${oldImages - newImages} –∑–æ–±—Ä–∞–∂–µ–Ω—å`);
      } else if (newImages > 0 && oldImages > 0) {
        changes.push(`üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ ${newImages} –∑–æ–±—Ä–∞–∂–µ–Ω—å`);
      }
      
      // –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É
      const oldTextLength = oldSlide.htmlContent.replace(/<[^>]*>/g, '').trim().length;
      const newTextLength = newSlideHTML.replace(/<[^>]*>/g, '').trim().length;
      
      if (newTextLength > oldTextLength * 1.2) {
        changes.push(`üìù –ó–Ω–∞—á–Ω–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (+${Math.round((newTextLength - oldTextLength) / oldTextLength * 100)}%)`);
      } else if (newTextLength < oldTextLength * 0.8) {
        changes.push(`‚úÇÔ∏è –°–∫–æ—Ä–æ—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (-${Math.round((oldTextLength - newTextLength) / oldTextLength * 100)}%)`);
      } else if (Math.abs(newTextLength - oldTextLength) > 50) {
        changes.push(`üìù –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç`);
      }
      
      // –ê–Ω–∞–ª—ñ–∑ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
      const oldButtons = (oldSlide.htmlContent.match(/<button[^>]*>/g) || []).length;
      const newButtons = (newSlideHTML.match(/<button[^>]*>/g) || []).length;
      
      if (newButtons > oldButtons) {
        changes.push(`üéÆ –î–æ–¥–∞–Ω–æ ${newButtons - oldButtons} —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫`);
      } else if (newButtons < oldButtons) {
        changes.push(`üéÆ –í–∏–¥–∞–ª–µ–Ω–æ ${oldButtons - newButtons} —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫`);
      }
      
      // –ê–Ω–∞–ª—ñ–∑ –∞–Ω—ñ–º–∞—Ü—ñ–π —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥—ñ–≤
      const hasNewAnimations = newSlideHTML.includes('animation') || newSlideHTML.includes('transition') || newSlideHTML.includes('@keyframes');
      const hadOldAnimations = oldSlide.htmlContent.includes('animation') || oldSlide.htmlContent.includes('transition') || oldSlide.htmlContent.includes('@keyframes');
      
      if (hasNewAnimations && !hadOldAnimations) {
        changes.push(`‚ú® –î–æ–¥–∞–Ω–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ç–∞ –ø–ª–∞–≤–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏`);
      } else if (!hasNewAnimations && hadOldAnimations) {
        changes.push(`üîá –í–∏–¥–∞–ª–µ–Ω–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó`);
      } else if (hasNewAnimations && hadOldAnimations) {
        changes.push(`‚ú® –û–Ω–æ–≤–ª–µ–Ω–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ç–∞ –µ—Ñ–µ–∫—Ç–∏`);
      }
      
      // –ê–Ω–∞–ª—ñ–∑ –∫–æ–ª—å–æ—Ä–æ–≤–æ—ó —Å—Ö–µ–º–∏
      const oldColorMatches = oldSlide.htmlContent.match(/(background-color|color)\s*:\s*[^;]+/g) || [];
      const newColorMatches = newSlideHTML.match(/(background-color|color)\s*:\s*[^;]+/g) || [];
      
      if (newColorMatches.length > oldColorMatches.length) {
        changes.push(`üé® –ü–æ–∫—Ä–∞—â–µ–Ω–æ –∫–æ–ª—å–æ—Ä–æ–≤—É —Å—Ö–µ–º—É (–¥–æ–¥–∞–Ω–æ –∫–æ–ª—å–æ—Ä–∏)`);
      } else if (newColorMatches.length !== oldColorMatches.length) {
        changes.push(`üé® –ó–º—ñ–Ω–µ–Ω–æ –∫–æ–ª—å–æ—Ä–æ–≤—É –ø–∞–ª—ñ—Ç—Ä—É`);
      }
      
      // –ê–Ω–∞–ª—ñ–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ HTML
      const oldElements = (oldSlide.htmlContent.match(/<\w+[^>]*>/g) || []).length;
      const newElements = (newSlideHTML.match(/<\w+[^>]*>/g) || []).length;
      
      if (newElements > oldElements * 1.3) {
        changes.push(`üèóÔ∏è –ó–Ω–∞—á–Ω–æ —É—Å–∫–ª–∞–¥–Ω–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ª–∞–π–¥—É`);
      } else if (newElements < oldElements * 0.7) {
        changes.push(`üßπ –°–ø—Ä–æ—â–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–ª–∞–π–¥—É`);
      }
      
      // –ê–Ω–∞–ª—ñ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const instruction = editInstruction.toLowerCase();
      
      if (instruction.includes('–∫–∞—Ä—Ç–∏–Ω–∫') || instruction.includes('–∑–æ–±—Ä–∞–∂–µ–Ω') || instruction.includes('—Ñ–æ—Ç–æ')) {
        if (!changes.some(c => c.includes('–∑–æ–±—Ä–∞–∂–µ–Ω—å'))) {
          changes.push(`üñºÔ∏è –û–Ω–æ–≤–ª–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–æ—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é`);
        }
      }
      
      if (instruction.includes('–∫–æ–ª—ñ—Ä') || instruction.includes('—è—Å–∫—Ä–∞–≤') || instruction.includes('–±–∞—Ä–≤')) {
        if (!changes.some(c => c.includes('–∫–æ–ª—å–æ—Ä'))) {
          changes.push(`üåà –ó–º—ñ–Ω–µ–Ω–æ –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è –±—ñ–ª—å—à–æ—ó —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ`);
        }
      }
      
      if (instruction.includes('—Ç–µ–∫—Å—Ç') || instruction.includes('–Ω–∞–ø–∏—Å') || instruction.includes('—Å–ª–æ–≤')) {
        if (!changes.some(c => c.includes('—Ç–µ–∫—Å—Ç'))) {
          changes.push(`üìù –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç`);
        }
      }
      
      if (instruction.includes('—Ä–æ–∑–º—ñ—Ä') || instruction.includes('–±—ñ–ª—å—à') || instruction.includes('–º–µ–Ω—à')) {
        changes.push(`üìè –ó–º—ñ–Ω–µ–Ω–æ —Ä–æ–∑–º—ñ—Ä–∏ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤`);
      }
      
      if (instruction.includes('–∞–Ω—ñ–º–∞—Ü') || instruction.includes('—Ä—É—Ö') || instruction.includes('–µ—Ñ–µ–∫—Ç')) {
        if (!changes.some(c => c.includes('–∞–Ω—ñ–º–∞—Ü—ñ—ó'))) {
          changes.push(`‚ú® –î–æ–¥–∞–Ω–æ –∞–Ω—ñ–º–∞—Ü—ñ–π–Ω—ñ –µ—Ñ–µ–∫—Ç–∏`);
        }
      }
      
      // –Ø–∫—â–æ –∂–æ–¥–Ω–∏—Ö –∑–º—ñ–Ω –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏
      if (changes.length === 0) {
        changes.push(`üîÑ –ü–æ–≤–Ω—ñ—Å—Ç—é –æ–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∞–π–¥—É`);
        changes.push(`üìã –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –≤–∞—à—É —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é: "${editInstruction}"`);
      }
      
    } catch (error) {
      console.warn('Error analyzing slide changes:', error);
      changes.push(`üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–∞–π–¥ –∑–≥—ñ–¥–Ω–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é`);
    }
    
    return changes;
  }

  private extractSlideDescription(planningResult: string, slideNumber: number): string {
    try {
      // –®—É–∫–∞—î–º–æ —Å–ª–∞–π–¥ –∑–∞ –Ω–æ–º–µ—Ä–æ–º –≤ –ø–ª–∞–Ω—ñ —É—Ä–æ–∫—É
      const slidePatterns = [
        new RegExp(`##\\s*–°–ª–∞–π–¥\\s+${slideNumber}[\\s\\S]*?(?=##\\s*–°–ª–∞–π–¥\\s+|$)`, 'i'),
        new RegExp(`\\*\\*–°–ª–∞–π–¥\\s+${slideNumber}[\\s\\S]*?(?=\\*\\*–°–ª–∞–π–¥\\s+|$)`, 'i'),
        new RegExp(`${slideNumber}\\.[\\s\\S]*?(?=\\d+\\.|$)`, 'i')
      ];

      for (const pattern of slidePatterns) {
        const match = planningResult.match(pattern);
        if (match) {
          let description = match[0].trim();
          // –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
          description = description.replace(/^##\s*/, '').replace(/^\*\*/, '').replace(/\*\*$/, '');
          description = description.replace(/^\d+\.\s*/, '');
          
          if (description.length > 50) {
            return description;
          }
        }
      }

      // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Å–ª–∞–π–¥, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å
      const lines = planningResult.split('\n');
      const relevantLines = lines.slice(0, 10).join(' ');
      
      return `–°—Ç–≤–æ—Ä—ñ—Ç—å –≤—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥ –¥–ª—è —É—Ä–æ–∫—É. ${relevantLines.substring(0, 200)}`;
    } catch (error) {
      console.warn('Error extracting slide description:', error);
      return `–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–ª–∞–π–¥ ${slideNumber} –¥–ª—è —Ü—å–æ–≥–æ —É—Ä–æ–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–≤—á–∞–ª—å–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏.`;
    }
  }

  // === –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ú–ê–°–û–í–û–á –ì–ï–ù–ï–†–ê–¶–Ü–á –°–õ–ê–ô–î–Ü–í ===
  private extractAllSlideDescriptions(planningResult: string): SlideDescription[] {
    console.log('üîç Extracting all slide descriptions from lesson plan...');
    
    try {
      const slideDescriptions: SlideDescription[] = [];
      
      // –®—É–∫–∞—î–º–æ –≤—Å—ñ —Å–ª–∞–π–¥–∏ –≤ –ø–ª–∞–Ω—ñ –æ–¥—Ä–∞–∑—É
      const slidePatterns = [
        /###\s*–°–ª–∞–π–¥\s+(\d+):\s*([^\n]+)[^#]*?(?=###\s*–°–ª–∞–π–¥\s+|\s*##|\s*$)/gi, // ### –°–ª–∞–π–¥ 1: –ù–∞–∑–≤–∞ (–Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç)
        /##\s*–°–ª–∞–π–¥\s+(\d+)[^#]*?(?=##\s*–°–ª–∞–π–¥\s+|\s*$)/gi, // ## –°–ª–∞–π–¥ 1, ## –°–ª–∞–π–¥ 2, —Ç–æ—â–æ
        /\*\*–°–ª–∞–π–¥\s+(\d+)[^*]*?(?=\*\*–°–ª–∞–π–¥\s+|\s*$)/gi, // **–°–ª–∞–π–¥ 1**, **–°–ª–∞–π–¥ 2**, —Ç–æ—â–æ
        /(\d+)\.\s*[^0-9]*?(?=\d+\.\s*|\s*$)/gi // 1. –¢–µ–∫—Å—Ç, 2. –¢–µ–∫—Å—Ç, —Ç–æ—â–æ
      ];

      // –ü—Ä–æ–±—É—î–º–æ –∫–æ–∂–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω
      for (const pattern of slidePatterns) {
        const matches = [...planningResult.matchAll(pattern)];
        
        if (matches.length > 0) {
          console.log(`üìÑ Found ${matches.length} slides using pattern:`, pattern.source);
          
          for (const match of matches) {
            const slideNumber = parseInt(match[1]);
            if (slideNumber && !slideDescriptions.find(s => s.slideNumber === slideNumber)) {
              let description = match[0].trim();
              let title = `–°–ª–∞–π–¥ ${slideNumber}`;
              
              // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –Ω–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç –∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø—ñ—Å–ª—è –¥–≤–æ–∫—Ä–∞–ø–∫–∏
              if (match[2]) {
                // –ù–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç: ### –°–ª–∞–π–¥ 1: –ó–∞–≥–æ–ª–æ–≤–æ–∫
                title = match[2].trim();
                description = description
                  .replace(/^###\s*–°–ª–∞–π–¥\s+\d+:\s*[^\n]+/i, '')
                  .trim();
              } else {
                // –°—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç - –æ—á–∏—â–∞—î–º–æ –≤—ñ–¥ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
                description = description
                  .replace(/^##\s*–°–ª–∞–π–¥\s+\d+[:\s]*/i, '')
                  .replace(/^\*\*–°–ª–∞–π–¥\s+\d+[:\s]*/i, '')
                  .replace(/^\d+\.\s*/, '')
                  .replace(/\*\*$/, '')
                  .trim();

                // –í–∏—Ç—è–≥—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥—É (–ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫)
                const lines = description.split('\n').filter(line => line.trim());
                title = lines[0]?.replace(/^\*\*/, '').replace(/\*\*$/, '').trim() || `–°–ª–∞–π–¥ ${slideNumber}`;
              }
              
              // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø —Å–ª–∞–π–¥—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç—É
              const type = this.determineSlideType(title, description, slideNumber);
              
              if (description.length > 20) {
                slideDescriptions.push({
                  slideNumber,
                  title,
                  description,
                  type
                });
              }
            }
          }
          
          // –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —Å–ª–∞–π–¥–∏ —Ü–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º, –Ω–µ –ø—Ä–æ–±—É—î–º–æ —ñ–Ω—à—ñ
          if (slideDescriptions.length > 0) break;
        }
      }

      // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏—Ö —Å–ª–∞–π–¥—ñ–≤, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–ª–∞–Ω—É
      if (slideDescriptions.length === 0) {
        console.log('üìÑ No structured slides found, creating default structure...');
        
        const defaultSlides = this.createDefaultSlideStructure(planningResult);
        slideDescriptions.push(...defaultSlides);
      }

      // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ª–∞–π–¥—É
      slideDescriptions.sort((a, b) => a.slideNumber - b.slideNumber);
      
      console.log(`‚úÖ Extracted ${slideDescriptions.length} slide descriptions:`, 
        slideDescriptions.map(s => `${s.slideNumber}. ${s.title}`));
      
      return slideDescriptions;
      
    } catch (error) {
      console.error('‚ùå Error extracting all slide descriptions:', error);
      
      // Fallback: —Å—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      return this.createDefaultSlideStructure(planningResult);
    }
  }

  // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É —Å–ª–∞–π–¥—É
  private determineSlideType(title: string, description: string, slideNumber: number): 'welcome' | 'content' | 'activity' | 'summary' {
    const titleLower = title.toLowerCase();
    const descLower = description.toLowerCase();
    
    // –ü–µ—Ä—à–∏–π —Å–ª–∞–π–¥ –∑–∞–∑–≤–∏—á–∞–π –≤—ñ—Ç–∞–ª—å–Ω–∏–π
    if (slideNumber === 1 || titleLower.includes('–≤—ñ—Ç–∞–Ω–Ω—è') || titleLower.includes('–∑–Ω–∞–π–æ–º—Å—Ç–≤–æ') || titleLower.includes('–≤—Å—Ç—É–ø')) {
      return 'welcome';
    }
    
    // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    if (titleLower.includes('–∑–∞–≤–¥–∞–Ω–Ω—è') || titleLower.includes('–≥—Ä–∞') || titleLower.includes('–ø—Ä–∞–∫—Ç–∏–∫–∞') || 
        descLower.includes('–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å') || descLower.includes('–≤–ø—Ä–∞–≤–∞')) {
      return 'activity';
    }
    
    // –ü—ñ–¥—Å—É–º–æ–∫
    if (titleLower.includes('–ø—ñ–¥—Å—É–º–æ–∫') || titleLower.includes('–≤–∏—Å–Ω–æ–≤–æ–∫') || titleLower.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç')) {
      return 'summary';
    }
    
    // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –∫–æ–Ω—Ç–µ–Ω—Ç
    return 'content';
  }

     // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Å–ª–∞–π–¥—ñ–≤
  private createDefaultSlideStructure(planningResult: string): SlideDescription[] {
    const lines = planningResult.split('\n').filter(line => line.trim());
    const firstLines = lines.slice(0, 5).join(' ').substring(0, 300);
    
    return [
      {
        slideNumber: 1,
        title: '–í—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑ —Ç–µ–º–æ—é',
        description: `–í—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥ –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞ –∑ —Ç–µ–º–æ—é —É—Ä–æ–∫—É. ${firstLines}`,
        type: 'welcome'
      },
      {
        slideNumber: 2,
        title: '–û—Å–Ω–æ–≤–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª',
        description: `–ü–æ–¥–∞—á–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É. ${firstLines}`,
        type: 'content'
      },
      {
        slideNumber: 3,
        title: '–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è',
        description: `–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –∑–Ω–∞–Ω—å. ${firstLines}`,
        type: 'activity'
      },
      {
        slideNumber: 4,
        title: '–ü—ñ–¥—Å—É–º–æ–∫ —É—Ä–æ–∫—É',
        description: `–£–∑–∞–≥–∞–ª—å–Ω–µ–Ω–Ω—è –≤–∏–≤—á–µ–Ω–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É —Ç–∞ –≤–∏—Å–Ω–æ–≤–∫–∏. ${firstLines}`,
        type: 'summary'
      }
    ];
  }

  // === –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ú–ê–°–û–í–û–á –ì–ï–ù–ï–†–ê–¶–Ü–á –í–°–Ü–• –°–õ–ê–ô–î–Ü–í ===
  public async generateAllSlides(
    slideDescriptions: SlideDescription[],
    lessonTopic: string,
    lessonAge: string,
    progressCallback?: (progress: SlideGenerationProgress[]) => void
  ): Promise<BulkSlideGenerationResult> {
    const startTime = Date.now();
    console.log(`üé® Starting bulk generation of ${slideDescriptions.length} slides...`);
    
    const slides: SimpleSlide[] = [];
    const errors: string[] = [];
    const progressState: SlideGenerationProgress[] = slideDescriptions.map(desc => ({
      slideNumber: desc.slideNumber,
      title: desc.title,
      status: 'pending',
      progress: 0
    }));

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É –ø—Ä–æ–≥—Ä–µ—Å—É
    if (progressCallback) {
      progressCallback([...progressState]);
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–ª–∞–π–¥–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ –∑ –Ω–µ–≤–µ–ª–∏–∫–∏–º–∏ –∑–∞—Ç—Ä–∏–º–∫–∞–º–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limiting
    for (let i = 0; i < slideDescriptions.length; i++) {
      const slideDesc = slideDescriptions[i];
      
      try {
        console.log(`üìÑ [${i + 1}/${slideDescriptions.length}] Generating slide: "${slideDesc.title}"`);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å - —Å–ª–∞–π–¥ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è
        progressState[i].status = 'generating';
        progressState[i].progress = 25;
        if (progressCallback) {
          progressCallback([...progressState]);
        }

        // –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∞–π–¥—É
        const slideHTML = await this.contentService.generateSlideContent(
          slideDesc.description,
          lessonTopic,
          lessonAge
        );

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å - HTML –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ
        progressState[i].progress = 75;
        if (progressCallback) {
          progressCallback([...progressState]);
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —Å–ª–∞–π–¥—É
        const slide: SimpleSlide = {
          id: `slide_${Date.now()}_${slideDesc.slideNumber}`,
          title: slideDesc.title,
          content: slideDesc.description,
          htmlContent: slideHTML,
          type: this.mapSlideTypeToSimple(slideDesc.type),
          status: 'completed'
        };

        slides.push(slide);

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å - —Å–ª–∞–π–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        progressState[i].status = 'completed';
        progressState[i].progress = 100;
        progressState[i].htmlContent = slideHTML;
        if (progressCallback) {
          progressCallback([...progressState]);
        }

        console.log(`‚úÖ [${i + 1}/${slideDescriptions.length}] Slide "${slideDesc.title}" generated successfully`);

        // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é —Å–ª–∞–π–¥—ñ–≤ (1.5 —Å–µ–∫—É–Ω–¥–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è rate limiting)
        if (i < slideDescriptions.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1500));
        }

      } catch (error) {
        console.error(`‚ùå [${i + 1}/${slideDescriptions.length}] Failed to generate slide "${slideDesc.title}":`, error);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å - –ø–æ–º–∏–ª–∫–∞
        progressState[i].status = 'error';
        progressState[i].error = error instanceof Error ? error.message : 'Unknown error';
        if (progressCallback) {
          progressCallback([...progressState]);
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ fallback —Å–ª–∞–π–¥
        const fallbackSlide: SimpleSlide = {
          id: `slide_${Date.now()}_${slideDesc.slideNumber}_fallback`,
          title: slideDesc.title,
          content: slideDesc.description,
          htmlContent: `<div style="text-align: center; padding: 40px;">
            <h2>${slideDesc.title}</h2>
            <p>–¶–µ–π —Å–ª–∞–π–¥ –±—É–¥–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ.</p>
            <p><small>–û–ø–∏—Å: ${slideDesc.description.substring(0, 100)}...</small></p>
          </div>`,
          type: this.mapSlideTypeToSimple(slideDesc.type),
          status: 'draft'
        };

        slides.push(fallbackSlide);
        errors.push(`Slide ${slideDesc.slideNumber} "${slideDesc.title}": ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    }

    const generationTime = Date.now() - startTime;
    const completedSlides = slides.filter(s => s.status === 'completed').length;
    const failedSlides = errors.length;

    console.log(`üéâ Bulk slide generation completed in ${generationTime}ms:`);
    console.log(`   ‚úÖ Completed: ${completedSlides}/${slideDescriptions.length}`);
    console.log(`   ‚ùå Failed: ${failedSlides}/${slideDescriptions.length}`);

    return {
      totalSlides: slideDescriptions.length,
      completedSlides,
      failedSlides,
      slides,
      errors,
      generationTime
    };
  }

  // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–ø—É —Å–ª–∞–π–¥—É
  private mapSlideTypeToSimple(type: 'welcome' | 'content' | 'activity' | 'summary'): 'title' | 'content' | 'interactive' | 'summary' {
    switch (type) {
      case 'welcome': return 'title';
      case 'activity': return 'interactive';
      case 'summary': return 'summary';
      default: return 'content';
    }
  }

  // === –ü–û–í–ù–Ü–°–¢–Æ –ü–ê–†–ê–õ–ï–õ–¨–ù–ê –ì–ï–ù–ï–†–ê–¶–Ü–Ø –í–°–Ü–• –°–õ–ê–ô–î–Ü–í ===
  private async generateAllSlidesParallel(
    slideDescriptions: SlideDescription[],
    lessonTopic: string,
    lessonAge: string,
    onSlideReady: (slide: SimpleSlide, progressUpdate: SlideGenerationProgress[]) => void
  ): Promise<BulkSlideGenerationResult> {
    console.log(`üöÄ Starting PARALLEL generation of ${slideDescriptions.length} slides...`);

    const startTime = Date.now();
    const progressState: SlideGenerationProgress[] = slideDescriptions.map(desc => ({
      slideNumber: desc.slideNumber,
      title: desc.title,
      status: 'pending',
      progress: 0
    }));

    const slides: SimpleSlide[] = [];
    let completedSlides = 0;

    // –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ –ø—Ä–æ–º–∏—Å–∏ –≤—ñ–¥—Ä–∞–∑—É (–ü–ê–†–ê–õ–ï–õ–¨–ù–û)
    const slidePromises = slideDescriptions.map(async (slideDesc, index) => {
      try {
        console.log(`üìÑ [PARALLEL] Starting slide: "${slideDesc.title}"`);
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å - —Å–ª–∞–π–¥ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è
        progressState[index].status = 'generating';
        progressState[index].progress = 25;

        // –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∞–π–¥—É
        const slideHTML = await this.contentService.generateSlideContent(
          slideDesc.description,
          lessonTopic,
          lessonAge
        );

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å - HTML –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ
        progressState[index].progress = 75;

        // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç —Å–ª–∞–π–¥—É
        const slide: SimpleSlide = {
          id: `slide_${Date.now()}_${slideDesc.slideNumber}_${Math.random().toString(36).substr(2, 9)}`,
          title: slideDesc.title,
          content: slideDesc.description,
          htmlContent: slideHTML,
          type: this.mapSlideTypeToSimple(slideDesc.type),
          status: 'completed'
        };

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å - —Å–ª–∞–π–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        progressState[index].status = 'completed';
        progressState[index].progress = 100;
        progressState[index].htmlContent = slideHTML;
        
        completedSlides++;
        console.log(`‚úÖ [PARALLEL] Slide "${slideDesc.title}" completed (${completedSlides}/${slideDescriptions.length})`);

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ª–∞–π–¥—É –≤—ñ–¥—Ä–∞–∑—É
        onSlideReady(slide, [...progressState]);

        return slide;

      } catch (error) {
        console.error(`‚ùå [PARALLEL] Error generating slide "${slideDesc.title}":`, error);
        
        progressState[index].status = 'error';
        progressState[index].progress = 0;
        progressState[index].error = error instanceof Error ? error.message : 'Unknown error';
        
        return null;
      }
    });

    // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–ª–∞–π–¥—ñ–≤
    const results = await Promise.all(slidePromises);
    
    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —É—Å–ø—ñ—à–Ω—ñ —Å–ª–∞–π–¥–∏
    results.forEach(slide => {
      if (slide) {
        slides.push(slide);
      }
    });

    const endTime = Date.now();
    const totalTime = (endTime - startTime) / 1000;

    console.log(`üéâ PARALLEL generation completed in ${totalTime}s: ${slides.length}/${slideDescriptions.length} slides generated`);

    return {
      slides,
      totalSlides: slideDescriptions.length,
      completedSlides: slides.length,
      failedSlides: slideDescriptions.length - slides.length,
      generationTime: totalTime * 1000, // –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏
      errors: progressState.filter(p => p.status === 'error').map(p => p.error || 'Unknown error')
    };
  }

  // === –°–¢–ê–†–ê –ü–û–°–õ–Ü–î–û–í–ù–ê –ì–ï–ù–ï–†–ê–¶–Ü–Ø (DEPRECATED) ===
} 