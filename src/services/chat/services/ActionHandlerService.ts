import { type ConversationHistory, type ChatResponse } from '../types';
import { type SlideDescription, type SlideGenerationProgress, type SimpleLesson } from '@/types/chat';
import { HelpHandler } from '../handlers/HelpHandler';
import { 
  IActionHandlerService,
  ISlideGenerationService,
  ISlideEditingService,
  ILessonManagementService,
  ISlideAnalysisService
} from '../interfaces/IChatServices';

// === SOLID: Single Responsibility - Action Handling ===
export class ActionHandlerService implements IActionHandlerService {
  constructor(
    private slideGenerationService: ISlideGenerationService,
    private slideEditingService: ISlideEditingService,
    private lessonManagementService: ILessonManagementService,
    private slideAnalysisService: ISlideAnalysisService
  ) {}

  async handleAction(action: string, history?: ConversationHistory, intent?: any): Promise<ChatResponse> {
    switch (action) {
      case 'approve_plan':
        return await this.handleApprovePlan(history);
      
      case 'edit_plan':
        return await this.handleEditPlanAction(history);

      case 'regenerate_slide':
        return await this.handleRegenerateSlide(history, intent);
        
      case 'help':
        const helpHandler = new HelpHandler();
        return await helpHandler.handle(intent || { intent: 'help', language: 'uk' });
      
      default:
        throw new Error(`Unknown action: ${action}`);
    }
  }

  private async handleApprovePlan(history?: ConversationHistory): Promise<ChatResponse> {
    if (!history?.planningResult) {
      throw new Error('No plan to approve');
    }

    const slideDescriptions = this.slideAnalysisService.extractSlideDescriptions(history.planningResult);
    const lesson = this.lessonManagementService.createLesson(
      history.lessonTopic || '–ù–æ–≤–∏–π —É—Ä–æ–∫',
      history.lessonAge || '8-9 —Ä–æ–∫—ñ–≤'
    );

    const initialProgress: SlideGenerationProgress[] = slideDescriptions.map(desc => ({
      slideNumber: desc.slideNumber,
      title: desc.title,
      status: 'pending',
      progress: 0
    }));

    const newConversationHistory: ConversationHistory = {
      ...history,
      step: 'bulk_generation',
      slideDescriptions,
      slideGenerationProgress: initialProgress,
      bulkGenerationStartTime: new Date(),
      isGeneratingAllSlides: true,
      currentLesson: lesson
    };

    // Start async generation
    this.generateAllSlidesAsync(slideDescriptions, history, lesson);

    return {
      success: true,
      message: `üé® **–†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –≤—Å—ñ—Ö —Å–ª–∞–π–¥—ñ–≤!**

üìä **–ü–ª–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:**
${slideDescriptions.map(desc => `${desc.slideNumber}. ${desc.title}`).join('\n')}

‚è≥ **–ü—Ä–æ–≥—Ä–µ—Å:** –ì–µ–Ω–µ—Ä—É—î—Ç—å—Å—è ${slideDescriptions.length} —Å–ª–∞–π–¥(—ñ–≤)...`,
      conversationHistory: newConversationHistory,
      actions: [
        {
          action: 'cancel_generation',
          label: '‚èπÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é',
          description: '–ó—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—ñ–≤'
        }
      ],
      lesson: lesson
    };
  }

  private async handleEditPlanAction(history?: ConversationHistory): Promise<ChatResponse> {
    if (!history) {
      throw new Error('No conversation history for plan editing');
    }

    const newConversationHistory: ConversationHistory = {
      ...history,
      step: 'plan_editing'
    };

    return {
      success: true,
      message: `–ù–∞–ø–∏—à—ñ—Ç—å —è–∫—ñ –∑–º—ñ–Ω–∏ —Ö–æ—á–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –¥–æ –ø–ª–∞–Ω—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:
        
- "–î–æ–¥–∞–π —Å–ª–∞–π–¥ –ø—Ä–æ –ª—ñ—Ç–∞—é—á–∏—Ö –¥–∏–Ω–æ–∑–∞–≤—Ä—ñ–≤"
- "–ó–º—ñ–Ω–∏ –≤—ñ–∫ –¥—ñ—Ç–µ–π –Ω–∞ 8 —Ä–æ–∫—ñ–≤"  
- "–ó—Ä–æ–±–∏ —É—Ä–æ–∫ –∫–æ—Ä–æ—Ç—à–∏–º - 4 —Å–ª–∞–π–¥–∏"
- "–î–æ–¥–∞–π –±—ñ–ª—å—à–µ —ñ–≥–æ—Ä"`,
      conversationHistory: newConversationHistory,
      actions: []
    };
  }

  private async handleRegenerateSlide(history?: ConversationHistory, intent?: any): Promise<ChatResponse> {
    if (!history?.currentLesson) {
      return {
        success: false,
        message: `‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó**

–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É—Ä–æ–∫ –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—ñ–≤.`,
        conversationHistory: history,
        error: 'No lesson context for slide regeneration'
      };
    }

    const slideNumber = intent?.parameters?.slideNumber || history.currentSlideIndex || 1;
    
    if (slideNumber < 1 || slideNumber > history.currentLesson.slides.length) {
      return {
        success: false,
        message: `‚ùå **–ü–æ–º–∏–ª–∫–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó**

–°–ª–∞–π–¥ ${slideNumber} –Ω–µ —ñ—Å–Ω—É—î.`,
        conversationHistory: history,
        error: `Slide ${slideNumber} does not exist`
      };
    }

    try {
      const currentSlide = history.currentLesson.slides[slideNumber - 1];
      const regeneratedSlide = await this.slideEditingService.regenerateSlide(
        currentSlide,
        history.lessonTopic || '—É—Ä–æ–∫',
        history.lessonAge || '6-8 —Ä–æ–∫—ñ–≤'
      );

      // Update lesson with regenerated slide
      const updatedSlides = history.currentLesson.slides.map((slide, index) => 
        index === slideNumber - 1 ? regeneratedSlide : slide
      );

      const updatedLesson = this.lessonManagementService.updateLesson(history.currentLesson, {
        slides: updatedSlides
      });

      const detectedChanges = this.slideAnalysisService.analyzeSlideChanges(
        currentSlide, 
        regeneratedSlide.htmlContent || '', 
        '–ü–æ–≤–Ω–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è —Å–ª–∞–π–¥—É'
      );

      return {
        success: true,
        message: `üîÑ **–°–ª–∞–π–¥ ${slideNumber} –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!**

üìã **–î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø—Ä–æ –∑–º—ñ–Ω–∏:**
${detectedChanges.map(change => `‚Ä¢ ${change}`).join('\n')}`,
        conversationHistory: {
          ...history,
          currentLesson: updatedLesson,
          currentSlideIndex: slideNumber
        },
        actions: [
          {
            action: 'generate_next_slide',
            label: '‚ñ∂Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥',
            description: `–ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ª–∞–π–¥ ${slideNumber + 1}`
          },
          {
            action: 'regenerate_slide',
            label: 'üîÑ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑',
            description: `–°—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ –æ–¥–∏–Ω –≤–∞—Ä—ñ–∞–Ω—Ç —Å–ª–∞–π–¥—É ${slideNumber}`
          }
        ],
        lesson: updatedLesson
      };
    } catch (error) {
      return {
        success: false,
        message: `üòî –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—É ${slideNumber}.`,
        conversationHistory: history,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  private async generateAllSlidesAsync(
    slideDescriptions: SlideDescription[],
    history: ConversationHistory,
    lesson: SimpleLesson
  ): Promise<void> {
    try {
      const result = await this.slideGenerationService.generateAllSlides(
        slideDescriptions,
        history.lessonTopic || '—É—Ä–æ–∫',
        history.lessonAge || '6-8 —Ä–æ–∫—ñ–≤'
      );

      // Add slides to lesson
      for (const slide of result.slides) {
        this.lessonManagementService.addSlideToLesson(lesson, slide);
      }

      console.log(`üéâ Generation completed! ${result.completedSlides}/${result.totalSlides} slides generated`);
    } catch (error) {
      console.error('‚ùå Error in async slide generation:', error);
    }
  }
} 