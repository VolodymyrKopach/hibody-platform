import { type SimpleSlide, type SlideDescription } from '@/types/chat';
import { ISlideAnalysisService } from '../interfaces/IChatServices';

// === SOLID: Single Responsibility - Slide Analysis ===
export class SlideAnalysisService implements ISlideAnalysisService {
  analyzeSlideChanges(oldSlide: SimpleSlide, newSlideHTML: string, instruction: string): string[] {
    const changes: string[] = [];
    
    try {
      const oldHTML = oldSlide.htmlContent || '';
      
      // Analyze images
      const oldImages = (oldHTML.match(/<img[^>]*>/g) || []).length;
      const newImages = (newSlideHTML.match(/<img[^>]*>/g) || []).length;
      
      if (newImages > oldImages) {
        changes.push(`‚ûï –î–æ–¥–∞–Ω–æ ${newImages - oldImages} –Ω–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å`);
      } else if (newImages < oldImages) {
        changes.push(`‚ûñ –í–∏–¥–∞–ª–µ–Ω–æ ${oldImages - newImages} –∑–æ–±—Ä–∞–∂–µ–Ω—å`);
      } else if (newImages > 0) {
        changes.push(`üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ ${newImages} –∑–æ–±—Ä–∞–∂–µ–Ω—å`);
      }
      
      // Analyze text content
      const oldTextLength = oldHTML.replace(/<[^>]*>/g, '').trim().length;
      const newTextLength = newSlideHTML.replace(/<[^>]*>/g, '').trim().length;
      
      if (newTextLength > oldTextLength * 1.2) {
        changes.push(`üìù –ó–Ω–∞—á–Ω–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç`);
      } else if (newTextLength < oldTextLength * 0.8) {
        changes.push(`‚úÇÔ∏è –°–∫–æ—Ä–æ—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç`);
      } else if (Math.abs(newTextLength - oldTextLength) > 50) {
        changes.push(`üìù –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç`);
      }
      
      // Analyze interactive elements
      const oldButtons = (oldHTML.match(/<button[^>]*>/g) || []).length;
      const newButtons = (newSlideHTML.match(/<button[^>]*>/g) || []).length;
      
      if (newButtons > oldButtons) {
        changes.push(`üéÆ –î–æ–¥–∞–Ω–æ ${newButtons - oldButtons} —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫`);
      }
      
      // Analyze animations
      const hasNewAnimations = newSlideHTML.includes('animation') || newSlideHTML.includes('transition');
      const hadOldAnimations = oldHTML.includes('animation') || oldHTML.includes('transition');
      
      if (hasNewAnimations && !hadOldAnimations) {
        changes.push(`‚ú® –î–æ–¥–∞–Ω–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ç–∞ –ø–ª–∞–≤–Ω—ñ –ø–µ—Ä–µ—Ö–æ–¥–∏`);
      }
      
      // If no specific changes detected, add general changes
      if (changes.length === 0) {
        changes.push(`üîÑ –ü–æ–≤–Ω—ñ—Å—Ç—é –æ–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∞–π–¥—É`);
        changes.push(`üìã –ó–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é: "${instruction}"`);
      }
      
    } catch (error) {
      console.warn('Error analyzing slide changes:', error);
      changes.push(`üîÑ –û–Ω–æ–≤–ª–µ–Ω–æ —Å–ª–∞–π–¥ –∑–≥—ñ–¥–Ω–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é`);
    }
    
    return changes;
  }

  extractSlideDescriptions(planningResult: string): SlideDescription[] {
    const slideDescriptions: SlideDescription[] = [];
    
    try {
      const slidePatterns = [
        /###\s*–°–ª–∞–π–¥\s+(\d+):\s*([^\n]+)[^#]*?(?=###\s*–°–ª–∞–π–¥\s+|\s*##|\s*$)/gi,
        /##\s*–°–ª–∞–π–¥\s+(\d+)[^#]*?(?=##\s*–°–ª–∞–π–¥\s+|\s*$)/gi,
        /\*\*–°–ª–∞–π–¥\s+(\d+)[^*]*?(?=\*\*–°–ª–∞–π–¥\s+|\s*$)/gi,
        /(\d+)\.\s*[^0-9]*?(?=\d+\.\s*|\s*$)/gi
      ];

      for (const pattern of slidePatterns) {
        const matches = [...planningResult.matchAll(pattern)];
        
        if (matches.length > 0) {
          for (const match of matches) {
            const slideNumber = parseInt(match[1]);
            if (slideNumber && !slideDescriptions.find(s => s.slideNumber === slideNumber)) {
              let description = match[0].trim();
              let title = match[2]?.trim() || `–°–ª–∞–π–¥ ${slideNumber}`;
              
              description = description
                .replace(/^###\s*–°–ª–∞–π–¥\s+\d+:\s*[^\n]+/i, '')
                .replace(/^##\s*–°–ª–∞–π–¥\s+\d+[:\s]*/i, '')
                .replace(/^\*\*–°–ª–∞–π–¥\s+\d+[:\s]*/i, '')
                .replace(/^\d+\.\s*/, '')
                .trim();

              if (description.length > 20) {
                slideDescriptions.push({
                  slideNumber,
                  title,
                  description,
                  type: this.determineSlideType(title, description, slideNumber)
                });
              }
            }
          }
          
          if (slideDescriptions.length > 0) break;
        }
      }

      if (slideDescriptions.length === 0) {
        return this.createDefaultSlideStructure(planningResult);
      }

      return slideDescriptions.sort((a, b) => a.slideNumber - b.slideNumber);
      
    } catch (error) {
      console.error('Error extracting slide descriptions:', error);
      return this.createDefaultSlideStructure(planningResult);
    }
  }

  determineSlideType(title: string, description: string, slideNumber: number): 'welcome' | 'content' | 'activity' | 'summary' {
    const titleLower = title.toLowerCase();
    const descLower = description.toLowerCase();
    
    if (slideNumber === 1 || titleLower.includes('–≤—ñ—Ç–∞–Ω–Ω—è') || titleLower.includes('–≤—Å—Ç—É–ø')) {
      return 'welcome';
    }
    
    if (titleLower.includes('–∑–∞–≤–¥–∞–Ω–Ω—è') || titleLower.includes('–≥—Ä–∞') || descLower.includes('–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å')) {
      return 'activity';
    }
    
    if (titleLower.includes('–ø—ñ–¥—Å—É–º–æ–∫') || titleLower.includes('–≤–∏—Å–Ω–æ–≤–æ–∫')) {
      return 'summary';
    }
    
    return 'content';
  }

  private createDefaultSlideStructure(planningResult: string): SlideDescription[] {
    const firstLines = planningResult.split('\n').slice(0, 5).join(' ').substring(0, 300);
    
    return [
      {
        slideNumber: 1,
        title: '–í—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑ —Ç–µ–º–æ—é',
        description: `–í—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥ –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞ –∑ —Ç–µ–º–æ—é —É—Ä–æ–∫—É. ${firstLines}`,
        type: 'welcome'
      },
      {
        slideNumber: 2,
        title: '–û—Å–Ω–æ–≤–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª',
        description: `–ü–æ–¥–∞—á–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É. ${firstLines}`,
        type: 'content'
      },
      {
        slideNumber: 3,
        title: '–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è',
        description: `–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∑–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –∑–Ω–∞–Ω—å. ${firstLines}`,
        type: 'activity'
      },
      {
        slideNumber: 4,
        title: '–ü—ñ–¥—Å—É–º–æ–∫ —É—Ä–æ–∫—É',
        description: `–£–∑–∞–≥–∞–ª—å–Ω–µ–Ω–Ω—è –≤–∏–≤—á–µ–Ω–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É —Ç–∞ –≤–∏—Å–Ω–æ–≤–∫–∏. ${firstLines}`,
        type: 'summary'
      }
    ];
  }
} 