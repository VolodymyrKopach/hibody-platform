import { IIntentHandler, ChatHandlerResult, ConversationHistory } from './IIntentHandler';
import { IntentDetectionResult, UserIntent } from '../../intent/IIntentDetectionService';

// Single Responsibility: –û–±—Ä–æ–±–∫–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–ª–∞–Ω—É
export class EditPlanHandler implements IIntentHandler {
  
  canHandle(intent: IntentDetectionResult, conversationHistory?: ConversationHistory): boolean {
    return conversationHistory?.step === 'plan_editing';
  }

  async handle(intent: IntentDetectionResult, conversationHistory?: ConversationHistory): Promise<ChatHandlerResult> {
    if (!conversationHistory) {
      throw new Error('Conversation history required for plan editing');
    }

    console.log('üîß Processing plan modifications...');
    
    // Simulate AI processing time for plan modification
    await new Promise(resolve => setTimeout(resolve, 2000));

    const updatedPlan = conversationHistory.planningResult + `

**üîÑ –û–ù–û–í–õ–ï–ù–ù–Ø:** ${intent.parameters.rawMessage}`;

    const newConversationHistory: ConversationHistory = {
      ...conversationHistory,
      step: 'planning',
      planningResult: updatedPlan
    };

    return {
      success: true,
      message: `–ü–ª–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–∏–º–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è–º–∏:

${updatedPlan}`,
      conversationHistory: newConversationHistory,
      actions: [
        {
          action: 'approve_plan',
          label: '‚úÖ –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø–µ—Ä—à–∏–π —Å–ª–∞–π–¥',
          description: '–°—Ö–≤–∞–ª–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø–ª–∞–Ω'
        },
        {
          action: 'edit_plan',
          label: '‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —â–µ',
          description: '–í–Ω–µ—Å—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–º—ñ–Ω–∏'
        }
      ]
    };
  }
} 