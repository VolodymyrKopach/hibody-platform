import { ParallelSlideGenerationService, ParallelGenerationCallbacks } from './ParallelSlideGenerationService';
import { SlideDescription, SimpleLesson, SlideGenerationProgress, SimpleSlide } from '@/types/chat';
import { ConversationHistory, ChatResponse } from './types';
import { GeminiContentService } from '@/services/content/GeminiContentService';

export class ChatServiceParallelAdapter {
  private parallelService: ParallelSlideGenerationService;
  private contentService: GeminiContentService;

  constructor() {
    this.parallelService = new ParallelSlideGenerationService();
    this.contentService = new GeminiContentService();
  }

  /**
   * –°—Ö–≤–∞–ª–µ–Ω–Ω—è –ø–ª–∞–Ω—É –∑ –ü–ê–†–ê–õ–ï–õ–¨–ù–û–Æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—î—é —Å–ª–∞–π–¥—ñ–≤
   */
  async handleApprovePlanParallel(
    conversationHistory: ConversationHistory,
    callbacks?: ParallelGenerationCallbacks
  ): Promise<ChatResponse> {
    if (!conversationHistory?.planningResult) {
      throw new Error('No plan to approve');
    }

    console.log('üé® Starting PARALLEL slide generation...');
    
    try {
      // === –ö–†–û–ö 1: –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ –æ–ø–∏—Å–∏ —Å–ª–∞–π–¥—ñ–≤ –∑ –ø–ª–∞–Ω—É ===
      const slideDescriptions = this.extractAllSlideDescriptions(conversationHistory.planningResult);
      console.log(`üìÑ Extracted ${slideDescriptions.length} slide descriptions from plan`);

      // === –ö–†–û–ö 2: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —É—Ä–æ–∫ ===
      const lesson: SimpleLesson = {
        id: `lesson_${Date.now()}`,
        title: conversationHistory.lessonTopic || '–ù–æ–≤–∏–π —É—Ä–æ–∫',
        description: `–£—Ä–æ–∫ –ø—Ä–æ ${conversationHistory.lessonTopic} –¥–ª—è –¥—ñ—Ç–µ–π ${conversationHistory.lessonAge}`,
        subject: '–ó–∞–≥–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è',
        ageGroup: conversationHistory.lessonAge || '8-9 —Ä–æ–∫—ñ–≤',
        duration: 30,
        createdAt: new Date(),
        updatedAt: new Date(),
        authorId: 'ai-chat',
        slides: []
      };

      // === –ö–†–û–ö 3: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å—Ç–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—É ===
      const initialProgress: SlideGenerationProgress[] = slideDescriptions.map(desc => ({
        slideNumber: desc.slideNumber,
        title: desc.title,
        status: 'pending',
        progress: 0
      }));

      const newConversationHistory: ConversationHistory = {
        ...conversationHistory,
        step: 'bulk_generation',
        slideDescriptions,
        slideGenerationProgress: initialProgress,
        bulkGenerationStartTime: new Date(),
        isGeneratingAllSlides: true,
        currentLesson: lesson
      };

      // === –ö–†–û–ö 4: –ó–∞–ø—É—Å–∫–∞—î–º–æ –ü–ê–†–ê–õ–ï–õ–¨–ù–£ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é ===
      if (callbacks) {
        // –§–æ–Ω–æ–≤–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑ callbacks
        this.parallelService.generateAllSlidesParallel(
          slideDescriptions,
          conversationHistory.lessonTopic || '—É—Ä–æ–∫',
          conversationHistory.lessonAge || '6-8 —Ä–æ–∫—ñ–≤',
          lesson,
          callbacks
        ).catch(error => {
          console.error('‚ùå Parallel generation error:', error);
          callbacks.onError('Generation failed', 0);
        });
      }

      // === –ö–†–û–ö 5: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===
      const initialMessage = `üé® **–†–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –ü–ê–†–ê–õ–ï–õ–¨–ù–£ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –≤—Å—ñ—Ö —Å–ª–∞–π–¥—ñ–≤!**

üìä **–ü–ª–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:**
${slideDescriptions.map(desc => `${desc.slideNumber}. ${desc.title} (${desc.type})`).join('\n')}

‚ö° **–ü–µ—Ä–µ–≤–∞–≥–∏ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:**
‚Ä¢ –í—Å—ñ ${slideDescriptions.length} —Å–ª–∞–π–¥–∏ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è –æ–¥–Ω–æ—á–∞—Å–Ω–æ
‚Ä¢ –°–ª–∞–π–¥–∏ –∑'—è–≤–ª—è—Ç–∏–º—É—Ç—å—Å—è –≤ –ø—Ä–∞–≤—ñ–π –ø–∞–Ω–µ–ª—ñ –ø–æ –º—ñ—Ä—ñ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ
‚Ä¢ –ó–Ω–∞—á–Ω–æ —à–≤–∏–¥—à–µ –Ω—ñ–∂ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è

üéØ **–û—á—ñ–∫—É–≤–∞–Ω–∏–π —á–∞—Å:** ${Math.ceil(slideDescriptions.length * 15 / 4)} —Å–µ–∫—É–Ω–¥ (–∑–∞–º—ñ—Å—Ç—å ${slideDescriptions.length * 30})`;

      return {
        success: true,
        message: initialMessage,
        conversationHistory: newConversationHistory,
        actions: [
          {
            action: 'cancel_generation',
            label: '‚èπÔ∏è –°–∫–∞—Å—É–≤–∞—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é',
            description: '–ó—É–ø–∏–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–µ—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–ª–∞–π–¥—ñ–≤'
          }
        ],
        lesson: lesson
      };

    } catch (error) {
      console.error('‚ùå Error in parallel approval:', error);
      
      return {
        success: false,
        message: `üòî –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ—á–∞—Ç–∫—É–≤–∞–Ω–Ω—ñ –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó.

**–ü–æ–º–∏–ª–∫–∞:** ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
        conversationHistory,
        error: error instanceof Error ? error.message : 'Unknown error'
      };
    }
  }

  /**
   * –í–∏—Ç—è–≥—É—î –≤—Å—ñ –æ–ø–∏—Å–∏ —Å–ª–∞–π–¥—ñ–≤ –∑ –ø–ª–∞–Ω—É (—Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
   */
  private extractAllSlideDescriptions(planningResult: string): SlideDescription[] {
    console.log('üìÑ Extracting all slide descriptions from plan...');
    
    const slides: SlideDescription[] = [];
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω–∏ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤
    const patterns = [
      /###\s*–°–ª–∞–π–¥\s+(\d+):\s*([^\n]+)/gi,
      /–°–ª–∞–π–¥\s*(\d+)[\.:]?\s*([^\n]+)/gi,
      /(\d+)\.\s*([^\n]+)/gi
    ];

    let found = false;
    
    for (const pattern of patterns) {
      const matches = Array.from(planningResult.matchAll(pattern));
      
      if (matches.length > 0) {
        console.log(`‚úÖ Found ${matches.length} slides using pattern: ${pattern.source}`);
        
        matches.forEach(match => {
          const slideNumber = parseInt(match[1]);
          const title = match[2].trim();
          
          if (slideNumber && title && slideNumber <= 10) {
            slides.push({
              slideNumber,
              title,
              description: `–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–ª–∞–π–¥ "${title}" –¥–ª—è —É—Ä–æ–∫—É`,
              type: slideNumber === 1 ? 'welcome' : 
                    slideNumber === matches.length ? 'summary' : 'content'
            });
          }
        });
        
        found = true;
        break;
      }
    }

    // Fallback –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
    if (!found || slides.length === 0) {
      console.log('üîÑ Using fallback slide structure');
      
      const defaultSlides = [
        { title: '–í—Å—Ç—É–ø', type: 'welcome' as const },
        { title: '–û—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞', type: 'content' as const },
        { title: '–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è', type: 'content' as const },
        { title: '–ü—ñ–¥—Å—É–º–∫–∏', type: 'summary' as const }
      ];

      defaultSlides.forEach((slide, index) => {
        slides.push({
          slideNumber: index + 1,
          title: slide.title,
          description: `–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–ª–∞–π–¥ "${slide.title}" –¥–ª—è —É—Ä–æ–∫—É`,
          type: slide.type
        });
      });
    }

    // –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Å–ª–∞–π–¥—É
    slides.sort((a, b) => a.slideNumber - b.slideNumber);
    
    console.log('üìã Extracted slides:', slides.map(s => `${s.slideNumber}. ${s.title}`));
    
    return slides;
  }
} 