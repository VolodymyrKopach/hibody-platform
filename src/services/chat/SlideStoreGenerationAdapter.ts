import { SimpleLesson, SimpleSlide } from '@/types/chat';
import { ISlideStore } from '@/types/store';
import { ChatService } from './ChatService';
import { SlideDescription } from '@/types/chat';

// === SOLID: SRP - SlideStoreGenerationAdapter –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —Ç—ñ–ª—å–∫–∏ –∑–∞ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑ Store ===
export class SlideStoreGenerationAdapter {
  constructor(
    private store: ISlideStore,
    private generationService: ParallelSlideGenerationService
  ) {}

  // === SOLID: DIP - –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∞–±—Å—Ç—Ä–∞–∫—Ü—ñ—ó Store ===
  async generateSlidesWithStoreUpdates(
    slideDescriptions: SlideDescription[],
    lessonTopic: string,
    lessonAge: string,
    lesson: SimpleLesson
  ): Promise<void> {
    console.log('üöÄ [SlideStoreAdapter] Starting generation with Store integration');

    // –û–Ω–æ–≤–ª—é—î–º–æ Store - –ø–æ—á–∞—Ç–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
    this.store.actions.setCurrentLesson(lesson);
    this.store.actions.setGenerating(true);

    try {
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑ callbacks –¥–ª—è Store
      await this.generationService.generateAllSlidesParallel(
        slideDescriptions,
        lessonTopic,
        lessonAge,
        lesson,
        {
          // === SOLID: OCP - Callbacks –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ ===
          onSlideReady: (slide: SimpleSlide, updatedLesson: SimpleLesson) => {
            console.log(`üé® [SlideStoreAdapter] Slide ready: ${slide.title}`);
            
            // –î–æ–¥–∞—î–º–æ —Å–ª–∞–π–¥ –¥–æ Store –í–Ü–î–†–ê–ó–£
            this.store.actions.addSlide(slide);
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —É—Ä–æ–∫
            this.store.actions.updateLesson({
              slides: updatedLesson.slides,
              updatedAt: new Date()
            });

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–∞–Ω–µ–ª—å —Å–ª–∞–π–¥—ñ–≤ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É —Å–ª–∞–π–¥—ñ
            const currentState = this.store.getState();
            if ((currentState.slides?.length || 0) === 1 && !currentState.slidePanelOpen) {
              this.store.actions.setSlidePanelOpen(true);
              console.log('üì± [SlideStoreAdapter] Auto-opened slide panel for first slide');
            }
          },

                     onProgressUpdate: (progress) => {
             // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –∫–æ–∂–Ω–æ–≥–æ —Å–ª–∞–π–¥—É –≤ Store
             progress.forEach(slideProgress => {
               this.store.actions.setSlideGenerationProgress(
                 `slide-${slideProgress.slideNumber}`, 
                 slideProgress.progress || 0
               );
             });
           },

          onError: (error: string, slideNumber: number) => {
            console.error(`‚ùå [SlideStoreAdapter] Generation error for slide ${slideNumber}:`, error);
            // –ú–æ–∂–µ–º–æ –¥–æ–¥–∞—Ç–∏ error state –¥–æ Store –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ
          },

          onComplete: (finalLesson: SimpleLesson, stats) => {
            console.log(`üéâ [SlideStoreAdapter] Generation completed:`, stats);
            
            // –ó–∞–≤–µ—Ä—à—É—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é
            this.store.actions.setGenerating(false);
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω —É—Ä–æ–∫—É
            this.store.actions.updateLesson({
              slides: finalLesson.slides,
              updatedAt: new Date()
            });

            // –û—á–∏—â—É—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
            this.clearGenerationProgress();
          }
        }
      );

    } catch (error) {
      console.error('‚ùå [SlideStoreAdapter] Generation failed:', error);
      
      // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      this.store.actions.setGenerating(false);
      this.clearGenerationProgress();
      
      throw error;
    }
  }

  // === SOLID: SRP - –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó ===
  private clearGenerationProgress(): void {
    // –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –ø—Ä–æ–≥—Ä–µ—Å–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
    const currentState = this.store.getState();
    
    currentState.generationProgress.forEach((_, slideId) => {
      this.store.actions.setSlideGenerationProgress(slideId, 0);
    });
  }

  // === SOLID: OCP - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è ===
  
  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –æ–∫—Ä–µ–º–æ–≥–æ —Å–ª–∞–π–¥—É –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º Store
  async generateSingleSlide(
    description: string, 
    lessonTopic: string, 
    lessonAge: string
  ): Promise<SimpleSlide> {
    console.log('üéØ [SlideStoreAdapter] Generating single slide');

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–ª–∞–π–¥—É
    const slideDescription: SlideDescription = {
      slideNumber: 1,
      title: 'Generated Slide',
      description,
      type: 'content'
    };

    const tempLesson: SimpleLesson = {
      id: `temp_${Date.now()}`,
      title: 'Temporary Lesson',
      description: 'Temporary lesson for single slide generation',
      subject: 'General',
      ageGroup: lessonAge,
      duration: 30,
      authorId: 'system',
      slides: [],
      createdAt: new Date(),
      updatedAt: new Date()
    };

    return new Promise((resolve, reject) => {
      this.generationService.generateAllSlidesParallel(
        [slideDescription],
        lessonTopic,
        lessonAge,
        tempLesson,
        {
          onSlideReady: (slide: SimpleSlide) => {
            // –î–æ–¥–∞—î–º–æ –¥–æ Store
            this.store.actions.addSlide(slide);
            resolve(slide);
          },
          onProgressUpdate: () => {},
          onError: (error: string) => reject(new Error(error)),
          onComplete: () => {}
        }
      ).catch(reject);
    });
  }

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —Å–ª–∞–π–¥—É –∑ Store
  async updateSlideContent(
    slideId: string, 
    instruction: string
  ): Promise<void> {
    console.log(`üîÑ [SlideStoreAdapter] Updating slide: ${slideId}`);

    const currentState = this.store.getState();
    const slide = currentState.slides.find(s => s.id === slideId);

    if (!slide) {
      throw new Error(`Slide ${slideId} not found in Store`);
    }

    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ª–∞–π–¥—É —á–µ—Ä–µ–∑ AI
    // –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
    this.store.actions.updateSlide(slideId, {
      status: 'completed',
      updatedAt: new Date()
    });
  }

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
  getGenerationStats(): {
    isGenerating: boolean;
    totalSlides: number;
    completedSlides: number;
    averageProgress: number;
  } {
    const state = this.store.getState();
    
    const totalSlides = state.slides.length;
    const averageProgress = state.generationProgress.size > 0 
      ? Array.from(state.generationProgress.values()).reduce((sum, progress) => sum + progress, 0) / state.generationProgress.size
      : 0;

    return {
      isGenerating: state.isGenerating,
      totalSlides,
      completedSlides: state.slides.filter(slide => slide.status === 'completed').length,
      averageProgress: Math.round(averageProgress)
    };
  }
}

// === SOLID: SRP - Factory –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞–¥–∞–ø—Ç–µ—Ä–∞ ===
export class SlideStoreGenerationAdapterFactory {
  static create(
    store: ISlideStore, 
    generationService?: ParallelSlideGenerationService
  ): SlideStoreGenerationAdapter {
    const service = generationService || new ParallelSlideGenerationService();
    return new SlideStoreGenerationAdapter(store, service);
  }

  static createWithCustomConfig(
    store: ISlideStore,
    config: {
      maxConcurrentSlides?: number;
      retryAttempts?: number;
      timeoutMs?: number;
    }
  ): SlideStoreGenerationAdapter {
    const service = new ParallelSlideGenerationService();
    return new SlideStoreGenerationAdapter(store, service);
  }
}

// === SOLID: ISP - –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Store-based –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó ===
export interface ISlideStoreGenerationAdapter {
  generateSlidesWithStoreUpdates(
    slideDescriptions: SlideDescription[],
    lessonTopic: string,
    lessonAge: string,
    lesson: SimpleLesson
  ): Promise<void>;

  generateSingleSlide(
    description: string, 
    lessonTopic: string, 
    lessonAge: string
  ): Promise<SimpleSlide>;

  updateSlideContent(slideId: string, instruction: string): Promise<void>;

  getGenerationStats(): {
    isGenerating: boolean;
    totalSlides: number;
    completedSlides: number;
    averageProgress: number;
  };
} 