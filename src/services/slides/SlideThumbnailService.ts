import { generateSlideThumbnail, generateFallbackPreview } from '@/utils/slidePreview';
import { SlideService } from '@/services/database/SlideService';

export interface IThumbnailGenerator {
  generateThumbnail(htmlContent: string, options?: ThumbnailOptions): Promise<string>;
}

export interface IThumbnailCache {
  get(slideId: string): string | null;
  set(slideId: string, thumbnailUrl: string): void;
  has(slideId: string): boolean;
  delete(slideId: string): void;
}

export interface IThumbnailPersistence {
  saveThumbnail(slideId: string, thumbnailUrl: string): Promise<void>;
  getThumbnail(slideId: string): Promise<string | null>;
}

export interface ThumbnailOptions {
  width?: number;
  height?: number;
  quality?: number;
  background?: string;
}

// –û—Å–Ω–æ–≤–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–µ–≤—å—é
export class DefaultThumbnailGenerator implements IThumbnailGenerator {
  async generateThumbnail(htmlContent: string, options: ThumbnailOptions = {}): Promise<string> {
    const defaultOptions = {
      width: 640,
      height: 480,
      quality: 0.85,
      background: '#ffffff',
      ...options
    };

    try {
      console.log('üé® THUMBNAIL: Generating thumbnail with options:', defaultOptions);
      const thumbnailUrl = await generateSlideThumbnail(htmlContent, defaultOptions);
      console.log('‚úÖ THUMBNAIL: Successfully generated thumbnail', {
        size: Math.round(thumbnailUrl.length / 1024) + 'KB'
      });
      return thumbnailUrl;
    } catch (error) {
      console.warn('‚ö†Ô∏è THUMBNAIL: Main generation failed, creating fallback:', error);
      return generateFallbackPreview();
    }
  }
}

// –ö–µ—à –ø—Ä–µ–≤—å—é –≤ –ø–∞–º'—è—Ç—ñ
export class MemoryThumbnailCache implements IThumbnailCache {
  private cache = new Map<string, string>();

  get(slideId: string): string | null {
    return this.cache.get(slideId) || null;
  }

  set(slideId: string, thumbnailUrl: string): void {
    this.cache.set(slideId, thumbnailUrl);
  }

  has(slideId: string): boolean {
    return this.cache.has(slideId);
  }

  delete(slideId: string): void {
    this.cache.delete(slideId);
  }

  clear(): void {
    this.cache.clear();
  }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
export class DatabaseThumbnailPersistence implements IThumbnailPersistence {
  constructor(private slideService: SlideService) {}

  async saveThumbnail(slideId: string, thumbnailUrl: string): Promise<void> {
    console.log('üíæ THUMBNAIL: Saving thumbnail to database for slide:', slideId);
    await this.slideService.updateSlide(slideId, { thumbnail_url: thumbnailUrl });
    console.log('‚úÖ THUMBNAIL: Thumbnail saved to database');
  }

  async getThumbnail(slideId: string): Promise<string | null> {
    try {
      const slide = await this.slideService.getSlideById(slideId);
      return slide?.thumbnail_url || null;
    } catch (error) {
      console.warn('‚ö†Ô∏è THUMBNAIL: Failed to get thumbnail from database:', error);
      return null;
    }
  }
}

// –û—Å–Ω–æ–≤–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—ñ–≤
export class SlideThumbnailService {
  private generationInProgress = new Set<string>();

  constructor(
    private generator: IThumbnailGenerator,
    private cache: IThumbnailCache,
    private persistence: IThumbnailPersistence
  ) {}

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—É (–∑ –∫–µ—à—É, –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–µ)
   */
  async getThumbnail(slideId: string, htmlContent?: string): Promise<string | null> {
    console.log('üîç THUMBNAIL: Getting thumbnail for slide:', slideId);

    // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–µ—à —É –ø–∞–º'—è—Ç—ñ
    if (this.cache.has(slideId)) {
      const cachedThumbnail = this.cache.get(slideId);
      console.log('‚ö° THUMBNAIL: Found in memory cache');
      return cachedThumbnail;
    }

    // 2. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
    try {
      const dbThumbnail = await this.persistence.getThumbnail(slideId);
      if (dbThumbnail) {
        console.log('üíæ THUMBNAIL: Found in database, caching in memory');
        this.cache.set(slideId, dbThumbnail);
        return dbThumbnail;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è THUMBNAIL: Database lookup failed:', error);
    }

    // 3. –Ø–∫—â–æ –Ω–µ–º–∞—î HTML –∫–æ–Ω—Ç–µ–Ω—Ç—É, –Ω–µ –º–æ–∂–µ–º–æ –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏
    if (!htmlContent) {
      console.log('‚ùå THUMBNAIL: No HTML content provided, cannot generate');
      return null;
    }

    // 4. –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–µ –ø—Ä–µ–≤—å—é
    return this.generateAndSaveThumbnail(slideId, htmlContent);
  }

  /**
   * –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–æ–≤–µ –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É (—Ñ–æ—Ä—Å–æ–≤–∞–Ω–æ)
   */
  async generateThumbnail(slideId: string, htmlContent: string, options?: ThumbnailOptions): Promise<string> {
    console.log('üîÑ THUMBNAIL: Force generating new thumbnail for slide:', slideId);
    
    // –û—á–∏—â—É—î–º–æ –∫–µ—à –¥–ª—è —Ü—å–æ–≥–æ —Å–ª–∞–π–¥—É
    this.cache.delete(slideId);
    
    return this.generateAndSaveThumbnail(slideId, htmlContent, options);
  }

  /**
   * –ü—Ä–∏–≤–∞—Ç–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é
   */
  private async generateAndSaveThumbnail(slideId: string, htmlContent: string, options?: ThumbnailOptions): Promise<string> {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –ø—Ä–µ–≤—å—é –¥–ª—è —Ü—å–æ–≥–æ —Å–ª–∞–π–¥—É
    if (this.generationInProgress.has(slideId)) {
      console.log('‚è≥ THUMBNAIL: Generation already in progress for slide:', slideId);
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ fallback –ø—Ä–µ–≤—å—é –ø–æ–∫–∏ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –æ—Å–Ω–æ–≤–Ω–µ
      return generateFallbackPreview();
    }

    this.generationInProgress.add(slideId);

    try {
      // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–µ–≤—å—é
      const thumbnailUrl = await this.generator.generateThumbnail(htmlContent, options);

      // –ö–µ—à—É—î–º–æ –≤ –ø–∞–º'—è—Ç—ñ
      this.cache.set(slideId, thumbnailUrl);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–Ω–µ –±–ª–æ–∫—É—î–º–æ UI)
      this.persistence.saveThumbnail(slideId, thumbnailUrl).catch(error => {
        console.error('‚ùå THUMBNAIL: Failed to save to database:', error);
      });

      return thumbnailUrl;
    } finally {
      this.generationInProgress.delete(slideId);
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —ñ—Å–Ω—É—î –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É
   */
  async hasThumbnail(slideId: string): Promise<boolean> {
    if (this.cache.has(slideId)) {
      return true;
    }

    try {
      const dbThumbnail = await this.persistence.getThumbnail(slideId);
      return !!dbThumbnail;
    } catch {
      return false;
    }
  }

  /**
   * –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—É
   */
  async deleteThumbnail(slideId: string): Promise<void> {
    console.log('üóëÔ∏è THUMBNAIL: Deleting thumbnail for slide:', slideId);
    
    // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∫–µ—à—É
    this.cache.delete(slideId);

    // –í–∏–¥–∞–ª—è—î–º–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    try {
      await this.persistence.saveThumbnail(slideId, '');
    } catch (error) {
      console.warn('‚ö†Ô∏è THUMBNAIL: Failed to delete from database:', error);
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç–∏ –≤–µ—Å—å –∫–µ—à –ø—Ä–µ–≤—å—é
   */
  clearCache(): void {
    console.log('üßπ THUMBNAIL: Clearing all cached thumbnails');
    this.cache.clear?.();
  }
}

// Factory –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è SlideThumbnailService –∑ default implementations
export function createSlideThumbnailService(slideService?: SlideService): SlideThumbnailService {
  const generator = new DefaultThumbnailGenerator();
  const cache = new MemoryThumbnailCache();
  const persistence = new DatabaseThumbnailPersistence(slideService || new SlideService());

  return new SlideThumbnailService(generator, cache, persistence);
}

// Singleton instance –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–æ –≤—Å—å–æ–º—É –¥–æ–¥–∞—Ç–∫—É
let thumbnailServiceInstance: SlideThumbnailService | null = null;

export function getSlideThumbnailService(): SlideThumbnailService {
  if (!thumbnailServiceInstance) {
    thumbnailServiceInstance = createSlideThumbnailService();
  }
  return thumbnailServiceInstance;
} 