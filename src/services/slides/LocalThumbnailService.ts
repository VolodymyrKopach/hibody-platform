import { generateSlideThumbnail, generateFallbackPreview, SlidePreviewOptions } from '@/utils/slidePreview';
import { createClient } from '@/lib/supabase/client';

export interface ThumbnailOptions {
  quality?: number;
  background?: string;
  compress?: boolean;
  embedFonts?: boolean;
  fast?: boolean;
}

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è thumbnail'—ñ–≤
export interface ILocalThumbnailStorage {
  // –õ–æ–∫–∞–ª—å–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó (–≤ –ø–∞–º'—è—Ç—ñ)
  get(slideId: string): string | null;
  set(slideId: string, thumbnailBase64: string): void;
  has(slideId: string): boolean;
  delete(slideId: string): void;
  getAll(): Record<string, string>;
  clear(): void;
  
  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è
  generateThumbnail(slideId: string, htmlContent: string, options?: ThumbnailOptions): Promise<string>;
  
  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ Storage –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó
  uploadToStorage(slideId: string, lessonId: string): Promise<string | null>;
  uploadAllToStorage(lessonId: string, slideIds: string[]): Promise<Record<string, string>>;
}

// –õ–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ thumbnail'—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –≤ –ø–∞–º'—è—Ç—ñ –ø–æ–∫–∏ —Ä–µ–¥–∞–≥—É—î–º–æ)
export class LocalThumbnailStorage implements ILocalThumbnailStorage {
  private memoryCache = new Map<string, string>();
  private generationInProgress = new Set<string>();

  constructor() {
    console.log('üì¶ LOCAL THUMBNAIL: –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–µ —Å—Ö–æ–≤–∏—â–µ thumbnail\'—ñ–≤');
  }

  // === –õ–û–ö–ê–õ–¨–ù–Ü –û–ü–ï–†–ê–¶–Ü–á ===

  get(slideId: string): string | null {
    const thumbnail = this.memoryCache.get(slideId) || null;
    if (thumbnail) {
      console.log('‚ö° LOCAL THUMBNAIL: –ó–Ω–∞–π–¥–µ–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫–µ—à—ñ:', slideId);
    }
    return thumbnail;
  }

  set(slideId: string, thumbnailBase64: string): void {
    this.memoryCache.set(slideId, thumbnailBase64);
    console.log('üíæ LOCAL THUMBNAIL: –ó–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', slideId, `(${Math.round(thumbnailBase64.length / 1024)}KB)`);
  }

  has(slideId: string): boolean {
    return this.memoryCache.has(slideId);
  }

  delete(slideId: string): void {
    const deleted = this.memoryCache.delete(slideId);
    if (deleted) {
      console.log('üóëÔ∏è LOCAL THUMBNAIL: –í–∏–¥–∞–ª–µ–Ω–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–µ—à—É:', slideId);
    }
  }

  getAll(): Record<string, string> {
    const all: Record<string, string> = {};
    this.memoryCache.forEach((thumbnail, slideId) => {
      all[slideId] = thumbnail;
    });
    console.log('üìã LOCAL THUMBNAIL: –û—Ç—Ä–∏–º–∞–Ω–æ –≤—Å—ñ –ª–æ–∫–∞–ª—å–Ω—ñ thumbnail\'–∏:', Object.keys(all));
    return all;
  }

  clear(): void {
    const count = this.memoryCache.size;
    this.memoryCache.clear();
    console.log(`üßπ LOCAL THUMBNAIL: –û—á–∏—â–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à (${count} thumbnail'—ñ–≤)`);
  }

  // === –ì–ï–ù–ï–†–ê–¶–Ü–Ø THUMBNAIL'–Ü–í ===

  async generateThumbnail(slideId: string, htmlContent: string, options: ThumbnailOptions = {}): Promise<string> {
    console.log('üé® LOCAL THUMBNAIL: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è thumbnail –¥–ª—è —Å–ª–∞–π–¥—É:', slideId);

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è
    if (this.generationInProgress.has(slideId)) {
      console.log('‚è≥ LOCAL THUMBNAIL: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –¥–ª—è —Å–ª–∞–π–¥—É:', slideId);
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∞–±–æ fallback
      return this.get(slideId) || generateFallbackPreview(options);
    }

    this.generationInProgress.add(slideId);

    try {
      // Default options optimized for chat thumbnails (dimensions are hardcoded in generateSlideThumbnail)
      const defaultOptions: SlidePreviewOptions = {
        quality: 0.85,
        background: '#ffffff',
        compress: true,
        embedFonts: false,
        fast: true,
        ...options
      };

      // Generate thumbnail using new snapDOM system (1600√ó1200 ‚Üí 400√ó300 WebP)
      const thumbnailBase64 = await generateSlideThumbnail(htmlContent, defaultOptions);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
      this.set(slideId, thumbnailBase64);
      
      console.log('‚úÖ LOCAL THUMBNAIL: Thumbnail –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', slideId);
      return thumbnailBase64;

    } catch (error) {
      console.warn('‚ö†Ô∏è LOCAL THUMBNAIL: –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó, —Å—Ç–≤–æ—Ä—é—î–º–æ fallback:', error);
      const fallbackThumbnail = generateFallbackPreview({
        quality: 0.85,
        background: '#ffffff',
        ...options
      });
      this.set(slideId, fallbackThumbnail);
      return fallbackThumbnail;
    } finally {
      this.generationInProgress.delete(slideId);
    }
  }

  // === –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –í SUPABASE STORAGE ===

  async uploadToStorage(slideId: string, lessonId: string): Promise<string | null> {
    console.log('‚òÅÔ∏è LOCAL THUMBNAIL: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ Storage:', slideId, '–¥–ª—è —É—Ä–æ–∫—É:', lessonId);

    const thumbnailBase64 = this.get(slideId);
    if (!thumbnailBase64) {
      console.warn('‚ö†Ô∏è LOCAL THUMBNAIL: –ù–µ–º–∞—î –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ thumbnail –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', slideId);
      return null;
    }

    try {
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ base64 –≤ Blob
      const response = await fetch(thumbnailBase64);
      const blob = await response.blob();

      // –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É
      const fileName = `${slideId}_${Date.now()}.png`;
      const filePath = `lessons/${lessonId}/thumbnails/${fileName}`;

      // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤ Supabase Storage
      const supabase = createClient();
      const { data, error } = await supabase.storage
        .from('lesson-assets')
        .upload(filePath, blob, {
          contentType: 'image/png',
          upsert: true // –ü–µ—Ä–µ–∑–∞–ø–∏—Å—É—î–º–æ —è–∫—â–æ —Ñ–∞–π–ª —ñ—Å–Ω—É—î
        });

      if (error) {
        console.error('‚ùå LOCAL THUMBNAIL: –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ Storage:', error);
        return null;
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ –ø—É–±–ª—ñ—á–Ω–∏–π URL
      const { data: urlData } = supabase.storage
        .from('lesson-assets')
        .getPublicUrl(filePath);

      const publicUrl = urlData.publicUrl;
      console.log('‚úÖ LOCAL THUMBNAIL: –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤ Storage:', publicUrl);
      
      return publicUrl;

    } catch (error) {
      console.error('‚ùå LOCAL THUMBNAIL: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ Storage:', error);
      return null;
    }
  }

  async uploadAllToStorage(lessonId: string, slideIds: string[]): Promise<Record<string, string>> {
    console.log('‚òÅÔ∏è LOCAL THUMBNAIL: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö thumbnail\'—ñ–≤ –≤ Storage –¥–ª—è —É—Ä–æ–∫—É:', lessonId);
    console.log('üìã LOCAL THUMBNAIL: –°–ª–∞–π–¥–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', slideIds);

    const results: Record<string, string> = {};
    const uploadPromises = slideIds.map(async (slideId) => {
      const storageUrl = await this.uploadToStorage(slideId, lessonId);
      if (storageUrl) {
        results[slideId] = storageUrl;
      }
      return { slideId, storageUrl };
    });

    try {
      const uploadResults = await Promise.all(uploadPromises);
      
      console.log('üìä LOCAL THUMBNAIL: –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', {
        total: slideIds.length,
        successful: Object.keys(results).length,
        failed: slideIds.length - Object.keys(results).length,
        results: uploadResults
      });

      return results;
    } catch (error) {
      console.error('‚ùå LOCAL THUMBNAIL: –ü–æ–º–∏–ª–∫–∞ –º–∞—Å–æ–≤–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:', error);
      return results; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —á–∞—Å—Ç–∫–æ–≤—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    }
  }
}

// Singleton instance
let localThumbnailStorage: LocalThumbnailStorage | null = null;

export function getLocalThumbnailStorage(): LocalThumbnailStorage {
  if (!localThumbnailStorage) {
    localThumbnailStorage = new LocalThumbnailStorage();
  }
  return localThumbnailStorage;
}

// LocalThumbnailStorage –≤–∂–µ –µ–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω–∏–π –≤–∏—â–µ 