import { IIntentDetectionService, IntentDetectionResult, UserIntent, IntentParameters } from './IIntentDetectionService';

// Extended interface for enhanced intent detection with data validation
export interface EnhancedIntentDetectionResult extends IntentDetectionResult {
  isDataSufficient: boolean;
  missingData: string[];
  suggestedQuestion?: string;
}

// Enhanced Claude Haiku service for intent detection with data validation
export class ClaudeHaikuIntentService implements IIntentDetectionService {
  private readonly apiKey: string;
  private readonly apiUrl: string = 'https://api.anthropic.com/v1/messages';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  async detectIntent(message: string, conversationHistory?: any): Promise<EnhancedIntentDetectionResult> {
    if (!this.apiKey) {
      throw new Error('Claude API key not configured');
    }

    const prompt = this.buildHaikuPrompt(message, conversationHistory);

    try {
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': this.apiKey,
          'anthropic-version': '2023-06-01',
        },
        body: JSON.stringify({
          model: 'claude-3-haiku-20240307', // Fast intent detection
          max_tokens: 1000,
          temperature: 0.1,
          messages: [{ role: 'user', content: prompt }]
        })
      });

      if (!response.ok) {
        throw new Error(`Claude API error: ${response.statusText}`);
      }

      const data = await response.json();
      const content = data.content[0]?.text;

      if (!content) {
        throw new Error('No content in Claude response');
      }

      return this.parseHaikuResponse(content, message);
    } catch (error) {
      console.error('Claude Haiku intent detection error:', error);
      throw error;
    }
  }

  private buildHaikuPrompt(message: string, conversationHistory?: any): string {
    // –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
    let contextInfo = '';
    if (conversationHistory) {
      contextInfo = `
–ö–û–ù–¢–ï–ö–°–¢ –†–û–ó–ú–û–í–ò:
- –ö—Ä–æ–∫: ${conversationHistory.step || '–Ω–µ–≤—ñ–¥–æ–º–æ'}
- –ü–æ—Ç–æ—á–Ω–∏–π —É—Ä–æ–∫: ${conversationHistory.currentLesson ? '–¢–ê–ö (id: ' + conversationHistory.currentLesson.id + ')' : '–ù–Ü'}
- –¢–µ–º–∞ —É—Ä–æ–∫—É: ${conversationHistory.lessonTopic || '–Ω–µ –≤–∫–∞–∑–∞–Ω–∞'}
- –í—ñ–∫ –¥—ñ—Ç–µ–π: ${conversationHistory.lessonAge || '–Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π'}
- –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ —Å–ª–∞–π–¥–∏: ${conversationHistory.generatedSlides?.length || 0}
- –Ñ –ø–ª–∞–Ω —É—Ä–æ–∫—É: ${conversationHistory.planningResult ? '–¢–ê–ö' : '–ù–Ü'}

–í–ê–ñ–õ–ò–í–û: –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω–∏–π —É—Ä–æ–∫ —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ —Å–ª–∞–π–¥–∏ ("–Ω–∞—Å—Ç—É–ø–Ω–∏–π", "—Ç—Ä–µ—Ç—ñ–π", "—â–µ —Å–ª–∞–π–¥", "–¥–∞–≤–∞–π"), —Ü–µ –º–∞–π–∂–µ –∑–∞–≤–∂–¥–∏ CREATE_NEW_SLIDE!
`;
    }

    return `–í–∏ - –µ–∫—Å–ø–µ—Ä—Ç–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–∞–º—ñ—Ä—ñ–≤ –¥–ª—è –æ—Å–≤—ñ—Ç–Ω—å–æ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ HiBody.

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û: –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –¢–Ü–õ–¨–ö–ò –≤–∞–ª—ñ–¥–Ω–∏–º JSON-–æ–±'—î–∫—Ç–æ–º. –ù—ñ—è–∫–æ–≥–æ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É!

${contextInfo}

–ó–ê–í–î–ê–ù–ù–Ø: –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–æ–∑–º–æ–≤–∏, –ø–æ—Ç—ñ–º:
1. –í–∏–∑–Ω–∞—á—Ç–µ –Ω–∞–º—ñ—Ä (intent)
2. –í–∏—Ç—è–≥–Ω—ñ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
3. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –≤–∏—Å—Ç–∞—á–∞—î –¥–∞–Ω–∏—Ö
4. –Ø–∫—â–æ –ù–ï –≤–∏—Å—Ç–∞—á–∞—î - –≤–∫–∞–∂—ñ—Ç—å —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–ø–∏—Ç–∞—Ç–∏

–Ü–ù–¢–ï–ù–¢–ò (—Ç–æ—á–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è):
- CREATE_LESSON: —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫ (–ø–æ—Ç—Ä–µ–±—É—î: topic, age)
- GENERATE_PLAN: —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–ª–∞–Ω —É—Ä–æ–∫—É  
- EDIT_PLAN: –∑–º—ñ–Ω–∏—Ç–∏/–ø–æ–∫—Ä–∞—â–∏—Ç–∏ –ø–ª–∞–Ω —É—Ä–æ–∫—É (—Ñ—Ä–∞–∑–∏: "–ø–æ–∫—Ä–∞—â –ø–ª–∞–Ω", "–∑–º—ñ–Ω –ø–ª–∞–Ω", "–æ–Ω–æ–≤–∏—Ç–∏ –ø–ª–∞–Ω")
- CREATE_SLIDE: —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ª–∞–π–¥
- CREATE_NEW_SLIDE: –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Å–ª–∞–π–¥
- REGENERATE_SLIDE: –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–ª–∞–π–¥
- EDIT_HTML_INLINE: —Ç–µ–∫—Å—Ç–æ–≤—ñ –∑–º—ñ–Ω–∏ –≤ HTML
- EDIT_SLIDE: –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–ª–∞–π–¥
- IMPROVE_HTML: –∑–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è HTML –∫–æ–¥—É
- FREE_CHAT: –∑–∞–≥–∞–ª—å–Ω–∞ —Ä–æ–∑–º–æ–≤–∞, –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è, –ø–∏—Ç–∞–Ω–Ω—è –Ω–µ –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ —É—Ä–æ–∫–∞–º–∏
- HELP: –¥–æ–ø–æ–º–æ–≥–∞
- EXPORT: –µ–∫—Å–ø–æ—Ä—Ç/–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
- PREVIEW: –ø–µ—Ä–µ–≥–ª—è–¥

–í–ê–ñ–õ–ò–í–û: –§—Ä–∞–∑–∏ —Ç–∏–ø—É "—Å—Ö–≤–∞–ª–∏—Ç–∏ –ø–ª–∞–Ω", "–ø–æ—á–∞—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é —Å–ª–∞–π–¥—ñ–≤", "–ø–µ—Ä–µ–π—Ç–∏ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è" –ù–ï —î —ñ–Ω—Ç–µ–Ω—Ç–∞–º–∏ - —Ü–µ –¥—ñ—ó (actions) —è–∫—ñ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –æ–∫—Ä–µ–º–æ!

–ö–†–ò–¢–ï–†–Ü–á –î–û–°–¢–ê–¢–ù–û–°–¢–Ü –î–ê–ù–ò–•:
- CREATE_LESSON: –û–ë–û–í'–Ø–ó–ö–û–í–û topic + age
- CREATE_SLIDE: –û–ë–û–í'–Ø–ó–ö–û–í–û topic
- EDIT_SLIDE: –û–ë–û–í'–Ø–ó–ö–û–í–û slideNumber

–ü–†–ò–ö–õ–ê–î–ò –í–Ü–î–ü–û–í–Ü–î–ï–ô:

–î–ª—è "—Å—Ç–≤–æ—Ä–∏ —É—Ä–æ–∫ –ø—Ä–æ –¥–∏–Ω–æ–∑–∞–≤—Ä—ñ–≤ –¥–ª—è –¥—ñ—Ç–µ–π 8 —Ä–æ–∫—ñ–≤":
{
  "intent": "CREATE_LESSON",
  "confidence": 0.95,
  "parameters": {
    "topic": "–¥–∏–Ω–æ–∑–∞–≤—Ä–∏",
    "age": "8 —Ä–æ–∫—ñ–≤",
    "slideNumber": null
  },
  "language": "uk",
  "reasoning": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫",
  "isDataSufficient": true,
  "missingData": [],
  "suggestedQuestion": null
}

–î–ª—è "–∑—Ä–æ–±–∏ —É—Ä–æ–∫ –ø—Ä–æ –∫–æ—Å–º–æ—Å":
{
  "intent": "CREATE_LESSON",
  "confidence": 0.8,
  "parameters": {
    "topic": "–∫–æ—Å–º–æ—Å",
    "age": null,
    "slideNumber": null
  },
  "language": "uk",
  "reasoning": "–¢–µ–º–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–∞, –∞–ª–µ –≤—ñ–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ",
  "isDataSufficient": false,
  "missingData": ["age"],
  "suggestedQuestion": "–î–ª—è —è–∫–æ–≥–æ –≤—ñ–∫—É –¥—ñ—Ç–µ–π —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫ –ø—Ä–æ –∫–æ—Å–º–æ—Å? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 6 —Ä–æ–∫—ñ–≤, 8-10 —Ä–æ–∫—ñ–≤)"
}

–î–ª—è "–ø–æ–∫—Ä–∞—â –ø–ª–∞–Ω":
{
  "intent": "EDIT_PLAN",
  "confidence": 0.9,
  "parameters": {
    "topic": null,
    "age": null,
    "slideNumber": null
  },
  "language": "uk",
  "reasoning": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–ª–∞–Ω —É—Ä–æ–∫—É",
  "isDataSufficient": true,
  "missingData": [],
  "suggestedQuestion": null
}

–î–ª—è "–ø—Ä–∏–≤—ñ—Ç, —è–∫ —Å–ø—Ä–∞–≤–∏":
{
  "intent": "FREE_CHAT",
  "confidence": 0.9,
  "parameters": {
    "topic": null,
    "age": null,
    "slideNumber": null
  },
  "language": "uk",
  "reasoning": "–ó–∞–≥–∞–ª—å–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è",
  "isDataSufficient": true,
  "missingData": [],
  "suggestedQuestion": null
}

–ü–†–ò–ö–õ–ê–î–ò –ó –ö–û–ù–¢–ï–ö–°–¢–û–ú:

–î–ª—è "–¥–∞–≤–∞–π —Ç–µ–ø–µ—Ä —Ç—Ä–µ—Ç—ñ–π —Å–ª–∞–π–¥" (–∫–æ–ª–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —É—Ä–æ–∫):
{
  "intent": "CREATE_NEW_SLIDE",
  "confidence": 0.9,
  "parameters": {
    "topic": null,
    "age": null,
    "slideNumber": 3
  },
  "language": "uk",
  "reasoning": "–£ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥",
  "isDataSufficient": true,
  "missingData": [],
  "suggestedQuestion": null
}

–î–ª—è "–Ω–∞—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥" (–∫–æ–ª–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —É—Ä–æ–∫):
{
  "intent": "CREATE_NEW_SLIDE",
  "confidence": 0.95,
  "parameters": {
    "topic": null,
    "age": null,
    "slideNumber": null
  },
  "language": "uk",
  "reasoning": "–£ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–∫—É - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–∞–π–¥—É",
  "isDataSufficient": true,
  "missingData": [],
  "suggestedQuestion": null
}

–ü–û–í–ï–†–¢–ê–ô–¢–ï –¢–Ü–õ–¨–ö–ò JSON! –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: "${message}"`;
  }

  private parseHaikuResponse(content: string, originalMessage: string): EnhancedIntentDetectionResult {
    console.log('üîç Raw Claude response:', content);
    
    try {
      // Try to extract JSON from the response
      let jsonString = content;
      
      // Look for JSON block in markdown code fence
      const codeBlockMatch = content.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/);
      if (codeBlockMatch) {
        jsonString = codeBlockMatch[1];
        console.log('üì¶ Extracted from code block:', jsonString);
      } else {
        // Look for any JSON object
        const jsonMatch = content.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
          jsonString = jsonMatch[0];
          console.log('üì¶ Extracted JSON:', jsonString);
        }
      }

      const result = JSON.parse(jsonString);
      console.log('‚úÖ Parsed result:', result);

      // Map Claude's response format to our enum values
      const intentMapping: { [key: string]: UserIntent } = {
        'CREATE_LESSON': UserIntent.CREATE_LESSON,
        'GENERATE_PLAN': UserIntent.GENERATE_PLAN,
        'EDIT_PLAN': UserIntent.EDIT_PLAN,
        'CREATE_SLIDE': UserIntent.CREATE_SLIDE,
        'CREATE_NEW_SLIDE': UserIntent.CREATE_NEW_SLIDE,
        'REGENERATE_SLIDE': UserIntent.REGENERATE_SLIDE,
        'EDIT_HTML_INLINE': UserIntent.EDIT_HTML_INLINE,
        'EDIT_SLIDE': UserIntent.EDIT_SLIDE,
        'IMPROVE_HTML': UserIntent.IMPROVE_HTML,
        'FREE_CHAT': UserIntent.FREE_CHAT,
        'HELP': UserIntent.HELP,
        'EXPORT': UserIntent.EXPORT,
        'PREVIEW': UserIntent.PREVIEW
      };

      const mappedIntent = intentMapping[result.intent] || UserIntent.FREE_CHAT;
      console.log('üéØ Mapped intent:', result.intent, '‚Üí', mappedIntent);

      return {
        intent: mappedIntent,
        confidence: result.confidence || 0.5,
        parameters: {
          ...result.parameters,
          rawMessage: originalMessage
        },
        language: result.language || 'other',
        reasoning: result.reasoning || 'AI-based detection',
        isDataSufficient: result.isDataSufficient ?? true,
        missingData: result.missingData || [],
        suggestedQuestion: result.suggestedQuestion
      };
    } catch (parseError) {
      console.error('‚ùå Failed to parse Haiku response:', parseError);
      console.error('üìù Original content:', content);
      
      // Fallback - create a basic FREE_CHAT response
      console.log('üîÑ Using fallback FREE_CHAT response');
      return {
        intent: UserIntent.FREE_CHAT,
        confidence: 0.3,
        parameters: {
          rawMessage: originalMessage
        },
        language: 'other',
        reasoning: 'Fallback due to parse error',
        isDataSufficient: true,
        missingData: [],
        suggestedQuestion: undefined
      };
    }
  }
} 