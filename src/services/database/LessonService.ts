import { createClient } from '@/lib/supabase/client'
import { 
  LessonRow, 
  LessonInsert, 
  LessonUpdate, 
  LessonWithSlides,
  LessonFilters,
  PaginationParams,
  PaginatedResult,
  UserStats
} from '@/types/database'

export class LessonService {
  private supabase = createClient()

  // =============================================
  // CRUD OPERATIONS
  // =============================================

  /**
   * –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π —É—Ä–æ–∫
   */
  async createLesson(lesson: LessonInsert): Promise<LessonRow> {
    const { data, error } = await this.supabase
      .from('lessons')
      .insert(lesson)
      .select()
      .single()

    if (error) {
      throw new Error(`Failed to create lesson: ${error.message}`)
    }

    return data
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —É—Ä–æ–∫ –∑–∞ ID
   */
  async getLessonById(id: string): Promise<LessonRow | null> {
    const { data, error } = await this.supabase
      .from('lessons')
      .select()
      .eq('id', id)
      .single()

    if (error) {
      if (error.code === 'PGRST116') {
        return null // –£—Ä–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
      }
      throw new Error(`Failed to get lesson: ${error.message}`)
    }

    return data
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —É—Ä–æ–∫ –∑ —Å–ª–∞–π–¥–∞–º–∏
   */
  async getLessonWithSlides(id: string): Promise<LessonWithSlides | null> {
    const { data, error } = await this.supabase
      .from('lessons')
      .select(`
        *,
        slides (
          *,
          slide_images (*)
        )
      `)
      .eq('id', id)
      .single()

    if (error) {
      if (error.code === 'PGRST116') {
        return null
      }
      throw new Error(`Failed to get lesson with slides: ${error.message}`)
    }

    return data as LessonWithSlides
  }

  /**
   * –û–Ω–æ–≤–∏—Ç–∏ —É—Ä–æ–∫
   */
  async updateLesson(id: string, updates: LessonUpdate): Promise<LessonRow> {
    const { data, error } = await this.supabase
      .from('lessons')
      .update(updates)
      .eq('id', id)
      .select()
      .single()

    if (error) {
      throw new Error(`Failed to update lesson: ${error.message}`)
    }

    return data
  }

  /**
   * –í–∏–¥–∞–ª–∏—Ç–∏ —É—Ä–æ–∫
   */
  async deleteLesson(id: string): Promise<void> {
    const { error } = await this.supabase
      .from('lessons')
      .delete()
      .eq('id', id)

    if (error) {
      throw new Error(`Failed to delete lesson: ${error.message}`)
    }
  }

  // =============================================
  // QUERY OPERATIONS
  // =============================================

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —É—Ä–æ–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
   */
  async getUserLessons(
    userId: string,
    filters: LessonFilters = {},
    pagination: PaginationParams = {}
  ): Promise<PaginatedResult<LessonRow>> {
    const { 
      page = 1, 
      limit = 10, 
      sortBy = 'created_at', 
      sortOrder = 'desc' 
    } = pagination

    let query = this.supabase
      .from('lessons')
      .select('*', { count: 'exact' })
      .eq('user_id', userId)

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
    if (filters.subject) {
      query = query.eq('subject', filters.subject)
    }
    if (filters.ageGroup) {
      query = query.eq('age_group', filters.ageGroup)
    }
    if (filters.difficulty) {
      query = query.eq('difficulty', filters.difficulty)
    }
    if (filters.status) {
      query = query.eq('status', filters.status)
    }
    if (filters.isPublic !== undefined) {
      query = query.eq('is_public', filters.isPublic)
    }
    if (filters.search) {
      query = query.or(`title.ilike.%${filters.search}%,description.ilike.%${filters.search}%`)
    }

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è
    const from = (page - 1) * limit
    const to = from + limit - 1

    const { data, error, count } = await query
      .order(sortBy, { ascending: sortOrder === 'asc' })
      .range(from, to)

    if (error) {
      throw new Error(`Failed to get user lessons: ${error.message}`)
    }

    return {
      data: data || [],
      total: count || 0,
      page,
      limit,
      totalPages: Math.ceil((count || 0) / limit)
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—É–±–ª—ñ—á–Ω—ñ —É—Ä–æ–∫–∏
   */
  async getPublicLessons(
    filters: LessonFilters = {},
    pagination: PaginationParams = {}
  ): Promise<PaginatedResult<LessonRow>> {
    const { 
      page = 1, 
      limit = 10, 
      sortBy = 'created_at', 
      sortOrder = 'desc' 
    } = pagination

    let query = this.supabase
      .from('lessons')
      .select('*', { count: 'exact' })
      .eq('is_public', true)
      .eq('status', 'published')

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏
    if (filters.subject) {
      query = query.eq('subject', filters.subject)
    }
    if (filters.ageGroup) {
      query = query.eq('age_group', filters.ageGroup)
    }
    if (filters.difficulty) {
      query = query.eq('difficulty', filters.difficulty)
    }
    if (filters.search) {
      query = query.or(`title.ilike.%${filters.search}%,description.ilike.%${filters.search}%`)
    }

    // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è
    const from = (page - 1) * limit
    const to = from + limit - 1

    const { data, error, count } = await query
      .order(sortBy, { ascending: sortOrder === 'asc' })
      .range(from, to)

    if (error) {
      throw new Error(`Failed to get public lessons: ${error.message}`)
    }

    return {
      data: data || [],
      total: count || 0,
      page,
      limit,
      totalPages: Math.ceil((count || 0) / limit)
    }
  }

  /**
   * –ü–æ—à—É–∫ —É—Ä–æ–∫—ñ–≤
   */
  async searchLessons(
    query: string,
    filters: LessonFilters = {},
    pagination: PaginationParams = {}
  ): Promise<PaginatedResult<LessonRow>> {
    return this.getPublicLessons(
      { ...filters, search: query },
      pagination
    )
  }

  // =============================================
  // STATISTICS
  // =============================================

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async getUserStats(userId: string): Promise<UserStats> {
    const { data: lessons, error } = await this.supabase
      .from('lessons')
      .select('id, status, views, rating')
      .eq('user_id', userId)

    if (error) {
      throw new Error(`Failed to get user stats: ${error.message}`)
    }

    const { data: slides, error: slidesError } = await this.supabase
      .from('slides')
      .select('id')
      .in('lesson_id', lessons.map(l => l.id))

    if (slidesError) {
      throw new Error(`Failed to get slides count: ${slidesError.message}`)
    }

    const totalLessons = lessons.length
    const publishedLessons = lessons.filter((l: any) => l.status === 'published').length
    const totalSlides = slides.length
    const totalViews = lessons.reduce((sum: number, l: any) => sum + l.views, 0)
    const averageRating = lessons.length > 0 
      ? lessons.reduce((sum: number, l: any) => sum + l.rating, 0) / lessons.length 
      : 0

    return {
      totalLessons,
      publishedLessons,
      totalSlides,
      totalViews,
      averageRating: Math.round(averageRating * 10) / 10
    }
  }

  // =============================================
  // UTILITY METHODS
  // =============================================

  /**
   * –ó–±—ñ–ª—å—à–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ —É—Ä–æ–∫—É
   */
  async incrementViews(id: string): Promise<void> {
    const { error } = await this.supabase
      .rpc('increment_lesson_views', { lesson_id: id })

    if (error) {
      throw new Error(`Failed to increment views: ${error.message}`)
    }
  }

  /**
   * –î—É–±–ª—é–≤–∞—Ç–∏ —É—Ä–æ–∫
   */
  async duplicateLesson(id: string, userId: string): Promise<LessonRow> {
    // –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —É—Ä–æ–∫ –∑ —Å–ª–∞–π–¥–∞–º–∏
    const originalLesson = await this.getLessonWithSlides(id)
    if (!originalLesson) {
      throw new Error('Lesson not found')
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ø—ñ—é —É—Ä–æ–∫—É
    const { slides, id: originalId, created_at, updated_at, views, rating, completion_rate, ...lessonData } = originalLesson
    const newLesson = await this.createLesson({
      ...lessonData,
      user_id: userId,
      title: `${lessonData.title} (Copy)`,
      status: 'draft',
      is_public: false
    })

    // –î—É–±–ª—é—î–º–æ —Å–ª–∞–π–¥–∏
    if (slides && slides.length > 0) {
      // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ SlideService –¥–∏–Ω–∞–º—ñ—á–Ω–æ, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ —Ü–∏–∫–ª—ñ—á–Ω–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
      const { SlideService } = await import('./SlideService')
      const slideService = new SlideService()
      for (const slide of slides) {
        const { id: slideId, lesson_id, created_at: slideCreatedAt, updated_at: slideUpdatedAt, ...slideData } = slide
        await slideService.createSlide({
          ...slideData,
          lesson_id: newLesson.id,
          slide_number: slide.slide_number
        })
      }
    }

    return newLesson
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É—Ä–æ–∫
   */
  async canCreateLesson(userId: string): Promise<boolean> {
    // –¢–ò–ú–ß–ê–°–û–í–û: –î–æ–∑–≤–æ–ª—è—î–º–æ –Ω–µ–æ–±–º–µ–∂–µ–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Ä–æ–∫—ñ–≤ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    console.log('üîß LESSON SERVICE: canCreateLesson called for user:', userId);
    console.log('üîß LESSON SERVICE: Temporarily allowing unlimited lessons for testing');
    return true;

    /* 
    // –û–†–ò–ì–Ü–ù–ê–õ–¨–ù–ê –õ–û–ì–Ü–ö–ê (–∑–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è):
    // –û—Ç—Ä–∏–º—É—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const { data: profile, error } = await this.supabase
      .from('user_profiles')
      .select('subscription_type')
      .eq('id', userId)
      .single()

    if (error) {
      console.error('‚ùå LESSON SERVICE: Failed to get user profile:', error);
      // –Ø–∫—â–æ –ø—Ä–æ—Ñ—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –±–∞–∑–æ–≤–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
      if (error.code === 'PGRST116') {
        try {
          const { data: newProfile, error: createError } = await this.supabase
            .from('user_profiles')
            .insert({
              id: userId,
              email: 'temp@example.com', // –¢–∏–º—á–∞—Å–æ–≤–∏–π email
              subscription_type: 'free'
            })
            .select()
            .single();
          
          if (createError) {
            console.error('‚ùå LESSON SERVICE: Failed to create profile:', createError);
            return false;
          }
          
          console.log('‚úÖ LESSON SERVICE: Created new profile for user:', userId);
        } catch (createError) {
          console.error('‚ùå LESSON SERVICE: Error creating profile:', createError);
          return false;
        }
      } else {
        throw new Error(`Failed to get user profile: ${error.message}`)
      }
    }

    // –†–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Ä–æ–∫—ñ–≤
    const { count, error: countError } = await this.supabase
      .from('lessons')
      .select('*', { count: 'exact', head: true })
      .eq('user_id', userId)

    if (countError) {
      throw new Error(`Failed to count lessons: ${countError.message}`)
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç–∏
    const limits: Record<string, number> = {
      free: 5,
      professional: 50,
      premium: Infinity
    }

    const subscriptionType = profile?.subscription_type || 'free';
    const currentCount = count || 0;
    const limit = limits[subscriptionType];
    
    console.log('üìä LESSON SERVICE: Subscription check:', {
      userId,
      subscriptionType,
      currentCount,
      limit,
      canCreate: currentCount < limit
    });

    return currentCount < limit;
    */
  }
}

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ singleton instance
export const lessonService = new LessonService() 