// Simple service for slide editing - just send HTML to Claude with instruction
export class SimpleEditService {
  private readonly apiKey: string;
  private readonly apiUrl: string = 'https://api.anthropic.com/v1/messages';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–≥—É—î —Å–ª–∞–π–¥ - –Ω–∞–¥—Å–∏–ª–∞—î HTML –¥–æ Claude –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é
   */
  async editSlide(
    currentSlideHTML: string,
    userInstruction: string,
    topic: string,
    age: string
  ): Promise<string> {
    if (!this.apiKey) {
      throw new Error('Claude API key not configured');
    }

    // –í–∏—Ç—è–≥—É—î–º–æ base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Å—Ç–∏—Å–∫–∞—î–º–æ HTML
    const { cleanedHTML, extractedImages } = this.extractBase64Images(currentSlideHTML);
    const compressedHTML = this.compressHTML(cleanedHTML);
    
    console.log(`üìè Original: ${currentSlideHTML.length}, Cleaned: ${cleanedHTML.length}, Compressed: ${compressedHTML.length}`);
    console.log(`üñºÔ∏è Extracted ${extractedImages.length} base64 images`);

    const prompt = this.buildSimpleEditPrompt(compressedHTML, userInstruction, topic, age);

    try {
      console.log('üîß Simple slide editing with Claude...');
      
      const response = await fetch(this.apiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': this.apiKey,
          'anthropic-version': '2023-06-01',
        },
        body: JSON.stringify({
          model: 'claude-sonnet-4-20250514',
          max_tokens: 6000,
          temperature: 0.5, // –°–µ—Ä–µ–¥–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–∞–ª–∞–Ω—Å—É
          messages: [{ role: 'user', content: prompt }]
        })
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => null);
        console.error('üî• Claude Simple Edit API Error:', {
          status: response.status,
          statusText: response.statusText,
          errorData: errorData
        });
        throw new Error(`Claude API error: ${response.status} ${response.statusText} - ${errorData?.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      let content = data.content[0]?.text;

      if (!content) {
        throw new Error('No content in Claude response');
      }

      // –û—á–∏—â–∞—î–º–æ HTML –≤—ñ–¥ markdown –æ–±–≥–æ—Ä—Ç–∫–∏
      content = this.cleanHtmlFromMarkdown(content);
      
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞–º, –¥–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      const restoredContent = this.restoreBase64Images(content, extractedImages);
      
      console.log('‚úÖ Simple slide edit completed, length:', restoredContent.length);

      return restoredContent;
    } catch (error) {
      console.error('Simple edit error:', error);
      throw error;
    }
  }

  /**
   * –í–∏—Ç—è–≥—É—î base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ HTML —Ç–∞ –∑–∞–º—ñ–Ω—é—î –Ω–∞ placeholder
   */
  private extractBase64Images(html: string): { cleanedHTML: string; extractedImages: Array<{ placeholder: string; data: string }> } {
    const extractedImages: Array<{ placeholder: string; data: string }> = [];
    let imageCounter = 0;

    // –í–∏—Ç—è–≥—É—î–º–æ base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ src –∞—Ç—Ä–∏–±—É—Ç—ñ–≤
    const cleanedHTML = html.replace(
      /src="(data:image\/[^;]+;base64,[^"]+)"/g,
      (match, base64Data) => {
        const placeholder = `[BASE64_IMAGE_${imageCounter}]`;
        extractedImages.push({ placeholder, data: base64Data });
        imageCounter++;
        return `src="${placeholder}"`;
      }
    );

    // –í–∏—Ç—è–≥—É—î–º–æ base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ CSS url()
    const cleanedCSS = cleanedHTML.replace(
      /url\((data:image\/[^;]+;base64,[^)]+)\)/g,
      (match, base64Data) => {
        const placeholder = `[BASE64_CSS_${imageCounter}]`;
        extractedImages.push({ placeholder, data: base64Data });
        imageCounter++;
        return `url(${placeholder})`;
      }
    );

    return { cleanedHTML: cleanedCSS, extractedImages };
  }

  /**
   * –í—ñ–¥–Ω–æ–≤–ª—é—î base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ HTML
   */
  private restoreBase64Images(html: string, extractedImages: Array<{ placeholder: string; data: string }>): string {
    let restoredHTML = html;

    // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–æ–∂–Ω–µ –≤–∏—Ç—è–≥–Ω—É—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    extractedImages.forEach(({ placeholder, data }) => {
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≤ src –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
      restoredHTML = restoredHTML.replace(
        new RegExp(`src="${placeholder.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}"`, 'g'),
        `src="${data}"`
      );
      
      // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≤ CSS url()
      restoredHTML = restoredHTML.replace(
        new RegExp(`url\\(${placeholder.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\)`, 'g'),
        `url(${data})`
      );
    });

    return restoredHTML;
  }

  /**
   * –°—Ç–∏—Å–∫–∞—î HTML –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É
   */
  private compressHTML(html: string): string {
    return html
      // –í–∏–¥–∞–ª—è—î–º–æ HTML –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ (–æ–∫—Ä—ñ–º IMAGE_PROMPT)
      .replace(/<!--(?!.*IMAGE_PROMPT)[\s\S]*?-->/g, '')
      // –ó–∞–º—ñ–Ω—é—î–º–æ –±–∞–≥–∞—Ç–æ –ø—Ä–æ–±—ñ–ª—ñ–≤ –Ω–∞ –æ–¥–∏–Ω
      .replace(/\s+/g, ' ')
      // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –º—ñ–∂ —Ç–µ–≥–∞–º–∏
      .replace(/>\s+</g, '><')
      // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –≤ –∫—ñ–Ω—Ü—ñ —Ä—è–¥–∫—ñ–≤
      .replace(/^\s+|\s+$/gm, '')
      // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
      .replace(/\n\s*\n/g, '\n')
      .trim();
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î –ø—Ä–æ—Å—Ç–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
   */
  private buildSimpleEditPrompt(
    currentSlideHTML: string, 
    userInstruction: string, 
    topic: string, 
    age: string
  ): string {
    return `–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è HTML —Å–ª–∞–π–¥—ñ–≤ –¥–ª—è –¥—ñ—Ç–µ–π.

**–ó–ê–í–î–ê–ù–ù–Ø:** –í—ñ–¥—Ä–µ–¥–∞–≥—É–π HTML —Å–ª–∞–π–¥ –∑–≥—ñ–¥–Ω–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

**–ü–û–¢–û–ß–ù–ò–ô HTML –°–õ–ê–ô–î–£:**
${currentSlideHTML}

**–Ü–ù–°–¢–†–£–ö–¶–Ü–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê:**
${userInstruction}

**–ö–û–ù–¢–ï–ö–°–¢:**
- –¢–µ–º–∞ —É—Ä–æ–∫—É: ${topic}
- –í—ñ–∫ –¥—ñ—Ç–µ–π: ${age}

**–ü–†–ê–í–ò–õ–ê:**
1. –í–∏–∫–æ–Ω–∞–π —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫–æ–º–æ–≥–∞ —Ç–æ—á–Ω—ñ—à–µ
2. –ó–±–µ—Ä—ñ–≥–∞–π —Ñ–æ—Ä–º–∞—Ç HTML –¥–æ–∫—É–º–µ–Ω—Ç–∞ (DOCTYPE, html, head, body)
3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —è—Å–∫—Ä–∞–≤—ñ –∫–æ–ª—å–æ—Ä–∏ —Ç–∞ –¥–∏—Ç—è—á–∏–π –¥–∏–∑–∞–π–Ω
4. –ó–±–µ—Ä—ñ–≥–∞–π —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ —è–∫—â–æ –≤–æ–Ω–∏ —î
5. ‚ö†Ô∏è –í–ê–ñ–õ–ò–í–û –î–õ–Ø –ó–û–ë–†–ê–ñ–ï–ù–¨: –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–º—ñ–Ω–∏—Ç–∏ –∞–±–æ –¥–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π IMAGE_PROMPT –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
6. üîÑ PLACEHOLDER'–ò: –Ø–∫—â–æ –±–∞—á–∏—à [BASE64_IMAGE_X] –∞–±–æ [BASE64_CSS_X] - —Ü–µ —Ç–∏–º—á–∞—Å–æ–≤—ñ placeholder'–∏, –ù–ï –≤–∏–¥–∞–ª—è–π —ó—Ö

**–†–û–ë–û–¢–ê –ó –ó–û–ë–†–ê–ñ–ï–ù–ù–Ø–ú–ò:**
- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å –∑–∞–º—ñ–Ω–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –ù–ï –≤–∏–¥–∞–ª—è–π —ñ—Å–Ω—É—é—á—ñ img —Ç–µ–≥–∏
- –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ, –∑–∞–º—ñ–Ω–∏ img —Ç–µ–≥ –Ω–∞ IMAGE_PROMPT –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ –Ω–æ–≤–∏–º –æ–ø–∏—Å–æ–º
- –ü—Ä–∏–∫–ª–∞–¥ –∑–∞–º—ñ–Ω–∏: img —Ç–µ–≥ ‚Üí IMAGE_PROMPT –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ –Ω–æ–≤–∏–º –æ–ø–∏—Å–æ–º
- –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å –¥–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —Å—Ç–≤–æ—Ä–∏ –Ω–æ–≤–∏–π IMAGE_PROMPT –∫–æ–º–µ–Ω—Ç–∞—Ä
- ‚ö†Ô∏è PLACEHOLDER'–ò: –Ø–∫—â–æ –±–∞—á–∏—à src="[BASE64_IMAGE_X]" - —Ü–µ —Ç–∏–º—á–∞—Å–æ–≤—ñ placeholder'–∏, –∑–±–µ—Ä—ñ–≥–∞–π —ó—Ö —è–∫ —î

**–§–û–†–ú–ê–¢ IMAGE_PROMPT:**
<!-- IMAGE_PROMPT: "–æ–ø–∏—Å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é" WIDTH: —à–∏—Ä–∏–Ω–∞ HEIGHT: –≤–∏—Å–æ—Ç–∞ -->

**–í–ò–ú–û–ì–ò –î–û –ó–û–ë–†–ê–ñ–ï–ù–¨:**
- –ü—Ä–æ–º–ø—Ç –û–ë–û–í'–Ø–ó–ö–û–í–û –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é –º–æ–≤–æ—é
- –†–æ–∑–º—ñ—Ä–∏ –∫—Ä–∞—Ç–Ω—ñ 16 (512x384, 640x480, 768x576, 1024x768)
- –°—Ç–∏–ª—å: cartoon, educational, child-friendly, bright colors
- –î–ª—è –¥–∏–Ω–æ–∑–∞–≤—Ä—ñ–≤: "cartoon dinosaur [–Ω–∞–∑–≤–∞], educational illustration for children, bright colors, friendly style"

**–°–ü–ï–¶–Ü–ê–õ–¨–ù–Ü –Ü–ù–°–¢–†–£–ö–¶–Ü–á –î–õ–Ø –ó–ê–ú–Ü–ù–ò –ó–û–ë–†–ê–ñ–ï–ù–¨:**
–Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—Ä–æ—Å–∏—Ç—å –∑–∞–º—ñ–Ω–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "–∑–∞–º—ñ–Ω–∏ —Ç–µ—Ä–∞–Ω–æ–∑–∞–≤—Ä–∞ –Ω–∞ –¥–∏–ø–ª–æ–¥–æ–∫–∞"):
1. –ó–Ω–∞–π–¥–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π img —Ç–µ–≥ –≤ HTML
2. –ó–∞–º—ñ–Ω–∏ –π–æ–≥–æ –Ω–∞ IMAGE_PROMPT –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ –Ω–æ–≤–∏–º –æ–ø–∏—Å–æ–º
3. –ü—Ä–∏–∫–ª–∞–¥: —è–∫—â–æ —Ç—Ä–µ–±–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ —Ç–µ—Ä–∞–Ω–æ–∑–∞–≤—Ä–∞ –Ω–∞ –¥–∏–ø–ª–æ–¥–æ–∫–∞, —Å—Ç–≤–æ—Ä–∏:
   <!-- IMAGE_PROMPT: "cartoon diplodocus dinosaur, educational illustration for children, bright colors, friendly style, prehistoric scene" WIDTH: 640 HEIGHT: 480 -->

**–í–Ü–î–ü–û–í–Ü–î–¨:**
–ü–æ–≤–µ—Ä–Ω–∏ –¢–Ü–õ–¨–ö–ò –æ–Ω–æ–≤–ª–µ–Ω–∏–π HTML –∫–æ–¥ –±–µ–∑ –±—É–¥—å-—è–∫–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å –∞–±–æ markdown –æ–±–≥–æ—Ä—Ç–∫–∏.
–ö–æ–¥ –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ "<!DOCTYPE html>" —ñ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—è "</html>".`;
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑—É—î –∑–º—ñ–Ω–∏ –º—ñ–∂ —Å—Ç–∞—Ä–∏–º —Ç–∞ –Ω–æ–≤–∏–º —Å–ª–∞–π–¥–æ–º
   */
  analyzeChanges(oldHTML: string, newHTML: string, instruction: string): string[] {
    const changes: string[] = [];
    
    try {
      // –ü—Ä–æ—Å—Ç–∏–π –∞–Ω–∞–ª—ñ–∑ –æ—Å–Ω–æ–≤–Ω–∏—Ö –∑–º—ñ–Ω
      const oldText = oldHTML.replace(/<[^>]*>/g, '').trim();
      const newText = newHTML.replace(/<[^>]*>/g, '').trim();
      
      if (oldText !== newText) {
        const lengthDiff = newText.length - oldText.length;
        if (lengthDiff > 100) {
          changes.push(`üìù –î–æ–¥–∞–Ω–æ —Ç–µ–∫—Å—Ç (+${lengthDiff} —Å–∏–º–≤–æ–ª—ñ–≤)`);
        } else if (lengthDiff < -100) {
          changes.push(`‚úÇÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç (-${Math.abs(lengthDiff)} —Å–∏–º–≤–æ–ª—ñ–≤)`);
        } else {
          changes.push('üìù –û–Ω–æ–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç');
        }
      }

      // –ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω—å
      const oldImages = (oldHTML.match(/(?:IMAGE_PROMPT|<img)/g) || []).length;
      const newImages = (newHTML.match(/(?:IMAGE_PROMPT|<img)/g) || []).length;
      
      if (newImages > oldImages) {
        changes.push(`üñºÔ∏è –î–æ–¥–∞–Ω–æ ${newImages - oldImages} –∑–æ–±—Ä–∞–∂–µ–Ω—å`);
      } else if (newImages < oldImages) {
        changes.push(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${oldImages - newImages} –∑–æ–±—Ä–∞–∂–µ–Ω—å`);
      } else if (newImages === oldImages && newImages > 0) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–º—ñ–Ω–∏–ª–∏—Å—è IMAGE_PROMPT –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
        const oldImagePrompts = (oldHTML.match(/IMAGE_PROMPT:[^>]+/g) || []).join('');
        const newImagePrompts = (newHTML.match(/IMAGE_PROMPT:[^>]+/g) || []).join('');
        
        if (oldImagePrompts !== newImagePrompts) {
          changes.push('üîÑ –ó–∞–º—ñ–Ω–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
        }
      }

      // –ê–Ω–∞–ª—ñ–∑ –∫–Ω–æ–ø–æ–∫
      const oldButtons = (oldHTML.match(/<button/g) || []).length;
      const newButtons = (newHTML.match(/<button/g) || []).length;
      
      if (newButtons > oldButtons) {
        changes.push(`üéÆ –î–æ–¥–∞–Ω–æ ${newButtons - oldButtons} –∫–Ω–æ–ø–æ–∫`);
      } else if (newButtons < oldButtons) {
        changes.push(`üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ ${oldButtons - newButtons} –∫–Ω–æ–ø–æ–∫`);
      }

      // –ê–Ω–∞–ª—ñ–∑ –∫–æ–ª—å–æ—Ä—ñ–≤
      const oldColors = (oldHTML.match(/(background|color)\s*:\s*[^;]+/g) || []).length;
      const newColors = (newHTML.match(/(background|color)\s*:\s*[^;]+/g) || []).length;
      
      if (newColors !== oldColors) {
        changes.push('üé® –û–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–ª—å–æ—Ä–æ–≤—É —Å—Ö–µ–º—É');
      }

      // –ê–Ω–∞–ª—ñ–∑ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
      const lowerInstruction = instruction.toLowerCase();
      
      if (lowerInstruction.includes('–∑–∞–≥–æ–ª–æ–≤–æ–∫') || lowerInstruction.includes('–Ω–∞–∑–≤–∞')) {
        changes.push('üìã –û–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫');
      }
      
      if (lowerInstruction.includes('–∑–∞–º—ñ–Ω') && (lowerInstruction.includes('—Ñ–æ—Ç–æ') || lowerInstruction.includes('–∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è') || lowerInstruction.includes('–∫–∞—Ä—Ç–∏–Ω–∫—É'))) {
        changes.push('üîÑ –ó–∞–º—ñ–Ω–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è');
      } else if (lowerInstruction.includes('–∑–∞–º—ñ–Ω') || lowerInstruction.includes('–∑–º—ñ–Ω–∏')) {
        changes.push('üîÑ –í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞–º—ñ–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç—É');
      }

      if (lowerInstruction.includes('–¥–æ–¥–∞–π') || lowerInstruction.includes('—Å—Ç–≤–æ—Ä–∏')) {
        changes.push('‚ûï –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç');
      }

      if (lowerInstruction.includes('–≤–∏–¥–∞–ª–∏') || lowerInstruction.includes('—É–±–µ—Ä–∏')) {
        changes.push('‚ûñ –í–∏–¥–∞–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–Ω—Ç');
      }

      // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –¥–æ–¥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∑–º—ñ–Ω—É
      if (changes.length === 0) {
        changes.push('üîÑ –°–ª–∞–π–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑–≥—ñ–¥–Ω–æ –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é');
      }

      return changes;

    } catch (error) {
      console.error('Error analyzing changes:', error);
      return ['üîÑ –°–ª–∞–π–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ'];
    }
  }

  /**
   * –û—á–∏—â–∞—î HTML –≤—ñ–¥ markdown –æ–±–≥–æ—Ä—Ç–∫–∏
   */
  private cleanHtmlFromMarkdown(content: string): string {
    // –í–∏–¥–∞–ª—è—î–º–æ markdown –æ–±–≥–æ—Ä—Ç–∫—É ```html —Ç–∞ ```
    let cleanedContent = content.replace(/^```html\s*/i, '').replace(/\s*```$/i, '');
    
    // –í–∏–¥–∞–ª—è—î–º–æ –±—É–¥—å-—è–∫—ñ —ñ–Ω—à—ñ markdown –±–ª–æ–∫–∏
    cleanedContent = cleanedContent.replace(/^```[a-zA-Z]*\s*/gm, '').replace(/\s*```$/gm, '');
    
    // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ç–∞ –∫—ñ–Ω—Ü—ñ
    cleanedContent = cleanedContent.trim();
    
    return cleanedContent;
  }
} 