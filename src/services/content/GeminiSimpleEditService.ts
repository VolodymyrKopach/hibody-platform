// Simple service for slide editing using Gemini 2.5 Flash
import { GoogleGenAI } from '@google/genai';

export class GeminiSimpleEditService {
  private client: GoogleGenAI;

  constructor() {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY environment variable is required');
    }
    // Pass the API key explicitly to the Google GenAI client
    this.client = new GoogleGenAI({ apiKey });
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–≥—É—î —Å–ª–∞–π–¥ - –Ω–∞–¥—Å–∏–ª–∞—î HTML –¥–æ Gemini –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—î—é
   */
  async editSlide(
    currentSlideHTML: string,
    userInstruction: string,
    topic: string,
    age: string
  ): Promise<string> {

    // –í–∏—Ç—è–≥—É—î–º–æ base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Å—Ç–∏—Å–∫–∞—î–º–æ HTML
    const { cleanedHTML, extractedImages } = this.extractBase64Images(currentSlideHTML);
    const compressedHTML = this.compressHTML(cleanedHTML);
    
    console.log(`üìè Original: ${currentSlideHTML.length}, Cleaned: ${cleanedHTML.length}, Compressed: ${compressedHTML.length}`);
    console.log(`üñºÔ∏è Extracted ${extractedImages.length} base64 images`);

    const prompt = this.buildSimpleEditPrompt(compressedHTML, userInstruction, topic, age);

    try {
      console.log('üîß Simple slide editing with Gemini 2.5 Flash...');
      
      const response = await this.client.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
        config: {
          thinkingConfig: {
            thinkingBudget: 0, // Disable thinking for faster generation
          },
          temperature: 0.7
        }
      });

      let editedHTML = response.text;

      if (!editedHTML) {
        throw new Error('No content in Gemini response');
      }

      // –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ markdown –æ–±–≥–æ—Ä—Ç–∫–∏
      editedHTML = this.cleanHtmlFromMarkdown(editedHTML);

      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–∑–∞–¥
      const finalHTML = this.restoreBase64Images(editedHTML, extractedImages);

      console.log(`‚úÖ Simple slide edit successful, final length: ${finalHTML.length}`);
      return finalHTML;

    } catch (error) {
      console.error('Gemini simple edit error:', error);
      throw error;
    }
  }

  private buildSimpleEditPrompt(
    compressedHTML: string,
    userInstruction: string,
    topic: string,
    age: string
  ): string {
    return `You are an expert in editing HTML slides for children. Receive an HTML slide and instruction, make precise changes.

**CURRENT HTML SLIDE:**
${compressedHTML}

**EDIT INSTRUCTION:**
${userInstruction}

**REQUIREMENTS:**
1. Make ONLY the requested changes
2. Preserve all existing functionality
3. Maintain responsive design
4. Keep child-friendly style
5. Ensure all interactions work properly

**RESPONSE:**
Provide ONLY the updated HTML code, without any explanations or comments.

**UPDATED HTML:**`;
  }

  private cleanHtmlFromMarkdown(content: string): string {
    // Remove markdown code blocks
    let cleaned = content.replace(/```html\s*/g, '').replace(/```\s*$/g, '');
    
    // Remove any remaining markdown formatting
    cleaned = cleaned.replace(/```.*$/gm, '');
    
    // Trim whitespace
    cleaned = cleaned.trim();
    
    return cleaned;
  }

  /**
   * –í–∏—Ç—è–≥—É—î base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ HTML –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É
   */
  private extractBase64Images(html: string): {
    cleanedHTML: string;
    extractedImages: Array<{ placeholder: string; data: string }>;
  } {
    const extractedImages: Array<{ placeholder: string; data: string }> = [];
    let imageCounter = 0;

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const base64ImageRegex = /src="data:image\/[^;]+;base64,[^"]+"/g;
    
    const cleanedHTML = html.replace(base64ImageRegex, (match) => {
      const placeholder = `[BASE64_IMAGE_${imageCounter}]`;
      extractedImages.push({
        placeholder,
        data: match
      });
      imageCounter++;
      return `src="${placeholder}"`;
    });

    return { cleanedHTML, extractedImages };
  }

  /**
   * –ü–æ–≤–µ—Ä—Ç–∞—î base64 –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –≤ HTML
   */
  private restoreBase64Images(html: string, extractedImages: Array<{ placeholder: string; data: string }>): string {
    let restoredHTML = html;
    
    extractedImages.forEach(({ placeholder, data }) => {
      restoredHTML = restoredHTML.replace(`src="${placeholder}"`, data);
    });

    return restoredHTML;
  }

  /**
   * –°—Ç–∏—Å–∫–∞—î HTML –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
   */
  private compressHTML(html: string): string {
    return html
      // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏ —Ç–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏
      .replace(/\s+/g, ' ')
      // –í–∏–¥–∞–ª—è—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –Ω–∞–≤–∫–æ–ª–æ —Ç–µ–≥—ñ–≤
      .replace(/>\s+</g, '><')
      // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
      .replace(/<!--.*?-->/g, '')
      // –¢—Ä–∏–º–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
      .trim();
  }

  /**
   * –ü–æ–∫—Ä–∞—â—É—î —Å–ª–∞–π–¥ –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏
   */
  async improveSlide(
    currentSlideHTML: string,
    improvementType: 'visual' | 'interactive' | 'content' | 'accessibility',
    topic: string,
    age: string
  ): Promise<string> {
    const improvements = {
      visual: '–ü–æ–∫—Ä–∞—â –¥–∏–∑–∞–π–Ω: –∑—Ä–æ–±–∏ —è—Å–∫—Ä–∞–≤—ñ—à–∏–º, –¥–æ–¥–∞–π –∫–æ–ª—å–æ—Ä–∏ —Ç–∞ –≤—ñ–∑—É–∞–ª—å–Ω—ñ –µ—Ñ–µ–∫—Ç–∏',
      interactive: '–î–æ–¥–∞–π —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ: –∫–Ω–æ–ø–∫–∏, –∞–Ω—ñ–º–∞—Ü—ñ—ó, —ñ–≥—Ä–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏',
      content: '–ü–æ–∫—Ä–∞—â –∫–æ–Ω—Ç–µ–Ω—Ç: –∑—Ä–æ–±–∏ —Ç–µ–∫—Å—Ç –∑—Ä–æ–∑—É–º—ñ–ª—ñ—à–∏–º —Ç–∞ —Ü—ñ–∫–∞–≤—ñ—à–∏–º –¥–ª—è –¥—ñ—Ç–µ–π',
      accessibility: '–ü–æ–∫—Ä–∞—â –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å: –∑–±—ñ–ª—å—à —à—Ä–∏—Ñ—Ç, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ñ—Å—Ç—å, –Ω–∞–≤—ñ–≥–∞—Ü—ñ—é'
    };

    return this.editSlide(
      currentSlideHTML,
      improvements[improvementType],
      topic,
      age
    );
  }

  /**
   * –ó–º—ñ–Ω—é—î —Ç–µ–º—É —Å–ª–∞–π–¥—É
   */
  async changeTheme(
    currentSlideHTML: string,
    newTheme: string,
    topic: string,
    age: string
  ): Promise<string> {
    return this.editSlide(
      currentSlideHTML,
      `–ó–º—ñ–Ω–∏ —Ç–µ–º—É –¥–∏–∑–∞–π–Ω—É –Ω–∞: ${newTheme}. –ê–¥–∞–ø—Ç—É–π –∫–æ–ª—å–æ—Ä–∏, —Å—Ç–∏–ª—ñ —Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –ø—ñ–¥ —Ü—é —Ç–µ–º—É.`,
      topic,
      age
    );
  }

  /**
   * –î–æ–¥–∞—î –Ω–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–æ —Å–ª–∞–π–¥—É
   */
  async addElement(
    currentSlideHTML: string,
    elementType: 'quiz' | 'game' | 'animation' | 'video' | 'interactive_button',
    topic: string,
    age: string
  ): Promise<string> {
    const elements = {
      quiz: '–î–æ–¥–∞–π –º—ñ–Ω—ñ-–≤—ñ–∫—Ç–æ—Ä–∏–Ω—É –∑ 2-3 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è–º–∏ –ø–æ —Ç–µ–º—ñ',
      game: '–î–æ–¥–∞–π –ø—Ä–æ—Å—Ç—É –≥—Ä—É –∞–±–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
      animation: '–î–æ–¥–∞–π CSS –∞–Ω—ñ–º–∞—Ü—ñ—ó –¥–ª—è –ø—Ä–∏–≤–µ—Ä–Ω–µ–Ω–Ω—è —É–≤–∞–≥–∏',
      video: '–î–æ–¥–∞–π placeholder –¥–ª—è –≤—ñ–¥–µ–æ –∑ –∫–Ω–æ–ø–∫–æ—é –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è',
      interactive_button: '–î–æ–¥–∞–π —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∫–Ω–æ–ø–∫–∏ –∑ hover –µ—Ñ–µ–∫—Ç–∞–º–∏'
    };

    return this.editSlide(
      currentSlideHTML,
      elements[elementType],
      topic,
      age
    );
  }

  /**
   * –í–∏–¥–∞–ª—è—î –µ–ª–µ–º–µ–Ω—Ç–∏ –∑—ñ —Å–ª–∞–π–¥—É
   */
  async removeElement(
    currentSlideHTML: string,
    elementSelector: string,
    topic: string,
    age: string
  ): Promise<string> {
    return this.editSlide(
      currentSlideHTML,
      `–í–∏–¥–∞–ª–∏ –µ–ª–µ–º–µ–Ω—Ç: ${elementSelector}. –í—ñ–¥—Ä–µ–≥—É–ª—é–π layout –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.`,
      topic,
      age
    );
  }

  /**
   * –ó–º—ñ–Ω—é—î —Ä–æ–∑–º—ñ—Ä —Ç–∞ –ø–æ–∑–∏—Ü—ñ—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
   */
  async resizeElements(
    currentSlideHTML: string,
    instructions: string,
    topic: string,
    age: string
  ): Promise<string> {
    return this.editSlide(
      currentSlideHTML,
      `–ó–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä —Ç–∞ –ø–æ–∑–∏—Ü—ñ—é –µ–ª–µ–º–µ–Ω—Ç—ñ–≤: ${instructions}`,
      topic,
      age
    );
  }

  /**
   * –î–æ–¥–∞—î –∞–±–æ –∑–º—ñ–Ω—é—î —Ç–µ–∫—Å—Ç
   */
  async updateText(
    currentSlideHTML: string,
    textChanges: string,
    topic: string,
    age: string
  ): Promise<string> {
    return this.editSlide(
      currentSlideHTML,
      `–ó–º—ñ–Ω–∏ —Ç–µ–∫—Å—Ç: ${textChanges}. –ê–¥–∞–ø—Ç—É–π –ø—ñ–¥ –≤—ñ–∫ ${age} —Ç–∞ —Ç–µ–º—É ${topic}.`,
      topic,
      age
    );
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Å–ª–∞–π–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
   */
  hasElement(html: string, selector: string): boolean {
    // –ü—Ä–æ—Å—Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –≤ HTML
    return html.includes(selector) || 
           html.includes(`class="${selector}"`) ||
           html.includes(`id="${selector}"`);
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –±–∞–∑–æ–≤—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–∞–π–¥—É
   */
  getSlideStats(html: string): {
    length: number;
    hasImages: boolean;
    hasInteractivity: boolean;
    hasAnimations: boolean;
    textLength: number;
  } {
    const textContent = html.replace(/<[^>]*>/g, '').trim();
    
    return {
      length: html.length,
      hasImages: html.includes('<img') || html.includes('data:image'),
      hasInteractivity: html.includes('onclick') || html.includes('addEventListener'),
      hasAnimations: html.includes('@keyframes') || html.includes('animation:'),
      textLength: textContent.length
    };
  }

  /**
   * –ê–Ω–∞–ª—ñ–∑—É—î –∑–º—ñ–Ω–∏ –º—ñ–∂ —Å—Ç–∞—Ä–∏–º —Ç–∞ –Ω–æ–≤–∏–º —Å–ª–∞–π–¥–æ–º
   */
  analyzeChanges(oldHTML: string, newHTML: string, instruction: string): {
    summary: string;
    detectedChanges: string[];
    changeCount: number;
  } {
    const changes: string[] = [];
    
    // –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ–≤–∂–∏–Ω–∏
    const oldLength = oldHTML.length;
    const newLength = newHTML.length;
    if (Math.abs(oldLength - newLength) > 100) {
      changes.push(`–ó–º—ñ–Ω–µ–Ω–æ —Ä–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç—É: ${oldLength} ‚Üí ${newLength} —Å–∏–º–≤–æ–ª—ñ–≤`);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    const oldElementCount = (oldHTML.match(/<[^/][^>]*>/g) || []).length;
    const newElementCount = (newHTML.match(/<[^/][^>]*>/g) || []).length;
    if (newElementCount > oldElementCount) {
      changes.push(`–î–æ–¥–∞–Ω–æ ${newElementCount - oldElementCount} –Ω–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤`);
    } else if (newElementCount < oldElementCount) {
      changes.push(`–í–∏–¥–∞–ª–µ–Ω–æ ${oldElementCount - newElementCount} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤`);
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ –≤ —Å—Ç–∏–ª—è—Ö
    const oldStyleMatch = oldHTML.match(/<style[^>]*>([\s\S]*?)<\/style>/);
    const newStyleMatch = newHTML.match(/<style[^>]*>([\s\S]*?)<\/style>/);
    if (oldStyleMatch && newStyleMatch) {
      const oldStyles = oldStyleMatch[1];
      const newStyles = newStyleMatch[1];
      if (oldStyles !== newStyles) {
        changes.push('–û–Ω–æ–≤–ª–µ–Ω–æ CSS —Å—Ç–∏–ª—ñ');
      }
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ –≤ JavaScript
    if (oldHTML.includes('<script') !== newHTML.includes('<script') ||
        oldHTML.includes('onclick') !== newHTML.includes('onclick')) {
      changes.push('–ó–º—ñ–Ω–µ–Ω–æ JavaScript —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å');
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–º—ñ–Ω–∏ –∫–æ–ª—å–æ—Ä—ñ–≤
    const oldColors = oldHTML.match(/color:\s*[^;]+/g) || [];
    const newColors = newHTML.match(/color:\s*[^;]+/g) || [];
    if (oldColors.length !== newColors.length) {
      changes.push('–ó–º—ñ–Ω–µ–Ω–æ –∫–æ–ª—å–æ—Ä–æ–≤—É —Å—Ö–µ–º—É');
    }

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –æ–ø–∏—Å
    let summary = '–°–ª–∞–π–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó';
    if (changes.length > 0) {
      summary = `–í–∏–∫–æ–Ω–∞–Ω–æ ${changes.length} —Ç–∏–ø—ñ–≤ –∑–º—ñ–Ω: ${instruction}`;
    }

    return {
      summary,
      detectedChanges: changes,
      changeCount: changes.length
    };
  }
} 