import { ClaudeSonnetContentService } from '@/services/content/ClaudeSonnetContentService';
import { LessonService } from '@/services/database/LessonService';
import { SlideService } from '@/services/database/SlideService';
import { AgeGroupConfig, FormValues } from '@/types/generation';
import { LessonInsert } from '@/types/database';
import { configManager } from './ConfigManager';

// === SOLID: SRP - Types for generation ===
interface GenerationOptions {
  userId: string;
  title?: string;
  description?: string;
  generateSlides?: boolean;
  slideCount?: number;
}

interface GeneratedLesson {
  id: string;
  title: string;
  description: string;
  slides: Array<{
    id: string;
    title: string;
    content: string;
    htmlContent?: string;
    type: 'welcome' | 'content' | 'activity' | 'summary';
    status: 'ready' | 'generating' | 'error';
  }>;
}

interface GenerationContext {
  ageGroup: AgeGroupConfig;
  formValues: FormValues;
  options: GenerationOptions;
  prompt: string;
}

// === SOLID: SRP - Main generation service ===
export class GenerationConstructorService {
  private contentService: ClaudeSonnetContentService;
  private lessonService: LessonService;
  private slideService: SlideService;

  constructor(private claudeApiKey: string) {
    this.contentService = new ClaudeSonnetContentService(claudeApiKey);
    this.lessonService = new LessonService();
    this.slideService = new SlideService();
  }

  // === SOLID: SRP - Main generation method ===
  async generateLesson(
    ageGroupConfig: AgeGroupConfig,
    formValues: FormValues,
    options: GenerationOptions
  ): Promise<GeneratedLesson> {
    console.log('üéØ GENERATION SERVICE: Starting lesson generation');
    
    // === SOLID: SRP - Build generation context ===
    const context = await this.buildGenerationContext(ageGroupConfig, formValues, options);
    
    // === SOLID: SRP - Generate lesson metadata ===
    const lessonData = await this.generateLessonMetadata(context);
    
    // === SOLID: SRP - Create lesson in database ===
    const lesson = await this.createLessonInDatabase(lessonData, options);
    
    // === SOLID: SRP - Generate slides if requested ===
    let slides: any[] = [];
    if (options.generateSlides) {
      slides = await this.generateSlides(lesson.id, context);
    }
    
    console.log('‚úÖ GENERATION SERVICE: Lesson generated successfully');
    
    return {
      id: lesson.id,
      title: lesson.title,
      description: lesson.description || '',
      slides: slides.map(slide => ({
        id: slide.id,
        title: slide.title,
        content: slide.description || '',
        htmlContent: slide.html_content || undefined,
        type: this.mapSlideType(slide.type),
        status: slide.status === 'ready' ? 'ready' : 'generating'
      }))
    };
  }

  // === SOLID: SRP - Build generation context ===
  private async buildGenerationContext(
    ageGroupConfig: AgeGroupConfig,
    formValues: FormValues,
    options: GenerationOptions
  ): Promise<GenerationContext> {
    console.log('üìã GENERATION SERVICE: Building generation context');
    
    // === SOLID: SRP - Get age group configuration ===
    const ageConfig = configManager.getAgeGroupConfig(ageGroupConfig.id);
    
    if (!ageConfig) {
      throw new Error(`Age group configuration not found for ID: ${ageGroupConfig.id}`);
    }
    
    // === SOLID: SRP - Build AI prompt from form values ===
    const prompt = this.buildAIPrompt(ageConfig, formValues, options);
    
    return {
      ageGroup: ageConfig,
      formValues,
      options,
      prompt
    };
  }

  // === SOLID: SRP - Build AI prompt from configuration ===
  private buildAIPrompt(
    ageConfig: AgeGroupConfig,
    formValues: FormValues,
    options: GenerationOptions
  ): string {
    console.log('ü§ñ GENERATION SERVICE: Building AI prompt');
    
    const parts = [
      `–°—Ç–≤–æ—Ä–∏ —É—Ä–æ–∫ –¥–ª—è –¥—ñ—Ç–µ–π ${ageConfig.name} (${ageConfig.description}).`,
      `–ù–∞–∑–≤–∞ —É—Ä–æ–∫—É: "${options.title || '–ù–æ–≤–∏–π —É—Ä–æ–∫'}"`,
      `–û–ø–∏—Å: "${options.description || '–£—Ä–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞'}"`,
    ];
    
    // === SOLID: SRP - Add form values to prompt ===
    Object.entries(formValues).forEach(([field, value]) => {
      if (value && value !== '') {
        parts.push(`${field}: ${Array.isArray(value) ? value.join(', ') : value}`);
      }
    });
    
    // === SOLID: SRP - Add age-specific instructions ===
    parts.push(`–í—ñ–∫–æ–≤—ñ –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ: ${ageConfig.fontSize.primary}, ${ageConfig.layout.elementsPerSlide} –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å–ª–∞–π–¥`);
    
    if (options.generateSlides) {
      parts.push(`–°—Ç–≤–æ—Ä–∏ ${options.slideCount || 4} —Å–ª–∞–π–¥–∏ –¥–ª—è —Ü—å–æ–≥–æ —É—Ä–æ–∫—É.`);
    }
    
    return parts.join('\n');
  }

  // === SOLID: SRP - Generate lesson metadata ===
  private async generateLessonMetadata(context: GenerationContext): Promise<LessonInsert> {
    console.log('üìö GENERATION SERVICE: Generating lesson metadata');
    
    // === SOLID: SRP - Use Claude to enhance lesson description ===
    const enhancedDescription = await this.enhanceLessonDescription(context);
    
    return {
      user_id: context.options.userId,
      title: context.options.title || '–£—Ä–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º',
      description: enhancedDescription,
      subject: context.formValues.subject || '–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Å–≤—ñ—Ç–∞',
      age_group: context.ageGroup.id,
      duration: parseInt(context.formValues.duration as string) || 45,
      difficulty: context.formValues.difficulty || 'medium',
      status: 'draft',
      is_public: false,
      tags: [],
      metadata: {
        generatedBy: 'constructor',
        ageGroupConfig: context.ageGroup,
        formValues: context.formValues,
        generationTimestamp: new Date().toISOString()
      }
    };
  }

  // === SOLID: SRP - Enhance lesson description with AI ===
  private async enhanceLessonDescription(context: GenerationContext): Promise<string> {
    try {
      const prompt = `–°—Ç–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–π –æ–ø–∏—Å —É—Ä–æ–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:
      
${context.prompt}

–û–ø–∏—Å –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏:
- –ö–æ—Ä–æ—Ç–∫–∏–º (2-3 —Ä–µ—á–µ–Ω–Ω—è)
- –ü—Ä–∏–≤–∞–±–ª–∏–≤–∏–º –¥–ª—è –¥—ñ—Ç–µ–π ${context.ageGroup.name}
- –í–∫–ª—é—á–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ñ —Ç–µ–º–∏ —Ç–∞ —Ü—ñ–ª—ñ —É—Ä–æ–∫—É
- –ù–∞–ø–∏—Å–∞–Ω–∏–º —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é`;

      const description = await this.contentService.generateLessonPlan(
        context.options.title || '—É—Ä–æ–∫',
        context.ageGroup.name,
        'uk'
      );

      // === SOLID: SRP - Extract first paragraph as description ===
      const firstParagraph = description.split('\n')[0];
      return firstParagraph || context.options.description || '–£—Ä–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞';
      
    } catch (error) {
      console.error('‚ùå GENERATION SERVICE: Error enhancing description:', error);
      return context.options.description || '–£—Ä–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞';
    }
  }

  // === SOLID: SRP - Create lesson in database ===
  private async createLessonInDatabase(lessonData: LessonInsert, options: GenerationOptions): Promise<any> {
    console.log('üíæ GENERATION SERVICE: Creating lesson in database');
    
    // === SOLID: SRP - Check if user can create lesson ===
    const canCreate = await this.lessonService.canCreateLesson(options.userId);
    if (!canCreate) {
      throw new Error('–î–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç —É—Ä–æ–∫—ñ–≤ –¥–ª—è –≤–∞—à–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏');
    }
    
    // === SOLID: SRP - Create lesson ===
    const lesson = await this.lessonService.createLesson(lessonData);
    
    console.log('‚úÖ GENERATION SERVICE: Lesson created with ID:', lesson.id);
    return lesson;
  }

  // === SOLID: SRP - Generate slides for lesson ===
  private async generateSlides(lessonId: string, context: GenerationContext): Promise<any[]> {
    console.log('üé® GENERATION SERVICE: Generating slides');
    
    const slideCount = context.options.slideCount || 4;
    const slides = [];
    
    // === SOLID: SRP - Generate default slide structure ===
    const slideTemplates = [
      { title: '–í—ñ—Ç–∞–Ω–Ω—è', type: 'welcome', description: '–ó–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑ —Ç–µ–º–æ—é —É—Ä–æ–∫—É' },
      { title: '–û—Å–Ω–æ–≤–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª', type: 'content', description: '–ü–æ–¥–∞—á–∞ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É' },
      { title: '–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è', type: 'activity', description: '–ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –∑–Ω–∞–Ω—å' },
      { title: '–ü—ñ–¥—Å—É–º–æ–∫', type: 'summary', description: '–£–∑–∞–≥–∞–ª—å–Ω–µ–Ω–Ω—è –≤–∏–≤—á–µ–Ω–æ–≥–æ' }
    ];
    
    // === SOLID: SRP - Create slides based on templates ===
    for (let i = 0; i < slideCount; i++) {
      const template = slideTemplates[i % slideTemplates.length];
      
      try {
        console.log(`üìÑ GENERATION SERVICE: Creating slide ${i + 1}/${slideCount}`);
        
        const slide = await this.slideService.createSlide({
          lesson_id: lessonId,
          title: `${template.title} ${i + 1}`,
          description: template.description,
          type: template.type as any,
          icon: this.getSlideIcon(template.type),
          slide_number: i + 1,
          status: 'ready',
          metadata: {
            generatedBy: 'constructor',
            ageGroup: context.ageGroup.id,
            template: template.type
          }
        });
        
        slides.push(slide);
        
      } catch (error) {
        console.error(`‚ùå GENERATION SERVICE: Error creating slide ${i + 1}:`, error);
        
        // === SOLID: SRP - Create fallback slide ===
        slides.push({
          id: `slide_${Date.now()}_${i}`,
          title: `–°–ª–∞–π–¥ ${i + 1}`,
          description: '–°–ª–∞–π–¥ –±—É–¥–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ',
          type: 'content',
          status: 'error'
        });
      }
    }
    
    console.log('‚úÖ GENERATION SERVICE: All slides created');
    return slides;
  }

  // === SOLID: SRP - Helper methods ===
  private getSlideIcon(type: string): string {
    const icons: Record<string, string> = {
      welcome: 'üëã',
      content: 'üìö',
      activity: 'üéØ',
      summary: 'üìù'
    };
    
    return icons[type] || 'üìÑ';
  }

  private mapSlideType(type: string): 'welcome' | 'content' | 'activity' | 'summary' {
    const mapping: Record<string, 'welcome' | 'content' | 'activity' | 'summary'> = {
      welcome: 'welcome',
      content: 'content',
      activity: 'activity',
      summary: 'summary'
    };
    
    return mapping[type] || 'content';
  }
} 