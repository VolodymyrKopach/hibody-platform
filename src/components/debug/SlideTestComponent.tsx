'use client';

import React, { useState } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Alert,
  Stack,
  TextField,
  Paper,
  Divider,
  CircularProgress
} from '@mui/material';

interface TestSlideData {
  title: string;
  description: string;
  type: 'welcome' | 'content' | 'activity' | 'game' | 'summary';
  icon: string;
}

export const SlideTestComponent: React.FC = () => {
  const [message, setMessage] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const [testLessonId, setTestLessonId] = useState<string>('');
  const [slideData, setSlideData] = useState<TestSlideData>({
    title: '–¢–µ—Å—Ç–æ–≤–∏–π —Å–ª–∞–π–¥',
    description: '–û–ø–∏—Å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª–∞–π–¥—É',
    type: 'content',
    icon: 'üìÑ'
  });

  const createTestLesson = async () => {
    setLoading(true);
    setMessage('');

    try {
      const response = await fetch('/api/lessons', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: '–¢–µ—Å—Ç–æ–≤–∏–π —É—Ä–æ–∫ –¥–ª—è —Å–ª–∞–π–¥—ñ–≤',
          description: '–£—Ä–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤',
          subject: '—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è',
          ageGroup: '6-7',
          duration: 30,
          slides: [] // –ë–µ–∑ –±–∞–∑–æ–≤–∏—Ö —Å–ª–∞–π–¥—ñ–≤
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        setTestLessonId(result.lesson.id);
        setMessage(`‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π —É—Ä–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ! ID: ${result.lesson.id}`);
      } else {
        setMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫—É: ${result.error?.message || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('Error creating test lesson:', error);
      setMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setLoading(false);
    }
  };

  const createTestSlide = async () => {
    if (!testLessonId) {
      setMessage('‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —Ç–µ—Å—Ç–æ–≤–∏–π —É—Ä–æ–∫');
      return;
    }

    setLoading(true);
    setMessage('');

    try {
      const response = await fetch(`/api/lessons/${testLessonId}/slides`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          slide: slideData,
          generateContent: true
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        setMessage(`‚úÖ –°–ª–∞–π–¥ —Å—Ç–≤–æ—Ä–µ–Ω–æ! ID: ${result.slide.id}, –§–∞–π–ª: ${result.htmlFile}`);
      } else {
        setMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–∞–π–¥—É: ${result.error?.message || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('Error creating test slide:', error);
      setMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setLoading(false);
    }
  };

  const getSlides = async () => {
    if (!testLessonId) {
      setMessage('‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å —Ç–µ—Å—Ç–æ–≤–∏–π —É—Ä–æ–∫');
      return;
    }

    setLoading(true);
    setMessage('');

    try {
      const response = await fetch(`/api/lessons/${testLessonId}/slides`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const result = await response.json();
      
      if (result.success) {
        setMessage(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${result.slides.length} —Å–ª–∞–π–¥—ñ–≤:\n${result.slides.map((s: any) => `- ${s.title} (${s.type})`).join('\n')}`);
      } else {
        setMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤: ${result.error?.message || 'Unknown error'}`);
      }
    } catch (error) {
      console.error('Error getting slides:', error);
      setMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setLoading(false);
    }
  };

  const clearTestData = () => {
    setTestLessonId('');
    setMessage('üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ');
  };

  return (
    <Box sx={{ maxWidth: 700, mx: 'auto', p: 3 }}>
      <Paper sx={{ p: 3 }}>
        <Typography variant="h5" gutterBottom>
          üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤ –≤ –ë–î
        </Typography>

        <Typography variant="body2" color="text.secondary" sx={{ mb: 3 }}>
          –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ API –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤ –∑ Supabase
        </Typography>

        <Stack spacing={3}>
          {/* –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫—É */}
          <Card variant="outlined">
            <CardContent>
              <Typography variant="h6" gutterBottom>
                1. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É—Ä–æ–∫—É
              </Typography>
              <Button
                variant="contained"
                onClick={createTestLesson}
                disabled={loading}
                color="primary"
                fullWidth
              >
                {loading ? <CircularProgress size={24} /> : '–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π —É—Ä–æ–∫'}
              </Button>
              {testLessonId && (
                <Alert severity="info" sx={{ mt: 2 }}>
                  ID —É—Ä–æ–∫—É: {testLessonId}
                </Alert>
              )}
            </CardContent>
          </Card>

          {/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–ª–∞–π–¥—É */}
          <Card variant="outlined">
            <CardContent>
              <Typography variant="h6" gutterBottom>
                2. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–ª–∞–π–¥—É
              </Typography>
              <Stack spacing={2}>
                <TextField
                  label="–ù–∞–∑–≤–∞ —Å–ª–∞–π–¥—É"
                  value={slideData.title}
                  onChange={(e) => setSlideData({...slideData, title: e.target.value})}
                  fullWidth
                />
                <TextField
                  label="–û–ø–∏—Å —Å–ª–∞–π–¥—É"
                  value={slideData.description}
                  onChange={(e) => setSlideData({...slideData, description: e.target.value})}
                  fullWidth
                  multiline
                  rows={2}
                />
                <TextField
                  label="–¢–∏–ø —Å–ª–∞–π–¥—É"
                  value={slideData.type}
                  onChange={(e) => setSlideData({...slideData, type: e.target.value as any})}
                  select
                  SelectProps={{ native: true }}
                  fullWidth
                >
                  <option value="welcome">–í—ñ—Ç–∞–Ω–Ω—è</option>
                  <option value="content">–ö–æ–Ω—Ç–µ–Ω—Ç</option>
                  <option value="activity">–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</option>
                  <option value="game">–ì—Ä–∞</option>
                  <option value="summary">–ü—ñ–¥—Å—É–º–æ–∫</option>
                </TextField>
                <TextField
                  label="–Ü–∫–æ–Ω–∫–∞"
                  value={slideData.icon}
                  onChange={(e) => setSlideData({...slideData, icon: e.target.value})}
                  fullWidth
                />
              </Stack>
            </CardContent>
          </Card>

          {/* –î—ñ—ó –∑ —Å–ª–∞–π–¥–∞–º–∏ */}
          <Card variant="outlined">
            <CardContent>
              <Typography variant="h6" gutterBottom>
                3. –û–ø–µ—Ä–∞—Ü—ñ—ó –∑—ñ —Å–ª–∞–π–¥–∞–º–∏
              </Typography>
              <Stack spacing={2}>
                <Button
                  variant="contained"
                  onClick={createTestSlide}
                  disabled={loading || !testLessonId}
                  color="success"
                  fullWidth
                >
                  {loading ? <CircularProgress size={24} /> : '–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ª–∞–π–¥'}
                </Button>
                <Button
                  variant="outlined"
                  onClick={getSlides}
                  disabled={loading || !testLessonId}
                  color="info"
                  fullWidth
                >
                  {loading ? <CircularProgress size={24} /> : '–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ª–∞–π–¥–∏'}
                </Button>
                <Button
                  variant="outlined"
                  onClick={clearTestData}
                  color="warning"
                  fullWidth
                >
                  –û—á–∏—Å—Ç–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
                </Button>
              </Stack>
            </CardContent>
          </Card>

          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ */}
          {message && (
            <Alert 
              severity={message.includes('‚úÖ') ? 'success' : message.includes('‚ùå') ? 'error' : 'info'}
              sx={{ whiteSpace: 'pre-line' }}
            >
              {message}
            </Alert>
          )}
        </Stack>
      </Paper>
    </Box>
  );
};

export default SlideTestComponent; 