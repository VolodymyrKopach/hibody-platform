import React from 'react';
import {
  Box,
  Typography,
  Paper,
  IconButton,
  Tooltip,
  Chip,
  Button
} from '@mui/material';
import { alpha, useTheme } from '@mui/material/styles';
import { X, Download } from 'lucide-react';
import { SimpleLesson, SimpleSlide } from '@/types/chat';
import SlideCard from './SlideCard';

interface SlidePanelProps {
  currentLesson: SimpleLesson | null;
  selectedSlides: Set<string>;
  slidePreviews: Record<string, string>;
  previewsUpdating: Set<string>;
  isSavingLesson: boolean;
  onToggleSlideSelection: (slideId: string) => void;
  onSelectAllSlides: () => void;
  onDeselectAllSlides: () => void;
  onOpenSlideDialog: (index: number) => void;
  onRegenerateSlidePreview: (slideId: string) => void;
  onOpenSaveDialog: () => void;
  onCloseSidePanel: () => void;
  onExportLesson: () => void;
}

const SlidePanel: React.FC<SlidePanelProps> = ({
  currentLesson,
  selectedSlides,
  slidePreviews,
  previewsUpdating,
  isSavingLesson,
  onToggleSlideSelection,
  onSelectAllSlides,
  onDeselectAllSlides,
  onOpenSlideDialog,
  onRegenerateSlidePreview,
  onOpenSaveDialog,
  onCloseSidePanel,
  onExportLesson
}) => {
  const theme = useTheme();

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —É—Ä–æ–∫
  const LessonInfo = () => {
    if (!currentLesson) return null;

    return (
      <Paper elevation={0} sx={{ p: 2, mb: 3, backgroundColor: alpha(theme.palette.primary.main, 0.04), borderRadius: 2 }}>
        <Typography variant="subtitle1" sx={{ fontWeight: 600, color: 'primary.main', mb: 1 }}>
          {currentLesson.title}
        </Typography>
        <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
          {currentLesson.description}
        </Typography>
        
        <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>
          <Chip
            label={currentLesson.subject} 
            size="small"
            color="primary"
            variant="outlined"
          />
          <Chip 
            label={currentLesson.ageGroup} 
            size="small" 
            color="secondary" 
            variant="outlined"
          />
          <Chip 
            label={`${currentLesson.duration} —Ö–≤`} 
            size="small" 
            variant="outlined"
          />
        </Box>
      </Paper>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤–∏–±–æ—Ä–æ–º —Å–ª–∞–π–¥—ñ–≤
  const SelectionControls = () => {
    if (!currentLesson) return null;

    return (
      <Paper elevation={0} sx={{ p: 2, mb: 2, backgroundColor: alpha(theme.palette.grey[50], 0.5), borderRadius: 2 }}>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
          <Typography variant="body2" color="text.secondary">
            –í–∏–±—Ä–∞–Ω–æ: <strong>{selectedSlides.size}</strong> –∑ <strong>{currentLesson.slides.length}</strong> —Å–ª–∞–π–¥—ñ–≤
          </Typography>
          <Box sx={{ display: 'flex', gap: 1 }}>
            <Button
              size="small"
              variant="outlined"
              onClick={onSelectAllSlides}
              disabled={selectedSlides.size === currentLesson.slides.length}
            >
              –í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ
            </Button>
            <Button
              size="small"
              variant="outlined"
              onClick={onDeselectAllSlides}
              disabled={selectedSlides.size === 0}
            >
              –û—á–∏—Å—Ç–∏—Ç–∏
            </Button>
          </Box>
        </Box>
        
        {/* –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è */}
        {selectedSlides.size > 0 && (
          <Box sx={{ display: 'flex', justifyContent: 'center' }}>
            <Button
              variant="contained"
              onClick={onOpenSaveDialog}
              disabled={isSavingLesson}
              sx={{
                px: 4,
                py: 1,
                fontSize: '0.875rem',
                fontWeight: 600,
                borderRadius: 2,
                textTransform: 'none',
                boxShadow: '0 2px 8px rgba(0,0,0,0.1)',
                '&:hover': {
                  boxShadow: '0 4px 16px rgba(0,0,0,0.2)',
                }
              }}
            >
              {isSavingLesson ? '–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è...' : `–ó–±–µ—Ä–µ–≥—Ç–∏ —É—Ä–æ–∫ (${selectedSlides.size} —Å–ª–∞–π–¥—ñ–≤)`}
            </Button>
          </Box>
        )}
      </Paper>
    );
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É
  const EmptyState = () => (
    <Box sx={{ 
      flex: 1, 
      display: 'flex', 
      flexDirection: 'column', 
      justifyContent: 'center', 
      alignItems: 'center',
      textAlign: 'center',
      p: 3
    }}>
      <Box sx={{ fontSize: '4rem', mb: 2 }}>üé®</Box>
      
      <Typography variant="h6" sx={{ fontWeight: 600, mb: 2, color: 'text.primary' }}>
        –°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π –ø–µ—Ä—à–∏–π —É—Ä–æ–∫!
      </Typography>
      
      <Typography variant="body2" color="text.secondary" sx={{ mb: 3, lineHeight: 1.6 }}>
        –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å –≤ —á–∞—Ç—ñ —â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
      </Typography>
      
      <Paper elevation={0} sx={{ 
        p: 2, 
        mb: 3, 
        backgroundColor: alpha(theme.palette.primary.main, 0.04),
        borderRadius: 2,
        width: '100%'
      }}>
        <Typography variant="body2" sx={{ fontStyle: 'italic', color: 'text.secondary' }}>
          üí° "–°—Ç–≤–æ—Ä–∏ —É—Ä–æ–∫ –ø—Ä–æ –∫–æ—Å–º–æ—Å –¥–ª—è –¥—ñ—Ç–µ–π 7 —Ä–æ–∫—ñ–≤"
        </Typography>
        <Typography variant="body2" sx={{ fontStyle: 'italic', color: 'text.secondary', mt: 1 }}>
          üìö "–ó—Ä–æ–±–∏ —É—Ä–æ–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –ø—Ä–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è"
        </Typography>
        <Typography variant="body2" sx={{ fontStyle: 'italic', color: 'text.secondary', mt: 1 }}>
          üåà "–£—Ä–æ–∫ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –ø—Ä–æ –∫–æ–ª—å–æ—Ä–∏"
        </Typography>
      </Paper>
      
      <Typography variant="caption" color="text.secondary" sx={{ textAlign: 'center' }}>
        ‚ú® –ü—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫—É —Ç—É—Ç –∑'—è–≤–ª—è—Ç—å—Å—è –≤—Å—ñ —Å–ª–∞–π–¥–∏ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
      </Typography>
    </Box>
  );

  return (
    <Box sx={{ p: 3, height: '100%', display: 'flex', flexDirection: 'column' }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª—ñ */}
      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 3 }}>
        <Typography variant="h6" sx={{ fontWeight: 600 }}>
          –°–ª–∞–π–¥–∏ —É—Ä–æ–∫—É
        </Typography>
        <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
          {currentLesson && (
            <Tooltip title="–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ —É—Ä–æ–∫">
              <IconButton
                onClick={onExportLesson}
                size="small"
                sx={{ color: 'primary.main' }}
              >
                <Download size={16} />
              </IconButton>
            </Tooltip>
          )}
          <IconButton
            onClick={onCloseSidePanel}
            size="small"
            sx={{ color: 'text.secondary' }}
          >
            <X size={16} />
          </IconButton>
        </Box>
      </Box>

      {currentLesson ? (
        <>
          <LessonInfo />
          <SelectionControls />
          
          {/* –°–ø–∏—Å–æ–∫ —Å–ª–∞–π–¥—ñ–≤ */}
          <Box sx={{ flex: 1, overflow: 'auto' }}>
            {currentLesson.slides.map((slide, index) => (
              <SlideCard
                key={slide.id}
                slide={slide}
                index={index}
                isSelected={selectedSlides.has(slide.id)}
                isUpdating={previewsUpdating.has(slide.id)}
                previewUrl={slidePreviews[slide.id]}
                onToggleSelection={onToggleSlideSelection}
                onOpenDialog={onOpenSlideDialog}
                onRegeneratePreview={onRegenerateSlidePreview}
              />
            ))}
          </Box>
        </>
      ) : (
        <EmptyState />
      )}
    </Box>
  );
};

export default SlidePanel; 