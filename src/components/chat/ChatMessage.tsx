import React from 'react';
import {
  Box,
  Typography,
  Button,
  Paper,
  Avatar,
  Fade,
  IconButton
} from '@mui/material';
import { alpha, useTheme } from '@mui/material/styles';
import { useTranslation } from 'react-i18next';
import { Bot, User, ThumbsUp, ThumbsDown, RefreshCw } from 'lucide-react';
import { Message } from '@/types/chat';
import { SimpleLesson } from '@/types/chat';
import MarkdownRenderer from '@/components/markdown/MarkdownRenderer';

interface ChatMessageProps {
  message: Message;
  onRegenerate?: (messageId: number) => void;
  onFeedback?: (messageId: number, feedback: 'like' | 'dislike') => void;
  onLessonCreate?: (lesson: SimpleLesson) => void;
  onActionClick?: (action: string, description: string) => void;
}

const ChatMessage: React.FC<ChatMessageProps> = ({
  message,
  onRegenerate,
  onFeedback,
  onLessonCreate,
  onActionClick
}) => {
  const { t } = useTranslation('chat');
  const theme = useTheme();

  // –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫—É –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  const handleLessonCreate = () => {
    if (message.text.includes('```html') && onLessonCreate) {
      // –ü–∞—Ä—Å–∏–Ω–≥ —É—Ä–æ–∫—É –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ AI
      const lessonMatch = message.text.match(/## üìö (.*?)\n/);
      const title = lessonMatch ? lessonMatch[1] : '–ù–æ–≤–∏–π —É—Ä–æ–∫';
      
      // –ü—Ä–æ—Å—Ç–∏–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤ –∑ HTML
      const htmlMatch = message.text.match(/```html\n([\s\S]*?)\n```/);
      if (htmlMatch) {
        const lesson: SimpleLesson = {
          id: `lesson_${Date.now()}`,
          title,
          description: `–£—Ä–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑ —á–∞—Ç—É`,
          subject: '–ó–∞–≥–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è',
          ageGroup: '6-12 —Ä–æ–∫—ñ–≤',
          duration: 30,
          createdAt: new Date(),
          updatedAt: new Date(),
          authorId: 'ai-chat',
          slides: [{
            id: `slide_${Date.now()}`,
            title: title,
            content: htmlMatch[1],
            htmlContent: htmlMatch[1],
            type: 'content',
            status: 'completed'
          }]
        };
        onLessonCreate(lesson);
      }
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫—É –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ª–∞–π–¥–æ–º
  React.useEffect(() => {
    console.log('üîç ChatMessage useEffect triggered:', {
      messageId: message.id,
      sender: message.sender,
      hasFirstSlideText: message.text.includes('‚úÖ **–ü–µ—Ä—à–∏–π —Å–ª–∞–π–¥ –≥–æ—Ç–æ–≤–∏–π!**'),
      hasSlideReadyText: message.text.includes('–≥–æ—Ç–æ–≤–∏–π!**'),
      hasLessonObject: !!(message as any).lesson,
      messagePreview: message.text.substring(0, 100) + '...'
    });
    
    // –†–æ–∑—à–∏—Ä–µ–Ω–∞ —É–º–æ–≤–∞ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —è–∫ –ø–µ—Ä—à–æ–≥–æ, —Ç–∞–∫ —ñ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö —Å–ª–∞–π–¥—ñ–≤ —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    if (message.sender === 'ai' && onLessonCreate && (message as any).lesson) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–µ–∫—Å—Ç –ø—Ä–æ –≥–æ—Ç–æ–≤–∏–π/–æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ª–∞–π–¥ (–±—É–¥—å-—è–∫–∏–π –Ω–æ–º–µ—Ä)
      const isSlideReady = message.text.includes('–≥–æ—Ç–æ–≤–∏–π!**') || 
                          message.text.includes('‚úÖ **–ü–µ—Ä—à–∏–π —Å–ª–∞–π–¥ –≥–æ—Ç–æ–≤–∏–π!**') ||
                          (message.text.includes('‚úÖ **–°–ª–∞–π–¥') && message.text.includes('–≥–æ—Ç–æ–≤–∏–π!**'));
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–µ–∫—Å—Ç –ø—Ä–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/–ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Å–ª–∞–π–¥—É
      const isSlideEdited = message.text.includes('–ø–æ–∫—Ä–∞—â–µ–Ω–æ!**') ||
                           message.text.includes('–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!**') ||
                           message.text.includes('–≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ!**') ||
                           (message.text.includes('‚úèÔ∏è **–°–ª–∞–π–¥') && message.text.includes('–ø–æ–∫—Ä–∞—â–µ–Ω–æ!**')) ||
                           (message.text.includes('üîÑ **–°–ª–∞–π–¥') && message.text.includes('–ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ!**')) ||
                           (message.text.includes('üìù **–°–ª–∞–π–¥') && message.text.includes('–≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ!**')) ||
                           (message.text.includes('üé® **–°–ª–∞–π–¥') && message.text.includes('–ø–æ–∫—Ä–∞—â–µ–Ω–æ!**')) ||
                           // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —É–º–æ–≤–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ ChatService
                           message.text.includes('–ù–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç —Å–ª–∞–π–¥—É —Å—Ç–≤–æ—Ä–µ–Ω–æ') ||
                           message.text.includes('–°–ª–∞–π–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º') ||
                           message.text.includes('–∑–∞–º—ñ–Ω–µ–Ω–æ** –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å–ª–∞–π–¥') ||
                           (message.text.includes('**–©–æ –∑–º—ñ–Ω–∏–ª–æ—Å—è:**') && message.text.includes('–¢–æ–π –∂–µ —Å–ª–∞–π–¥'));
      
      if (isSlideReady || isSlideEdited) {
        console.log(`üé® Auto-updating lesson from ${isSlideEdited ? 'slide editing' : 'slide generation'}...`);
        console.log('üéØ Found lesson object in message:', (message as any).lesson);
        console.log('üéØ Lesson slides count:', (message as any).lesson.slides?.length);
        
        if ((message as any).lesson.slides?.length > 0) {
          const lastSlideIndex = (message as any).lesson.slides.length - 1;
          console.log('üéØ Last slide htmlContent preview:', 
            (message as any).lesson.slides[lastSlideIndex]?.htmlContent?.substring(0, 100) + '...');
          
          // –Ø–∫—â–æ —Ü–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å–ª–∞–π–¥–∞, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å —è–∫ updatedAt
          if (isSlideEdited) {
            const updatedLesson = {
              ...(message as any).lesson,
              slides: (message as any).lesson.slides.map((slide: any) => ({
                ...slide,
                updatedAt: new Date() // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é
              }))
            };
            console.log('üîÑ Setting current time as updatedAt for edited slides');
            onLessonCreate(updatedLesson);
          } else {
            onLessonCreate((message as any).lesson);
          }
        } else {
          onLessonCreate((message as any).lesson);
        }
        return;
      }
    }
    
    // –°—Ç–∞—Ä–∏–π –∫–æ–¥ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ (–¥–ª—è –ø–µ—Ä—à–æ–≥–æ —Å–ª–∞–π–¥—É –±–µ–∑ lesson –æ–±'—î–∫—Ç–∞)
    if (message.sender === 'ai' && message.text.includes('‚úÖ **–ü–µ—Ä—à–∏–π —Å–ª–∞–π–¥ –≥–æ—Ç–æ–≤–∏–π!**') && onLessonCreate && !(message as any).lesson) {
      console.log('üé® Auto-creating lesson from approved plan (fallback)...');
      
      // –†–µ–∑–µ—Ä–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç - —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫—É –±–µ–∑ —Ä–µ–∞–ª—å–Ω–∏—Ö HTML –¥–∞–Ω–∏—Ö (–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–Ñ–¢–¨–°–Ø)
      console.warn('‚ö†Ô∏è No lesson object found in message, creating fallback lesson');
      
      const topicMatch = message.text.match(/–ø—Ä–æ\s+([^"]+?)[\s]*–¥–ª—è/i);
      const topic = topicMatch ? topicMatch[1].trim() : '–ù–æ–≤–∏–π —É—Ä–æ–∫';
      
      const lesson: SimpleLesson = {
        id: `lesson_${Date.now()}`,
        title: topic || '–ù–æ–≤–∏–π —É—Ä–æ–∫',
        description: `–£—Ä–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑ —á–∞—Ç—É`,
        subject: '–ó–∞–≥–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è',
        ageGroup: '6-12 —Ä–æ–∫—ñ–≤',
        duration: 30,
        createdAt: new Date(),
        updatedAt: new Date(),
        authorId: 'ai-chat',
        slides: [{
          id: `slide_${Date.now()}`,
          title: `${topic} - –í—Å—Ç—É–ø`,
          content: '–í—Å—Ç—É–ø–Ω–∏–π —Å–ª–∞–π–¥ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∑ Claude Sonnet',
          htmlContent: '<div>–°–ª–∞–π–¥ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è...</div>',
          type: 'content',
          status: 'completed'
        }]
      };
      
      console.log('üé® Auto-created fallback lesson:', lesson);
      onLessonCreate(lesson);
    }
  }, [message, onLessonCreate]);

  return (
    <Fade in timeout={300}>
      <Box
        sx={{
          display: 'flex',
          justifyContent: message.sender === 'user' ? 'flex-end' : 'flex-start',
          mb: 3,
        }}
      >
          <Box
            sx={{
              display: 'flex',
              flexDirection: message.sender === 'user' ? 'row-reverse' : 'row',
              alignItems: 'flex-start',
              gap: 2,
              maxWidth: '80%',
            }}
          >
            <Avatar
              sx={{
                width: 36,
                height: 36,
                backgroundColor: message.sender === 'user' 
                  ? theme.palette.secondary.main 
                  : theme.palette.primary.main,
              }}
            >
              {message.sender === 'user' ? <User size={18} /> : <Bot size={18} />}
            </Avatar>

            <Paper
              elevation={0}
              sx={{
                p: 2.5,
                borderRadius: '16px',
                backgroundColor: message.sender === 'user' 
                  ? theme.palette.primary.main 
                  : 'white',
                color: message.sender === 'user' ? 'white' : 'text.primary',
                border: message.sender === 'ai' ? `1px solid ${alpha(theme.palette.divider, 0.1)}` : 'none',
                boxShadow: message.sender === 'user' 
                  ? `0 4px 12px ${alpha(theme.palette.primary.main, 0.3)}`
                  : '0 2px 12px rgba(0,0,0,0.06)',
              }}
            >
              <MarkdownRenderer content={message.text} />

              {/* Available Action Buttons */}
              {message.sender === 'ai' && message.availableActions && message.availableActions.length > 0 && (
                <Box sx={{ mt: 3, mb: 1 }}>
                  <Typography variant="subtitle2" sx={{ mb: 2, color: theme.palette.text.secondary }}>
                    üöÄ {t('actions.quickActions')}
                  </Typography>
                  <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1.5 }}>
                    {message.availableActions.map((action, index) => (
                      <Button
                        key={index}
                        variant={action.action === 'approve_plan' ? 'contained' : 'outlined'}
                        size="small"
                        onClick={() => onActionClick?.(action.action, action.description)}
                        sx={{
                          borderRadius: 2,
                          textTransform: 'none',
                          fontSize: '0.875rem',
                          px: 2,
                          py: 1,
                          fontWeight: action.action === 'approve_plan' ? 600 : 500,
                          boxShadow: action.action === 'approve_plan' ? 2 : 0,
                          '&:hover': {
                            boxShadow: action.action === 'approve_plan' ? 4 : 1,
                          }
                        }}
                        title={action.description}
                      >
                        {action.label}
                      </Button>
                    ))}
                  </Box>
                </Box>
              )}

              {/* Standard Action Buttons */}
              {message.sender === 'ai' && (
                <Box sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                  <Box sx={{ display: 'flex', gap: 1 }}>
                    {/* Feedback buttons */}
                    <IconButton
                      size="small"
                      onClick={() => onFeedback?.(message.id, 'like')}
                      sx={{
                        color: message.feedback === 'like' ? theme.palette.success.main : theme.palette.text.secondary,
                        '&:hover': { color: theme.palette.success.main }
                      }}
                    >
                      <ThumbsUp size={16} />
                    </IconButton>
                    <IconButton
                      size="small"
                      onClick={() => onFeedback?.(message.id, 'dislike')}
                      sx={{
                        color: message.feedback === 'dislike' ? theme.palette.error.main : theme.palette.text.secondary,
                        '&:hover': { color: theme.palette.error.main }
                      }}
                    >
                      <ThumbsDown size={16} />
                    </IconButton>
                  </Box>

                  <Box sx={{ display: 'flex', gap: 1 }}>
                    {/* Create lesson button if contains HTML */}
                    {message.text.includes('```html') && (
                      <Button
                        size="small"
                        variant="outlined"
                        onClick={handleLessonCreate}
                        sx={{
                          borderRadius: 2,
                          textTransform: 'none',
                          fontSize: '0.75rem',
                        }}
                      >
                        {t('actions.createLesson')}
                      </Button>
                    )}
                    
                    {/* Regenerate button */}
                    <IconButton
                      size="small"
                      onClick={() => onRegenerate?.(message.id)}
                      sx={{
                        color: theme.palette.text.secondary,
                        '&:hover': { color: theme.palette.primary.main }
                      }}
                    >
                      <RefreshCw size={16} />
                    </IconButton>
                  </Box>
                </Box>
              )}

              {/* Message Status */}
              {message.sender === 'user' && (
                <Box sx={{ textAlign: 'right', mt: 1 }}>
                                   <Typography variant="caption" sx={{ opacity: 0.7 }}>
                     {message.status === 'sending' && '‚è≥'}
                     {message.status === 'sent' && '‚úì'}
                     {message.status === 'delivered' && '‚úì‚úì'}
                   </Typography>
                </Box>
              )}
            </Paper>
          </Box>
        </Box>
    </Fade>
  );
};

export default ChatMessage; 