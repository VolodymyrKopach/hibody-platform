'use client';

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import {
  Box,
  Typography,
  useTheme,
  alpha,
  CircularProgress,
  Card,
  IconButton
} from '@mui/material';
import { Check, ImageIcon, AlertCircle, ChevronLeft, ChevronRight } from 'lucide-react';
import { generateFallbackPreview } from '@/utils/slidePreview';

interface SlideData {
  id: string;
  title: string;
  htmlContent: string;
  type: string;
  thumbnailUrl?: string; // –î–æ–¥–∞—î–º–æ thumbnailUrl –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
}

interface PreviewSelectorProps {
  slides: SlideData[];
  selectedPreviewId: string | null;
  onPreviewSelect: (slideId: string, previewUrl: string) => void;
  disabled?: boolean;
  cachedPreviews?: Record<string, string>; // –ó–æ–≤–Ω—ñ—à–Ω—ñ –∫–µ—à–æ–≤–∞–Ω—ñ –ø—Ä–µ–≤—å—é
}

interface PreviewState {
  url: string;
  loading: boolean;
  error: boolean;
}

const PreviewSelector: React.FC<PreviewSelectorProps> = ({
  slides,
  selectedPreviewId,
  onPreviewSelect,
  disabled = false,
  cachedPreviews = {}
}) => {
  const theme = useTheme();
  const [previews, setPreviews] = useState<Record<string, PreviewState>>({});
  const [currentSlideIndex, setCurrentSlideIndex] = useState(0);

  // Memoize slides to prevent unnecessary re-renders
  const memoizedSlides = useMemo(() => slides, [slides]);

  // –°–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥—ñ–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∫–µ—à–æ–≤–∞–Ω—ñ/DB –ø—Ä–µ–≤—å—é
  useEffect(() => {
    console.log('üéØ PREVIEW SELECTOR: Loading cached previews', {
      slidesCount: memoizedSlides.length,
      slideIds: memoizedSlides.map(s => s.id),
      cachedPreviewsCount: Object.keys(cachedPreviews).length,
      cachedPreviewIds: Object.keys(cachedPreviews),
      selectedPreviewId,
      timestamp: new Date().toISOString()
    });

    if (memoizedSlides.length === 0) {
      console.log('‚ùå PREVIEW SELECTOR: No slides to process, exiting');
      return;
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–µ–≤—å—é –∑ –∫–µ—à—É –∞–±–æ –∑ thumbnailUrl —Å–ª–∞–π–¥—ñ–≤
    const initialPreviews: Record<string, PreviewState> = {};
    
    memoizedSlides.forEach(slide => {
      let previewUrl = '';
      
      // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: 1) cachedPreviews, 2) slide.thumbnailUrl, 3) fallback
      if (cachedPreviews[slide.id]) {
        previewUrl = cachedPreviews[slide.id];
        console.log(`‚úÖ PREVIEW SELECTOR: Using cached preview for slide ${slide.id}`);
      } else if (slide.thumbnailUrl) {
        previewUrl = slide.thumbnailUrl;
        console.log(`üíæ PREVIEW SELECTOR: Using database thumbnailUrl for slide ${slide.id}`);
      } else {
        previewUrl = generateFallbackPreview();
        console.log(`üé® PREVIEW SELECTOR: Using fallback preview for slide ${slide.id}`);
      }
      
      initialPreviews[slide.id] = {
        url: previewUrl,
        loading: false,
        error: !previewUrl || previewUrl === generateFallbackPreview()
      };
    });

    setPreviews(initialPreviews);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—à–∏–π —Å–ª–∞–π–¥ —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ
    if (!selectedPreviewId && memoizedSlides.length > 0) {
      const firstSlide = memoizedSlides[0];
      const firstPreview = initialPreviews[firstSlide.id];
      if (firstPreview?.url) {
        console.log('üéØ PREVIEW SELECTOR: Auto-selecting first slide preview:', firstSlide.id);
        onPreviewSelect(firstSlide.id, firstPreview.url);
      }
    }
  }, [memoizedSlides, cachedPreviews, selectedPreviewId, onPreviewSelect]);

  const getSlideTypeIcon = useCallback((type: string) => {
    const icons = {
      'title': 'üè†',
      'content': 'üìñ',
      'interactive': 'üéÆ',
      'summary': 'üìù'
    };
    return icons[type as keyof typeof icons] || 'üìÑ';
  }, []);

  // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è —Å–ª–∞–π–¥–µ—Ä–∞
  const goToPrevSlide = useCallback(() => {
    const newIndex = currentSlideIndex > 0 ? currentSlideIndex - 1 : memoizedSlides.length - 1;
    setCurrentSlideIndex(newIndex);
    const slide = memoizedSlides[newIndex];
    if (slide && previews[slide.id]?.url) {
      onPreviewSelect(slide.id, previews[slide.id].url);
    }
  }, [currentSlideIndex, memoizedSlides, previews, onPreviewSelect]);

  const goToNextSlide = useCallback(() => {
    const newIndex = currentSlideIndex < memoizedSlides.length - 1 ? currentSlideIndex + 1 : 0;
    setCurrentSlideIndex(newIndex);
    const slide = memoizedSlides[newIndex];
    if (slide && previews[slide.id]?.url) {
      onPreviewSelect(slide.id, previews[slide.id].url);
    }
  }, [currentSlideIndex, memoizedSlides, previews, onPreviewSelect]);

  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ currentSlideIndex –∑ selectedPreviewId
  useEffect(() => {
    if (selectedPreviewId) {
      const index = memoizedSlides.findIndex(slide => slide.id === selectedPreviewId);
      if (index !== -1 && index !== currentSlideIndex) {
        setCurrentSlideIndex(index);
      }
    }
  }, [selectedPreviewId, memoizedSlides, currentSlideIndex]);

  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ª–∞–π–¥
  const currentSlide = memoizedSlides[currentSlideIndex];
  const currentPreview = currentSlide ? previews[currentSlide.id] : null;

  // –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (memoizedSlides.length <= 1) return;
      
      if (event.key === 'ArrowLeft') {
        event.preventDefault();
        goToPrevSlide();
      } else if (event.key === 'ArrowRight') {
        event.preventDefault();
        goToNextSlide();
      }
    };

    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [goToPrevSlide, goToNextSlide, memoizedSlides.length]);

  return (
    <Box sx={{ mt: 2 }}>
      <Typography variant="h6" sx={{ 
        fontWeight: 600, 
        mb: 3,
        color: 'text.primary',
        fontSize: '1.1rem',
        display: 'flex',
        alignItems: 'center',
        gap: 1
      }}>
        üñºÔ∏è –û–±–µ—Ä—ñ—Ç—å –ø—Ä–µ–≤—å—é –¥–ª—è —É—Ä–æ–∫—É
      </Typography>

      {/* –°–ª–∞–π–¥–µ—Ä –ø—Ä–µ–≤—å—é */}
      <Card sx={{ 
        borderRadius: '16px',
        overflow: 'hidden',
        background: `linear-gradient(135deg, ${alpha(theme.palette.primary.main, 0.05)} 0%, ${alpha(theme.palette.secondary.main, 0.05)} 100%)`,
        border: `2px solid ${alpha(theme.palette.primary.main, 0.1)}`
      }}>
        <Box sx={{ 
          width: '100%',
          aspectRatio: '4/3',  // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó –¥–ª—è –ø—Ä–µ–≤—å—é
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          position: 'relative',
          bgcolor: alpha(theme.palette.grey[100], 0.5)
        }}>
          {/* –ö–Ω–æ–ø–∫–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å–ª–∞–π–¥—É */}
          {memoizedSlides.length > 1 && (
            <IconButton
              onClick={goToPrevSlide}
              disabled={disabled}
              sx={{
                position: 'absolute',
                left: 16,
                backgroundColor: alpha(theme.palette.background.paper, 0.9),
                color: theme.palette.primary.main,
                width: 48,
                height: 48,
                '&:hover': {
                  backgroundColor: alpha(theme.palette.primary.main, 0.1),
                },
                '&:disabled': {
                  opacity: 0.5
                },
                zIndex: 2,
                boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
              }}
            >
              <ChevronLeft size={24} />
            </IconButton>
          )}

          {/* –ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç */}
          {currentPreview?.url ? (
            <img
              src={currentPreview.url}
              alt={`–ü—Ä–µ–≤—å—é —Å–ª–∞–π–¥—É ${currentSlideIndex + 1}`}
              style={{
                maxWidth: '80%',
                maxHeight: '90%',
                objectFit: 'contain',
                borderRadius: '8px'
              }}
            />
          ) : currentPreview?.loading ? (
            <Box sx={{ 
              display: 'flex', 
              flexDirection: 'column', 
              alignItems: 'center',
              gap: 2,
              color: 'text.secondary'
            }}>
              <CircularProgress size={48} />
              <Typography variant="body1">
                –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é...
              </Typography>
            </Box>
          ) : (
            <Box sx={{ 
              display: 'flex', 
              flexDirection: 'column', 
              alignItems: 'center',
              gap: 2,
              color: 'text.secondary'
            }}>
              <AlertCircle size={48} />
              <Typography variant="body1">
                –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é
              </Typography>
            </Box>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–∞–π–¥—É */}
          {memoizedSlides.length > 1 && (
            <IconButton
              onClick={goToNextSlide}
              disabled={disabled}
              sx={{
                position: 'absolute',
                right: 16,
                backgroundColor: alpha(theme.palette.background.paper, 0.9),
                color: theme.palette.primary.main,
                width: 48,
                height: 48,
                '&:hover': {
                  backgroundColor: alpha(theme.palette.primary.main, 0.1),
                },
                '&:disabled': {
                  opacity: 0.5
                },
                zIndex: 2,
                boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
              }}
            >
              <ChevronRight size={24} />
            </IconButton>
          )}

          {/* –í–∏–±—ñ—Ä –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–ª–∞–π–¥—É */}
          <Box sx={{
            position: 'absolute',
            top: 16,
            right: 16,
            background: theme.palette.primary.main,
            color: 'white',
            borderRadius: '20px',
            px: 2,
            py: 0.5,
            fontSize: '0.8rem',
            fontWeight: 600,
            display: 'flex',
            alignItems: 'center',
            gap: 0.5,
            boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
          }}>
            <Check size={16} />
            –í–∏–±—Ä–∞–Ω–æ
          </Box>
        </Box>
      </Card>

      {/* –ù–∞–≤—ñ–≥–∞—Ü—ñ–π–Ω—ñ —Ç–æ—á–∫–∏ */}
      {memoizedSlides.length > 1 && (
        <Box sx={{ 
          display: 'flex', 
          justifyContent: 'center', 
          alignItems: 'center',
          gap: 1,
          mt: 3
        }}>
          {memoizedSlides.map((_, index) => (
            <Box
              key={index}
              onClick={() => {
                setCurrentSlideIndex(index);
                const slide = memoizedSlides[index];
                if (slide && previews[slide.id]?.url) {
                  onPreviewSelect(slide.id, previews[slide.id].url);
                }
              }}
              sx={{
                width: currentSlideIndex === index ? 12 : 8,
                height: currentSlideIndex === index ? 12 : 8,
                borderRadius: '50%',
                backgroundColor: currentSlideIndex === index 
                  ? theme.palette.primary.main 
                  : alpha(theme.palette.grey[400], 0.5),
                cursor: 'pointer',
                transition: 'all 0.3s ease',
                transform: currentSlideIndex === index ? 'scale(1.2)' : 'scale(1)',
                '&:hover': {
                  backgroundColor: currentSlideIndex === index 
                    ? theme.palette.primary.dark 
                    : alpha(theme.palette.grey[400], 0.8),
                  transform: 'scale(1.1)'
                }
              }}
            />
          ))}
        </Box>
      )}

      {/* –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å–ª–∞–π–¥—ñ–≤ */}
      {memoizedSlides.length === 0 && (
        <Box sx={{ 
          textAlign: 'center', 
          py: 4,
          color: 'text.secondary'
        }}>
          <ImageIcon size={48} />
          <Typography variant="body1" sx={{ mt: 2 }}>
            –ù–µ–º–∞—î —Å–ª–∞–π–¥—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é
          </Typography>
        </Box>
      )}
    </Box>
  );
};

export default PreviewSelector; 