import React, { useMemo, useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Grid,
  Paper,
  LinearProgress,
  Chip,
  useMediaQuery
} from '@mui/material';
import { alpha, useTheme } from '@mui/material/styles';
import { AlertTriangle } from 'lucide-react';
import { useTranslation } from 'react-i18next';
import TemplateSlideCard from './TemplateSlideCard';
import SlideCommentButton from './SlideCommentButton';
import { SimpleSlide, SlideGenerationProgress } from '@/types/chat';
import { SlideComment } from '@/types/templates';
import { getLocalThumbnailStorage } from '@/services/slides/LocalThumbnailService';

export interface TemplateSlideGridProps {
  // –î–∞–Ω—ñ —Å–ª–∞–π–¥—ñ–≤
  slides: SimpleSlide[];
  totalSlides: number;
  
  // –ü—Ä–æ–≥—Ä–µ—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
  generationProgress: Map<string, number>;
  slideProgresses?: SlideGenerationProgress[];
  
  // UI —Å—Ç–∞–Ω
  selectedSlideId?: string;
  isGenerating?: boolean;
  
  // Callbacks
  onSlideSelect?: (slideId: string) => void;
  onSlidePreview?: (slideIndex: number) => void;
  onSlideFullscreen?: (slideIndex: number) => void;
  
  // –ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ —Å–ª–∞–π–¥—ñ–≤
  showCommentButtons?: boolean;
  slideComments?: SlideComment[];
  onAddSlideComment?: (comment: Omit<SlideComment, 'id' | 'timestamp'>) => void;
  
  // –û–ø—Ü—ñ—ó –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  showStats?: boolean;
  compact?: boolean;
}

const TemplateSlideGrid: React.FC<TemplateSlideGridProps> = ({
  slides,
  totalSlides,
  generationProgress,
  slideProgresses = [],
  selectedSlideId,
  isGenerating = false,
  onSlideSelect,
  onSlidePreview,
  onSlideFullscreen,
  showCommentButtons = false,
  slideComments = [],
  onAddSlideComment,
  showStats = true,
  compact = false
}) => {
  const theme = useTheme();
  const { t } = useTranslation('common');
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const isTablet = useMediaQuery(theme.breakpoints.down('lg'));
  
  // –õ–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –ø—Ä–µ–≤—å—é
  const [slidePreviews, setSlidePreviews] = useState<Record<string, string>>({});
  const thumbnailService = getLocalThumbnailStorage();

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—ñ–≤
  useEffect(() => {
    const loadPreviews = async () => {
      console.log(`üîç [TemplateSlideGrid] Loading previews for ${slides.length} slides`);
      

      
      for (const slide of slides) {
        console.log(`üîç [TemplateSlideGrid] Checking slide ${slide.id}:`, {
          title: slide.title,
          hasHtmlContent: !!slide.htmlContent,
          hasPreviewInState: !!slidePreviews[slide.id],
          htmlContentLength: slide.htmlContent?.length || 0
        });
        
        if (slide.htmlContent && !slidePreviews[slide.id]) {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø—Ä–µ–≤—å—é –≤ LocalThumbnailService
          const existingPreview = thumbnailService.get(slide.id);
          console.log(`üîç [TemplateSlideGrid] LocalThumbnailService check for ${slide.id}:`, {
            hasExistingPreview: !!existingPreview,
            previewLength: existingPreview?.length || 0
          });
          
          if (existingPreview) {
            console.log(`‚úÖ [TemplateSlideGrid] Loading existing preview for slide ${slide.id}`);
            setSlidePreviews(prev => ({
              ...prev,
              [slide.id]: existingPreview
            }));
          } else {
            console.log(`‚ö†Ô∏è [TemplateSlideGrid] No existing preview found for slide ${slide.id}, will wait for generation`);
          }
        }
      }
    };

    loadPreviews();
  }, [slides, slidePreviews, thumbnailService]);

  // –†–µ–∞–∫—Ç–∏–≤–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é (–ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏)
  useEffect(() => {
    if (slides.length === 0) return;

    const interval = setInterval(() => {
      let hasNewPreviews = false;
      const newPreviews: Record<string, string> = {};

      for (const slide of slides) {
        if (slide.htmlContent && !slidePreviews[slide.id]) {
          const existingPreview = thumbnailService.get(slide.id);
          if (existingPreview) {
            console.log(`üîÑ [TemplateSlideGrid] Found new preview for slide ${slide.id} during reactive check`);
            newPreviews[slide.id] = existingPreview;
            hasNewPreviews = true;
          }
        }
      }

      if (hasNewPreviews) {
        setSlidePreviews(prev => ({
          ...prev,
          ...newPreviews
        }));
      }
    }, 2000);

      return () => clearInterval(interval);
  }, [slides, slidePreviews, thumbnailService]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—á–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é
  const generateMissingPreviews = async () => {
    console.log('üîß [TemplateSlideGrid] Manually generating missing previews');
    
    for (const slide of slides) {
      if (slide.htmlContent && !slidePreviews[slide.id] && !thumbnailService.get(slide.id)) {
        console.log(`üé® [TemplateSlideGrid] Manually generating preview for slide ${slide.id}`);
        try {
          await thumbnailService.generateThumbnail(slide.id, slide.htmlContent);
          const newPreview = thumbnailService.get(slide.id);
          if (newPreview) {
            setSlidePreviews(prev => ({
              ...prev,
              [slide.id]: newPreview
            }));
            console.log(`‚úÖ [TemplateSlideGrid] Manual preview generation successful for slide ${slide.id}`);
          }
        } catch (error) {
          console.error(`‚ùå [TemplateSlideGrid] Manual preview generation failed for slide ${slide.id}:`, error);
        }
      }
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –≤—ñ–¥—Å—É—Ç–Ω—ñ—Ö –ø—Ä–µ–≤—å—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤
  useEffect(() => {
    if (slides.length === 0) return;

    const timer = setTimeout(() => {
      const slidesWithoutPreviews = slides.filter(slide => 
        slide.htmlContent && !slidePreviews[slide.id] && !thumbnailService.get(slide.id)
      );
      
      if (slidesWithoutPreviews.length > 0) {
        console.log(`üîß [TemplateSlideGrid] Auto-generating ${slidesWithoutPreviews.length} missing previews after delay`);
        generateMissingPreviews();
      }
    }, 5000);

    return () => clearTimeout(timer);
  }, [slides]);

  // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–æ–∑–º—ñ—Ä—É –µ–∫—Ä–∞–Ω—É
  const getGridColumns = () => {
    if (isMobile) return 1;
    if (isTablet) return 2;
    return totalSlides <= 4 ? 2 : 3;
  };

  // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const stats = useMemo(() => {
    const completedSlides = slides.filter(slide => slide.status === 'completed').length;
    const generatingSlides = slides.filter(slide => slide.status === 'generating').length;
    const errorSlides = slides.filter(slide => slide.status === 'draft' && !isGenerating).length;
    const pendingSlides = totalSlides - slides.length;
    
    const overallProgress = totalSlides > 0 ? (completedSlides / totalSlides) * 100 : 0;
    
    return {
      completed: completedSlides,
      generating: generatingSlides,
      pending: pendingSlides,
      errors: errorSlides,
      total: totalSlides,
      overallProgress
    };
  }, [slides, totalSlides, isGenerating]);

  // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤–Ω–∏–π —Å–ø–∏—Å–æ–∫ —Å–ª–∞–π–¥—ñ–≤ (–≤–∫–ª—é—á–∞—é—á–∏ placeholder'–∏)
  const allSlides = useMemo(() => {
    const slideList = [...slides];
    
    // –î–æ–¥–∞—î–º–æ placeholder —Å–ª–∞–π–¥–∏ –¥–ª—è —Ç–∏—Ö, —â–æ —â–µ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ
    while (slideList.length < totalSlides) {
      const slideNumber = slideList.length + 1;
      slideList.push({
        id: `placeholder_${slideNumber}`,
        title: `Slide ${slideNumber}`,
        content: '',
        htmlContent: '',
        status: 'draft' as const,
        isPlaceholder: true
      });
    }
    
    return slideList;
  }, [slides, totalSlides]);

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–ª—è —Å–ª–∞–π–¥—É
  const getSlideGenerationStatus = (slide: SimpleSlide, index: number) => {
    if (slide.status === 'completed') return 'completed';
    if (slide.status === 'generating') return 'generating';
    
    // –Ø–∫—â–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∞ —ñ —Å–ª–∞–π–¥ —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ 'generating'
    if (isGenerating && (slide.isPlaceholder || slide.status !== 'completed')) {
      return 'generating';
    }
    
    if (slide.isPlaceholder) return 'pending';
    return 'error';
  };

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É –¥–ª—è —Å–ª–∞–π–¥—É
  const getSlideProgress = (slide: SimpleSlide, index: number) => {
    const progressFromMap = generationProgress.get(slide.id) || 0;
    const progressFromArray = slideProgresses.find(p => p.slideNumber === index + 1)?.progress || 0;
    return Math.max(progressFromMap, progressFromArray);
  };

  // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –¥–ª—è —Å–ª–∞–π–¥—É
  const getCommentCount = (slideId: string) => {
    return slideComments.filter(comment => comment.slideId === slideId).length;
  };

  return (
    <Box sx={{ width: '100%', height: '100%' }}>




      {/* –°—ñ—Ç–∫–∞ —Å–ª–∞–π–¥—ñ–≤ */}
      <Box sx={{ 
        flex: 1,
        overflowY: 'auto',
        overflowX: 'hidden',
        pr: 1,
        '&::-webkit-scrollbar': {
          width: '6px',
        },
        '&::-webkit-scrollbar-track': {
          backgroundColor: alpha(theme.palette.grey[300], 0.2),
          borderRadius: '3px',
        },
        '&::-webkit-scrollbar-thumb': {
          backgroundColor: alpha(theme.palette.grey[400], 0.6),
          borderRadius: '3px',
          '&:hover': {
            backgroundColor: alpha(theme.palette.grey[500], 0.8),
          },
        },
      }}>
        <Grid container spacing={2}>
          {allSlides.map((slide, index) => (
            <Grid 
              size={{
                xs: 12,
                sm: getGridColumns() === 1 ? 12 : 6,
                md: getGridColumns() === 2 ? 6 : 4,
                lg: getGridColumns() === 3 ? 4 : 6
              }}
              key={slide.id}
            >
              <Box sx={{ position: 'relative' }} className="slide-card">
                <TemplateSlideCard
                  slide={slide}
                  index={index}
                  generationStatus={getSlideGenerationStatus(slide, index)}
                  generationProgress={getSlideProgress(slide, index)}
                  estimatedTime={30} // –ú–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–∏–º
                  isSelected={selectedSlideId === slide.id}
                  previewUrl={slidePreviews[slide.id] || slide.previewUrl || slide.thumbnailUrl}
                  onSelect={onSlideSelect}
                  onPreview={onSlidePreview}
                  onOpenFullscreen={onSlideFullscreen}
                  compact={compact}
                  showProgress={isGenerating}
                  showEstimatedTime={isGenerating}
                />
                
                {/* Comment Button */}
                {showCommentButtons && onAddSlideComment && !slide.isPlaceholder && slide.status === 'completed' && (
                  <SlideCommentButton
                    slideId={slide.id}
                    slideTitle={slide.title}
                    commentCount={getCommentCount(slide.id)}
                    onAddComment={onAddSlideComment}
                    disabled={isGenerating}
                  />
                )}
              </Box>
            </Grid>
          ))}
        </Grid>

        {/* Empty State */}
        {allSlides.length === 0 && (
          <Box sx={{
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            height: '300px',
            textAlign: 'center'
          }}>
            <Typography variant="h6" color="text.secondary" gutterBottom>
              {t('createLesson.step3.grid.noSlides')}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              {t('createLesson.step3.grid.slidesWillAppear')}
            </Typography>
          </Box>
        )}
      </Box>



      <style>
        {`
          @keyframes pulse {
            0%, 100% { opacity: 0.4; }
            50% { opacity: 1; }
          }
        `}
      </style>
    </Box>
  );
};

export default TemplateSlideGrid;
