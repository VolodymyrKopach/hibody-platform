'use client';

import React, { useEffect } from 'react';
import { useRouter, usePathname } from 'next/navigation';
import { useAuth } from '@/providers/AuthProvider';
import { LoadingScreen } from '@/components/ui/LoadingScreen';

interface RouteGuardProps {
  children: React.ReactNode;
}

const RouteGuard: React.FC<RouteGuardProps> = ({ children }) => {
  const { user, loading } = useAuth();
  const router = useRouter();
  const pathname = usePathname();

  // –ü—É–±–ª—ñ—á–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ - –¥–æ—Å—Ç—É–ø–Ω—ñ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  const publicRoutes = [
    '/auth/login',
    '/auth/register', 
    '/test'
  ];

  // –ú–∞—Ä—à—Ä—É—Ç–∏ —Ç—ñ–ª—å–∫–∏ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –±—É–¥—É—Ç—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ñ
  const authOnlyRoutes = [
    '/auth/login',
    '/auth/register'
  ];

  // –ó–∞—Ö–∏—â–µ–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ - –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  const protectedRoutes = [
    '/',
    '/chat',
    '/materials',
    '/account'
  ];

  const isPublicRoute = publicRoutes.some(route => pathname?.startsWith(route));
  const isAuthOnlyRoute = authOnlyRoutes.some(route => pathname?.startsWith(route));
  const isProtectedRoute = protectedRoutes.some(route => pathname === route || pathname?.startsWith(route + '/'));

  useEffect(() => {
    // –ù–µ —Ä–æ–±–∏–º–æ –Ω—ñ—á–æ–≥–æ –ø–æ–∫–∏ –π–¥–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    if (loading) return;

    console.log(`üõ°Ô∏è RouteGuard: Checking access to ${pathname}`);
    console.log(`üõ°Ô∏è RouteGuard: User status: ${user ? `Authenticated (${user.email})` : 'Not authenticated'}`);
    console.log(`üõ°Ô∏è RouteGuard: Route type: ${isPublicRoute ? 'Public' : isProtectedRoute ? 'Protected' : 'Unknown'}`);

    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —ñ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –Ω–∞ –∑–∞—Ö–∏—â–µ–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    if (!user && isProtectedRoute) {
      console.log(`üîÑ RouteGuard: Redirecting unauthorized user to login`);
      const redirectUrl = `/auth/login?redirectTo=${encodeURIComponent(pathname)}`;
      router.replace(redirectUrl);
      return;
    }

    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —ñ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    if (user && isAuthOnlyRoute) {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î redirectTo –ø–∞—Ä–∞–º–µ—Ç—Ä
      const urlParams = new URLSearchParams(window.location.search);
      const redirectTo = urlParams.get('redirectTo');
      
      if (redirectTo && redirectTo !== '/auth/login' && redirectTo !== '/auth/register') {
        console.log(`üîÑ RouteGuard: Redirecting authenticated user to saved URL: ${redirectTo}`);
        router.replace(redirectTo);
      } else {
        console.log(`üîÑ RouteGuard: Redirecting authenticated user to home`);
        router.replace('/');
      }
      return;
    }

    console.log(`‚úÖ RouteGuard: Access granted to ${pathname}`);
  }, [user, loading, pathname, router, isPublicRoute, isAuthOnlyRoute, isProtectedRoute]);

  // –ü–æ–∫–∞–∑—É—î–º–æ loading screen –ø–æ–∫–∏ –π–¥–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
  if (loading) {
    return <LoadingScreen message="–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø—É..." />;
  }

  // –î–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ –∑–∞—Ö–∏—â–µ–Ω–∏—Ö —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –ø–æ–∫–∞–∑—É—î–º–æ loading
  // –ø–æ–∫–∏ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —Ä–µ–¥–∏—Ä–µ–∫—Ç
  if (!user && isProtectedRoute) {
    return <LoadingScreen message="–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—Ö–æ–¥—É..." />;
  }

  // –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø–æ–∫–∞–∑—É—î–º–æ loading
  // –ø–æ–∫–∏ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —Ä–µ–¥–∏—Ä–µ–∫—Ç
  if (user && isAuthOnlyRoute) {
    return <LoadingScreen message="–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è..." />;
  }

  // –í —ñ–Ω—à–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö –ø–æ–∫–∞–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–Ω—Ç
  return <>{children}</>;
};

export default RouteGuard; 