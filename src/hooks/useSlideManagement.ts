import { useState, useCallback, useEffect, useRef, useMemo } from 'react';
import { SlideUIState, SimpleLesson, SimpleSlide, SaveLessonDialogData, Message } from '@/types/chat';
import { generateMessageId } from '@/utils/messageUtils';
import { getLocalThumbnailStorage } from '@/services/slides/LocalThumbnailService';

interface UseSlideManagementReturn {
  slideUIState: SlideUIState;
  saveDialogData: SaveLessonDialogData;
  slidePreviews: Record<string, string>;
  previewsUpdating: Set<string>;
  
  // Slide dialog functions
  openSlideDialog: (slideIndex: number) => void;
  closeSlideDialog: () => void;
  goToNextSlide: () => void;
  goToPrevSlide: () => void;
  
  // Slide selection functions
  toggleSlideSelection: (slideId: string) => void;
  selectAllSlides: () => void;
  deselectAllSlides: () => void;
  
  // Save dialog functions
  openSaveDialog: () => void;
  closeSaveDialog: () => void;
  handlePreviewSelect: (slideId: string, previewUrl: string) => void;
  updateSaveDialogData: (data: Partial<SaveLessonDialogData>) => void;
  saveSelectedSlides: (dialogData: SaveLessonDialogData) => Promise<Message>;
  
  // Slide preview functions (simplified)
  generateSlidePreview: (slideId: string, htmlContent: string) => Promise<string>;
  regenerateSlidePreview: (slideId: string) => void;
  loadLocalPreviews: () => void;
  
  // Lesson management
  updateCurrentLesson: (lesson: SimpleLesson | null) => void;
  toggleSlidePanelOpen: () => void;
  exportLesson: () => void;
}

const useSlideManagement = (
  messages: Message[],
  setMessages: React.Dispatch<React.SetStateAction<Message[]>>
): UseSlideManagementReturn => {
  
  // Slide UI States
  const [slideUIState, setSlideUIState] = useState<SlideUIState>({
    currentLesson: null,
    selectedSlideId: null,
    selectedSlides: new Set<string>(),
    viewMode: 'grid',
    slidePanelOpen: false,
    isGenerating: false,
    slideDialogOpen: false,
    currentSlideIndex: 0,
    isSavingLesson: false,
    saveDialogOpen: false
  });

  // –°—Ç–∞–Ω –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É
  const [saveDialogData, setSaveDialogData] = useState<SaveLessonDialogData>({
    title: '',
    description: '',
    subject: '',
    ageGroup: '',
    selectedPreviewId: null,
    previewUrl: null
  });

  // –õ–æ–∫–∞–ª—å–Ω—ñ –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—ñ–≤ (–≤ –ø–∞–º'—è—Ç—ñ –ø—ñ–¥ —á–∞—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è)
  const [slidePreviews, setSlidePreviews] = useState<Record<string, string>>({});
  const [previewsUpdating, setPreviewsUpdating] = useState<Set<string>>(new Set());

  // Ref –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∏ –ø–∞–Ω–µ–ª—å –±—É–ª–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –≤—Ä—É—á–Ω—É
  const panelOpenedManuallyRef = useRef<boolean>(false);

  // Local thumbnail storage instance
  const localThumbnailStorage = getLocalThumbnailStorage();

  // === –õ–û–ö–ê–õ–¨–ù–ï –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –ü–†–ï–í–¨–Æ ===

  // –°–ø—Ä–æ—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é (—Ç—ñ–ª—å–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ)
  const generateSlidePreview = useCallback(async (slideId: string, htmlContent: string): Promise<string> => {
    console.log('üé® NEW PREVIEW: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É:', slideId);
    
    setPreviewsUpdating(prev => new Set(prev).add(slideId));

    try {
      // –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ
      const thumbnailBase64 = await localThumbnailStorage.generateThumbnail(slideId, htmlContent);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
      setSlidePreviews(prev => ({
        ...prev,
        [slideId]: thumbnailBase64
      }));

      console.log('‚úÖ NEW PREVIEW: –ü—Ä–µ–≤—å—é –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ:', slideId);
      return thumbnailBase64;
    } catch (error) {
      console.error('‚ùå NEW PREVIEW: –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:', error);
      throw error;
    } finally {
      setPreviewsUpdating(prev => {
        const newSet = new Set(prev);
        newSet.delete(slideId);
        return newSet;
      });
    }
  }, [localThumbnailStorage]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–∞–π–¥—É
  const regenerateSlidePreview = useCallback(async (slideId: string) => {
    if (!slideUIState.currentLesson?.slides) return;

    const slide = slideUIState.currentLesson.slides.find(s => s.id === slideId);
    if (!slide?.htmlContent) {
      console.warn('‚ö†Ô∏è NEW PREVIEW: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ª–∞–π–¥ –∞–±–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è:', slideId);
      return;
    }

    console.log('üîÑ NEW PREVIEW: –†–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É:', slideId);
    
    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–µ –ø—Ä–µ–≤—å—é
    localThumbnailStorage.delete(slideId);
    setSlidePreviews(prev => {
      const newPreviews = { ...prev };
      delete newPreviews[slideId];
      return newPreviews;
    });

    // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–µ
    await generateSlidePreview(slideId, slide.htmlContent);
  }, [slideUIState.currentLesson?.slides, generateSlidePreview, localThumbnailStorage]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö –ª–æ–∫–∞–ª—å–Ω–∏—Ö –ø—Ä–µ–≤—å—é
  const loadLocalPreviews = useCallback(() => {
    console.log('üì¶ NEW PREVIEW: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–∫–∞–ª—å–Ω–∏—Ö –ø—Ä–µ–≤—å—é');
    const allLocalPreviews = localThumbnailStorage.getAll();
    setSlidePreviews(allLocalPreviews);
  }, [localThumbnailStorage]);

  // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –ø—Ä–µ–≤—å—é –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–∏–º –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è–º
  const generatedPreviewsRef = useRef<Set<string>>(new Set());

  // DISABLED: Reactive thumbnail generation (now handled pre-store)
  // Slides should enter store with thumbnails already generated
  const slidesForPreviews = useMemo(() => {
    if (!slideUIState.currentLesson?.slides) return [];
    
    // Only generate for legacy slides that don't have thumbnailReady flag
    return slideUIState.currentLesson.slides.filter(slide => 
      !slide.isPlaceholder && // –ù–µ –≥–µ–Ω–µ—Ä—É—î–º–æ –¥–ª—è –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤
      !slide.thumbnailReady && // –ù–û–í–ò–ô –§–Ü–õ–¨–¢–†: –ù–µ –≥–µ–Ω–µ—Ä—É—î–º–æ –¥–ª—è –≥–æ—Ç–æ–≤–∏—Ö —Å–ª–∞–π–¥—ñ–≤
      slide.htmlContent && // –Ñ HTML –∫–æ–Ω—Ç–µ–Ω—Ç
      !localThumbnailStorage.has(slide.id) && // –ù–µ–º–∞—î –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é
      !generatedPreviewsRef.current.has(slide.id) // –©–µ –Ω–µ –≥–µ–Ω–µ—Ä—É–≤–∞–ª–∏
    );
  }, [slideUIState.currentLesson?.slides, localThumbnailStorage]);

  // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é —Ç—ñ–ª—å–∫–∏ –¥–ª—è LEGACY —Å–ª–∞–π–¥—ñ–≤ (–Ω–æ–≤—ñ —Å–ª–∞–π–¥–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç—å –≥–æ—Ç–æ–≤–∏–º–∏)
  useEffect(() => {
    if (slidesForPreviews.length === 0) {
      console.log('üìã [REACTIVE] No slides need reactive thumbnail generation (all slides ready)');
      return;
    }

    console.log(`üîÑ [REACTIVE] Found ${slidesForPreviews.length} legacy slides needing thumbnails:`, 
      slidesForPreviews.map(s => s.id));

    const generateNewPreviews = async () => {
      for (const slide of slidesForPreviews) {
        try {
          console.log('üÜï [LEGACY] Reactive generation for legacy slide:', slide.id);
          generatedPreviewsRef.current.add(slide.id); // –í—ñ–¥–º—ñ—á–∞—î–º–æ —è–∫ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ
          await generateSlidePreview(slide.id, slide.htmlContent);
        } catch (error) {
          console.error('‚ùå Legacy preview generation failed for slide:', slide.id, error);
          generatedPreviewsRef.current.delete(slide.id); // –ó–∞–±–∏—Ä–∞—î–º–æ –∑ –≤—ñ–¥–º—ñ—Ç–æ–∫ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        }
      }
    };

    generateNewPreviews();
  }, [slidesForPreviews, generateSlidePreview]);

  // === –§–£–ù–ö–¶–Ü–á –î–Ü–ê–õ–û–ì–Ü–í ===

  const openSlideDialog = useCallback((slideIndex: number) => {
    setSlideUIState(prev => ({
      ...prev,
      slideDialogOpen: true,
      currentSlideIndex: slideIndex
    }));
  }, []);

  const closeSlideDialog = useCallback(() => {
    setSlideUIState(prev => ({
      ...prev,
      slideDialogOpen: false
    }));
  }, []);

  const goToNextSlide = useCallback(() => {
    setSlideUIState(prev => {
      if (!prev.currentLesson?.slides) return prev;
      const nextIndex = prev.currentSlideIndex < prev.currentLesson.slides.length - 1 
        ? prev.currentSlideIndex + 1 
        : 0;
      return {
        ...prev,
        currentSlideIndex: nextIndex
      };
    });
  }, []);

  const goToPrevSlide = useCallback(() => {
    setSlideUIState(prev => {
      if (!prev.currentLesson?.slides) return prev;
      const prevIndex = prev.currentSlideIndex > 0 
        ? prev.currentSlideIndex - 1 
        : prev.currentLesson.slides.length - 1;
      return {
        ...prev,
        currentSlideIndex: prevIndex
      };
    });
  }, []);

  // === –§–£–ù–ö–¶–Ü–á –í–ò–ë–û–†–£ –°–õ–ê–ô–î–Ü–í ===

  const toggleSlideSelection = useCallback((slideId: string) => {
    setSlideUIState(prev => {
      const newSelectedSlides = new Set(prev.selectedSlides);
      if (newSelectedSlides.has(slideId)) {
        newSelectedSlides.delete(slideId);
      } else {
        newSelectedSlides.add(slideId);
      }
      return {
        ...prev,
        selectedSlides: newSelectedSlides
      };
    });
  }, []);

  const selectAllSlides = useCallback(() => {
    if (!slideUIState.currentLesson?.slides) return;
    
    const allSlideIds = new Set(slideUIState.currentLesson.slides.map(slide => slide.id));
    setSlideUIState(prev => ({
      ...prev,
      selectedSlides: allSlideIds
    }));
  }, [slideUIState.currentLesson?.slides]);

  const deselectAllSlides = useCallback(() => {
    setSlideUIState(prev => ({
      ...prev,
      selectedSlides: new Set<string>()
    }));
  }, []);

  // === –§–£–ù–ö–¶–Ü–á –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø ===

  const openSaveDialog = useCallback(() => {
    setSlideUIState(prev => ({
      ...prev,
      saveDialogOpen: true
    }));

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
    if (slideUIState.currentLesson) {
      setSaveDialogData({
        title: slideUIState.currentLesson.title || '',
        description: slideUIState.currentLesson.description || '',
        subject: slideUIState.currentLesson.subject || '',
        ageGroup: slideUIState.currentLesson.ageGroup || '',
        selectedPreviewId: null,
        previewUrl: null
      });
    }
  }, [slideUIState.currentLesson]);

  const closeSaveDialog = useCallback(() => {
    setSlideUIState(prev => ({
      ...prev,
      saveDialogOpen: false
    }));
  }, []);

  const handlePreviewSelect = useCallback((slideId: string, previewUrl: string) => {
    setSaveDialogData(prev => ({
      ...prev,
      selectedPreviewId: slideId,
      previewUrl: previewUrl
    }));
  }, []);

  const updateSaveDialogData = useCallback((data: Partial<SaveLessonDialogData>) => {
    setSaveDialogData(prev => ({
      ...prev,
      ...data
    }));
  }, []);

  // –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è–º —Ç—ñ–ª—å–∫–∏ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –ø—Ä–µ–≤—å—é –≤ Storage
  const saveSelectedSlides = useCallback(async (dialogData: SaveLessonDialogData): Promise<Message> => {
    console.log('üíæ NEW SAVE: –ü–æ—á–∞—Ç–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—ó');
    
    if (!slideUIState.currentLesson || slideUIState.selectedSlides.size === 0) {
      throw new Error('–ù–µ–º–∞—î —Å–ª–∞–π–¥—ñ–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è');
    }

    setSlideUIState(prev => ({ ...prev, isSavingLesson: true }));

    try {
      const selectedSlideIds = Array.from(slideUIState.selectedSlides);
      console.log('üìã NEW SAVE: –°–ª–∞–π–¥–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', selectedSlideIds);

      // 1. –ü–Ü–î–ì–û–¢–û–í–ö–ê THUMBNAIL DATA –î–õ–Ø –í–Ü–î–ü–†–ê–í–ö–ò –ù–ê –°–ï–†–í–ï–†
      let thumbnailData: string | null = null;
      
      if (dialogData.selectedPreviewId && dialogData.previewUrl) {
        console.log('üéØ NEW SAVE: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ thumbnail data –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', {
          slideId: dialogData.selectedPreviewId,
          previewUrlLength: dialogData.previewUrl.length,
          isDataUrl: dialogData.previewUrl.startsWith('data:')
        });
        
        // –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ preview URL –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫–µ—à—ñ, —è–∫—â–æ –π–æ–≥–æ —Ç–∞–º –Ω–µ–º–∞—î
        if (!localThumbnailStorage.has(dialogData.selectedPreviewId)) {
          console.log('üíæ NEW SAVE: Storing preview URL in local cache');
          localThumbnailStorage.set(dialogData.selectedPreviewId, dialogData.previewUrl);
        }
        
        // –û—Ç—Ä–∏–º—É—î–º–æ thumbnail data –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        thumbnailData = localThumbnailStorage.get(dialogData.selectedPreviewId);
        
        console.log('üìä NEW SAVE: Thumbnail data –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ:', {
          hasThumbnailData: !!thumbnailData,
          thumbnailDataLength: thumbnailData?.length || 0
        });
      } else {
        console.log('‚ö†Ô∏è NEW SAVE: –ü—Ä–µ–≤—å—é –¥–ª—è —É—Ä–æ–∫—É –Ω–µ –≤–∏–±—Ä–∞–Ω–æ', {
          hasSelectedPreviewId: !!dialogData.selectedPreviewId,
          hasPreviewUrl: !!dialogData.previewUrl
        });
      }

      // 2. –ü–Ü–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ò–• –î–õ–Ø –í–Ü–î–ü–†–ê–í–ö–ò –ù–ê –°–ï–†–í–ï–†
      console.log('üì§ NEW SAVE: –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
      console.log('üéØ NEW SAVE: –í–∏–±—Ä–∞–Ω–∏–π –ø—Ä–µ–≤—å—é:', {
        slideId: dialogData.selectedPreviewId,
        hasPreviewUrl: !!dialogData.previewUrl,
        hasThumbnailData: !!thumbnailData
      });

      // 3. –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –ù–ê –°–ï–†–í–ï–† (–°–ï–†–í–ï–† –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –ó–ù–ê–ô–î–ï TEMPORARY IMAGES –í HTML)
      console.log('üîÑ NEW SAVE: Preparing data for server (auto-migration enabled)...');

      const response = await fetch('/api/lessons', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          title: dialogData.title,
          description: dialogData.description,
          subject: dialogData.subject,
          targetAge: dialogData.ageGroup,
          duration: slideUIState.currentLesson.duration,
          thumbnail_data: thumbnailData, // –¢—ñ–ª—å–∫–∏ –≤–∏–±—Ä–∞–Ω–∏–π –ø—Ä–µ–≤—å—é
          slides: selectedSlideIds.map(slideId => {
            const slide = slideUIState.currentLesson!.slides.find(s => s.id === slideId)!;
            return {
              title: slide.title,
              description: slide.content,
              htmlContent: slide.htmlContent // –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞–π–¥–µ temporary URLs —Ç—É—Ç
            };
          })
          // –ù–µ –ø–µ—Ä–µ–¥–∞—î–º–æ temporaryImages - —Å–µ—Ä–≤–µ—Ä –≤–∏—Ç—è–≥–Ω–µ —ó—Ö –∑ HTML –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
        })
      });

      if (!response.ok) {
        throw new Error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ');
      }

      const savedLesson = await response.json();
      console.log('‚úÖ NEW SAVE: –£—Ä–æ–∫ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ:', savedLesson);

      // 4. –°–¢–í–û–†–Æ–Ñ–ú–û –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø –ü–†–û –£–°–ü–Ü–•
      const successMessage: Message = {
        id: generateMessageId(),
        text: `‚úÖ **–£—Ä–æ–∫ "${dialogData.title}" —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!**\n\nüìö **–î–µ—Ç–∞–ª—ñ:**\n- –°–ª–∞–π–¥—ñ–≤ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${selectedSlideIds.length}\n- –ü—Ä–µ–¥–º–µ—Ç: ${dialogData.subject}\n- –í—ñ–∫–æ–≤–∞ –≥—Ä—É–ø–∞: ${dialogData.ageGroup}\n- –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –º—ñ–≥—Ä–æ–≤–∞–Ω—ñ –≤ –ø–æ—Å—Ç—ñ–π–Ω–µ —Å—Ö–æ–≤–∏—â–µ\n\nüéØ –£—Ä–æ–∫ —Ç–µ–ø–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤.`,
        sender: 'ai',
        timestamp: new Date(),
        status: 'delivered'
      };

      setMessages(prev => [...prev, successMessage]);

      // 5. –û–ß–ò–©–£–Ñ–ú–û –°–¢–ê–ù –ü–Ü–°–õ–Ø –£–°–ü–Ü–®–ù–û–ì–û –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø
      setSlideUIState(prev => ({
        ...prev,
        selectedSlides: new Set<string>(),
        saveDialogOpen: false
      }));

      return successMessage;

    } catch (error) {
      console.error('‚ùå NEW SAVE: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:', error);
      
      const errorMessage: Message = {
        id: generateMessageId(),
        text: `‚ùå **–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É**\n\n${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}\n\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.`,
        sender: 'ai',
        timestamp: new Date(),
        status: 'delivered'
      };

      setMessages(prev => [...prev, errorMessage]);
      throw error;
    } finally {
      setSlideUIState(prev => ({ ...prev, isSavingLesson: false }));
    }
  }, [slideUIState.currentLesson, slideUIState.selectedSlides, localThumbnailStorage, setMessages]);

  // === –£–ü–†–ê–í–õ–Ü–ù–ù–Ø –£–†–û–ö–ê–ú–ò ===

  const updateCurrentLesson = useCallback((lesson: SimpleLesson | null) => {
    
    setSlideUIState(prev => {
      // –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫—É
      if (lesson && (!prev.currentLesson || lesson.id !== prev.currentLesson.id)) {
        panelOpenedManuallyRef.current = false;

      }
      
      return {
        ...prev,
        currentLesson: lesson
      };
    });

    // –û—á–∏—â—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –∫–µ—à –ø—Ä–∏ –∑–º—ñ–Ω—ñ —É—Ä–æ–∫—É
    if (lesson) {

      localThumbnailStorage.clear();
      setSlidePreviews({});
      generatedPreviewsRef.current.clear(); // –û—á–∏—â—É—î–º–æ —Ç—Ä–µ–∫—ñ–Ω–≥ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –ø—Ä–µ–≤—å—é
    }
  }, [localThumbnailStorage]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ —Å–ª–∞–π–¥—ñ–≤ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–µ—Ä—à–æ–≥–æ —Å–ª–∞–π–¥—É
  useEffect(() => {
    if (slideUIState.currentLesson?.slides && 
        slideUIState.currentLesson.slides.length > 0 && 
        !slideUIState.slidePanelOpen &&
        !panelOpenedManuallyRef.current) {
      

      
      setSlideUIState(prev => ({
        ...prev,
        slidePanelOpen: true
      }));
    }
  }, [slideUIState.currentLesson?.slides?.length, slideUIState.slidePanelOpen]);

  const toggleSlidePanelOpen = useCallback(() => {
    panelOpenedManuallyRef.current = true;
    
    setSlideUIState(prev => {

      return {
        ...prev,
        slidePanelOpen: !prev.slidePanelOpen
      };
    });
  }, []);

  const exportLesson = useCallback(() => {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ HTML
    const htmlMessage = messages.find(msg => 
      msg.sender === 'ai' && msg.text.includes('```html')
    );
    if (htmlMessage) {
      const htmlMatch = htmlMessage.text.match(/```html\n([\s\S]*?)\n```/);
      if (htmlMatch) {
        const blob = new Blob([htmlMatch[1]], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${slideUIState.currentLesson?.title.replace(/[^a-zA-Z0-9]/g, '-') || 'lesson'}.html`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }
    }
  }, [messages, slideUIState.currentLesson?.title]);

  return {
    slideUIState,
    saveDialogData,
    slidePreviews,
    previewsUpdating,
    
    // Slide dialog functions
    openSlideDialog,
    closeSlideDialog,
    goToNextSlide,
    goToPrevSlide,
    
    // Slide selection functions
    toggleSlideSelection,
    selectAllSlides,
    deselectAllSlides,
    
    // Save dialog functions
    openSaveDialog,
    closeSaveDialog,
    handlePreviewSelect,
    updateSaveDialogData,
    saveSelectedSlides,
    
    // Slide preview functions (simplified)
    generateSlidePreview,
    regenerateSlidePreview,
    loadLocalPreviews,
    
    // Lesson management
    updateCurrentLesson,
    toggleSlidePanelOpen,
    exportLesson
  };
};

export default useSlideManagement; 