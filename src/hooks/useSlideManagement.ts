import { useState, useCallback, useEffect, useRef } from 'react';
import { SlideUIState, SimpleLesson, SimpleSlide, SaveLessonDialogData, Message } from '@/types/chat';
import { generateSlideThumbnail, generateFallbackPreview } from '@/utils/slidePreview';
import { generateMessageId } from '@/utils/messageUtils';

interface UseSlideManagementReturn {
  slideUIState: SlideUIState;
  saveDialogData: SaveLessonDialogData;
  slidePreviews: Record<string, string>;
  previewsUpdating: Set<string>;
  
  // Slide dialog functions
  openSlideDialog: (slideIndex: number) => void;
  closeSlideDialog: () => void;
  goToNextSlide: () => void;
  goToPrevSlide: () => void;
  
  // Slide selection functions
  toggleSlideSelection: (slideId: string) => void;
  selectAllSlides: () => void;
  deselectAllSlides: () => void;
  
  // Save dialog functions
  openSaveDialog: () => void;
  closeSaveDialog: () => void;
  handlePreviewSelect: (slideId: string, previewUrl: string) => void;
  updateSaveDialogData: (data: Partial<SaveLessonDialogData>) => void;
  saveSelectedSlides: (dialogData: SaveLessonDialogData) => Promise<Message>;
  
  // Slide preview functions
  generateSlidePreview: (slide: SimpleSlide, forceRegenerate?: boolean) => Promise<string>;
  regenerateSlidePreview: (slideId: string) => void;
  forceRefreshAllPreviews: () => void;
  
  // Lesson management
  updateCurrentLesson: (lesson: SimpleLesson | null) => void;
  toggleSlidePanelOpen: () => void;
  exportLesson: () => void;
}

const useSlideManagement = (
  messages: Message[],
  setMessages: React.Dispatch<React.SetStateAction<Message[]>>
): UseSlideManagementReturn => {
  
  // Slide UI States
  const [slideUIState, setSlideUIState] = useState<SlideUIState>({
    currentLesson: null,
    selectedSlideId: null,
    selectedSlides: new Set<string>(),
    viewMode: 'grid',
    slidePanelOpen: false,
    isGenerating: false,
    slideDialogOpen: false,
    currentSlideIndex: 0,
    isSavingLesson: false,
    saveDialogOpen: false
  });

  // –°—Ç–∞–Ω –¥–ª—è –¥—ñ–∞–ª–æ–≥—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É
  const [saveDialogData, setSaveDialogData] = useState<SaveLessonDialogData>({
    title: '',
    description: '',
    subject: '',
    ageGroup: '',
    selectedPreviewId: null,
    previewUrl: null
  });

  // –°—Ç–∞–Ω –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—ñ–≤
  const [slidePreviews, setSlidePreviews] = useState<Record<string, string>>({});
  const [previewsUpdating, setPreviewsUpdating] = useState<Set<string>>(new Set());

  // Refs –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–º —Ü–∏–∫–ª–∞–º
  const previewGenerationRef = useRef<Set<string>>(new Set());
  const lastUpdateTimeRef = useRef<Record<string, number>>({});
  
  // Ref –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —á–∏ –ø–∞–Ω–µ–ª—å –±—É–ª–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –≤—Ä—É—á–Ω—É
  const panelOpenedManuallyRef = useRef<boolean>(false);

  // –î–æ–¥–∞—î–º–æ ref –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –ø—Ä–µ–≤—å—é
  const slidePreviewsRef = useRef<Record<string, string>>({});
  
  // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ ref –∑ state
  useEffect(() => {
    slidePreviewsRef.current = slidePreviews;
  }, [slidePreviews]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—É (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞)
  const generateSlidePreview = useCallback(async (slide: SimpleSlide, forceRegenerate = false): Promise<string> => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –ø—Ä–µ–≤—å—é –¥–ª—è —Ü—å–æ–≥–æ —Å–ª–∞–π–¥—É
    if (previewGenerationRef.current.has(slide.id) && !forceRegenerate) {
      console.log(`‚è≥ –ü—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id} –≤–∂–µ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ...`);
      return slidePreviewsRef.current[slide.id] || '';
    }

    // –Ø–∫—â–æ –ø—Ä–µ–≤—å—é –≤–∂–µ —ñ—Å–Ω—É—î —ñ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ
    if (slidePreviewsRef.current[slide.id] && !forceRegenerate) {
      console.log(`‚ôªÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –∫–µ—à–æ–≤–∞–Ω–µ –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}`);
      return slidePreviewsRef.current[slide.id];
    }

    // –î–æ–¥–∞—î–º–æ —Å–ª–∞–π–¥ –¥–æ —Å–ø–∏—Å–∫—É —Ç–∏—Ö, —â–æ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è
    previewGenerationRef.current.add(slide.id);
    setPreviewsUpdating(prev => new Set(prev).add(slide.id));

    try {
      console.log(`üéØ –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}...`);
      console.log(`üìÑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–µ—Ä—à—ñ 200 —Å–∏–º–≤–æ–ª—ñ–≤): ${slide.htmlContent.substring(0, 200)}...`);

      // –°–ø—Ä–æ—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è thumbnail
      const thumbnailUrl = await generateSlideThumbnail(slide.htmlContent, {
        width: 640,
        height: 480,
        quality: 0.85,
        background: '#ffffff'
      });

      console.log(`üéâ –£—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}`);
      console.log(`üìä –†–æ–∑–º—ñ—Ä thumbnail: ${Math.round(thumbnailUrl.length / 1024)}KB`);

      // –ö–µ—à—É—î–º–æ –ø—Ä–µ–≤—å—é
      setSlidePreviews(prev => ({
        ...prev,
        [slide.id]: thumbnailUrl
      }));

      // –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      lastUpdateTimeRef.current[slide.id] = Date.now();

      return thumbnailUrl;
    } catch (error) {
      console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}:`, error);
      
      // –ì–µ–Ω–µ—Ä—É—î–º–æ fallback –ø—Ä–µ–≤—å—é
      console.log(`üé® –ì–µ–Ω–µ—Ä—É—î–º–æ fallback –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}...`);
      const fallbackUrl = generateFallbackPreview();
      
      // –ö–µ—à—É—î–º–æ fallback –ø—Ä–µ–≤—å—é
      setSlidePreviews(prev => ({
        ...prev,
        [slide.id]: fallbackUrl
      }));

      console.log(`‚úÖ Fallback –ø—Ä–µ–≤—å—é –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –¥–ª—è —Å–ª–∞–π–¥—É ${slide.id}`);
      return fallbackUrl;
    } finally {
      // –í–∏–¥–∞–ª—è—î–º–æ –∑ —Å–ø–∏—Å–∫—É —Ç–∏—Ö, —â–æ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è
      previewGenerationRef.current.delete(slide.id);
      setPreviewsUpdating(prev => {
        const newSet = new Set(prev);
        newSet.delete(slide.id);
        return newSet;
      });
    }
  }, []);

  // Ref –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –æ–±—Ä–æ–±–ª–µ–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó —Å–ª–∞–π–¥—ñ–≤
  const processedSlidesRef = useRef<Set<string>>(new Set());

  // –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π useEffect –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä—É–≤–∞–Ω–Ω—è –ø—Ä–µ–≤—å—é
  useEffect(() => {
    if (!slideUIState.currentLesson?.slides) return;

    const generatePreviewsForSlides = async () => {
      for (const slide of slideUIState.currentLesson!.slides) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–µ–≤—å—é
        const isCurrentlyGenerating = previewGenerationRef.current.has(slide.id);
        const lastUpdateTime = lastUpdateTimeRef.current[slide.id] || 0;
        const slideUpdateTime = slide.updatedAt?.getTime() || 0;
        
        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø—Ä–µ–≤—å—é –∑ ref (–Ω–µ –∑ state!)
        const hasPreview = !!slidePreviewsRef.current[slide.id];
        const wasProcessed = processedSlidesRef.current.has(slide.id);
        
        // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–µ–≤—å—é —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ:
        // 1. –ù–µ–º–∞—î –ø—Ä–µ–≤—å—é –∑–æ–≤—Å—ñ–º –Ü —Å–ª–∞–π–¥ —â–µ –Ω–µ –æ–±—Ä–æ–±–ª—è–ª–∏
        // 2. –°–ª–∞–π–¥ –±—É–≤ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø—Ä–µ–≤—å—é (–ø—Ä–æ—Ç—è–≥–æ–º –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 60 —Å–µ–∫—É–Ω–¥)
        // 3. –ù–µ –≥–µ–Ω–µ—Ä—É—î—Ç—å—Å—è –∑–∞—Ä–∞–∑
        const shouldGenerate = (!hasPreview && !wasProcessed) || 
          (slideUpdateTime > lastUpdateTime && slideUpdateTime > Date.now() - 60000);

        if (shouldGenerate && !isCurrentlyGenerating) {
          console.log(`üöÄ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è ${hasPreview ? '–æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ' : '–Ω–æ–≤–æ–≥–æ'} —Å–ª–∞–π–¥—É ${slide.id}`);
          
          // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —Å–ª–∞–π–¥ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π
          processedSlidesRef.current.add(slide.id);
          
          // –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–µ–≤—å—é –∑ –Ω–µ–≤–µ–ª–∏–∫–æ—é –∑–∞—Ç—Ä–∏–º–∫–æ—é –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—é
          setTimeout(() => {
            generateSlidePreview(slide, hasPreview);
          }, 100);
        }
      }
    };

    generatePreviewsForSlides();
  }, [slideUIState.currentLesson?.slides]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ —Å–ª–∞–π–¥—ñ–≤ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–µ—Ä—à–æ–≥–æ —Å–ª–∞–π–¥—É
  useEffect(() => {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —É—Ä–æ–∫ –∑ —Å–ª–∞–π–¥–∞–º–∏ —ñ –ø–∞–Ω–µ–ª—å —â–µ –Ω–µ –≤—ñ–¥–∫—Ä–∏—Ç–∞
    if (slideUIState.currentLesson?.slides && 
        slideUIState.currentLesson.slides.length > 0 && 
        !slideUIState.slidePanelOpen &&
        !panelOpenedManuallyRef.current) {
      
      console.log('üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–∞–Ω–µ–ª—å —Å–ª–∞–π–¥—ñ–≤ –¥–ª—è –ø–µ—Ä—à–æ–≥–æ —Å–ª–∞–π–¥—É');
      
      setSlideUIState(prev => ({
        ...prev,
        slidePanelOpen: true
      }));
    }
  }, [slideUIState.currentLesson?.slides?.length, slideUIState.slidePanelOpen]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–µ–≤—å—é
  const regenerateSlidePreview = useCallback((slideId: string) => {
    const slide = slideUIState.currentLesson?.slides.find(s => s.id === slideId);
    if (slide) {
      console.log(`üîÑ –ü—Ä–∏–º—É—Å–æ–≤–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–µ–≤—å—é –¥–ª—è —Å–ª–∞–π–¥—É ${slideId}`);
      
      // –û—á–∏—â–∞—î–º–æ –∫–µ—à –ø—Ä–µ–≤—å—é —Ç–∞ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      setSlidePreviews(prev => {
        const newPreviews = { ...prev };
        delete newPreviews[slideId];
        return newPreviews;
      });
      
      delete lastUpdateTimeRef.current[slideId];
      
      // –í–∏–¥–∞–ª—è—î–º–æ –∑ processed slides —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ —Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏
      processedSlidesRef.current.delete(slideId);
      
      // –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–µ –ø—Ä–µ–≤—å—é
      setTimeout(() => {
        generateSlidePreview(slide, true);
      }, 100);
    }
  }, [slideUIState.currentLesson?.slides]);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–µ–≤—å—é –≤—Å—ñ—Ö —Å–ª–∞–π–¥—ñ–≤
  const forceRefreshAllPreviews = useCallback(() => {
    if (slideUIState.currentLesson?.slides) {
      console.log('üîÑ –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–µ–≤—å—é —Å–ª–∞–π–¥—ñ–≤');
      
      // –û—á–∏—â–∞—î–º–æ –≤–µ—Å—å –∫–µ—à –ø—Ä–µ–≤—å—é —Ç–∞ —á–∞—Å–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
      setSlidePreviews({});
      lastUpdateTimeRef.current = {};
      
      // –û—á–∏—â–∞—î–º–æ processed slides —â–æ–± –º–æ–∂–Ω–∞ –±—É–ª–æ —Ä–µ–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤—Å—ñ
      processedSlidesRef.current.clear();
      
      // –†–µ–≥–µ–Ω–µ—Ä—É—î–º–æ –≤—Å—ñ –ø—Ä–µ–≤—å—é –∑ –∑–∞—Ç—Ä–∏–º–∫–æ—é
      slideUIState.currentLesson.slides.forEach((slide, index) => {
        setTimeout(() => {
          generateSlidePreview(slide, true);
        }, index * 200); // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —Å–ª–∞–π–¥–∞–º–∏
      });
    }
  }, [slideUIState.currentLesson?.slides]);

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥—ñ–∞–ª–æ–≥–æ–º —Å–ª–∞–π–¥—ñ–≤
  const openSlideDialog = useCallback((slideIndex: number) => {
    setSlideUIState(prev => ({
      ...prev,
      slideDialogOpen: true,
      currentSlideIndex: slideIndex
    }));
  }, []);

  const closeSlideDialog = useCallback(() => {
    setSlideUIState(prev => ({
      ...prev,
      slideDialogOpen: false
    }));
  }, []);

  const goToNextSlide = useCallback(() => {
    setSlideUIState(prev => {
      if (prev.currentLesson && prev.currentSlideIndex < prev.currentLesson.slides.length - 1) {
        return {
          ...prev,
          currentSlideIndex: prev.currentSlideIndex + 1
        };
      }
      return prev;
    });
  }, []);

  const goToPrevSlide = useCallback(() => {
    setSlideUIState(prev => {
      if (prev.currentSlideIndex > 0) {
        return {
          ...prev,
          currentSlideIndex: prev.currentSlideIndex - 1
        };
      }
      return prev;
    });
  }, []);

  // –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–∏–±–æ—Ä–æ–º —Å–ª–∞–π–¥—ñ–≤
  const toggleSlideSelection = useCallback((slideId: string) => {
    setSlideUIState(prev => {
      const newSelectedSlides = new Set(prev.selectedSlides);
      if (newSelectedSlides.has(slideId)) {
        newSelectedSlides.delete(slideId);
      } else {
        newSelectedSlides.add(slideId);
      }
      return {
        ...prev,
        selectedSlides: newSelectedSlides
      };
    });
  }, []);

  const selectAllSlides = useCallback(() => {
    setSlideUIState(prev => {
      if (!prev.currentLesson) return prev;
      return {
        ...prev,
        selectedSlides: new Set(prev.currentLesson.slides.map(slide => slide.id))
      };
    });
  }, []);

  const deselectAllSlides = useCallback(() => {
    setSlideUIState(prev => ({
      ...prev,
      selectedSlides: new Set<string>()
    }));
  }, []);

  // –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É
  const openSaveDialog = useCallback(() => {
    if (!slideUIState.currentLesson || slideUIState.selectedSlides.size === 0) {
      return;
    }

    console.log('üíæ OPEN SAVE DIALOG: Dialog opening with lesson data:', {
      lessonTitle: slideUIState.currentLesson.title,
      lessonSubject: slideUIState.currentLesson.subject,
      lessonAgeGroup: slideUIState.currentLesson.ageGroup,
      selectedSlidesCount: slideUIState.selectedSlides.size,
      currentSlidePreviewsCount: Object.keys(slidePreviews).length,
      availablePreviews: Object.keys(slidePreviews),
      firstSlideId: slideUIState.currentLesson.slides?.[0]?.id
    });

    // –ó–∞–ø–æ–≤–Ω—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —É—Ä–æ–∫—É
    setSaveDialogData({
      title: slideUIState.currentLesson.title || '–ù–æ–≤–∏–π —É—Ä–æ–∫',
      description: slideUIState.currentLesson.description || `–£—Ä–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑ ${slideUIState.selectedSlides.size} —Å–ª–∞–π–¥—ñ–≤`,
      subject: slideUIState.currentLesson.subject || '–ó–∞–≥–∞–ª—å–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è',
      ageGroup: slideUIState.currentLesson.ageGroup || '8-9 —Ä–æ–∫—ñ–≤',
      selectedPreviewId: null,
      previewUrl: null
    });

    setSlideUIState(prev => ({ ...prev, saveDialogOpen: true }));
  }, [slideUIState.currentLesson, slideUIState.selectedSlides, slidePreviews]);

  // –ó–∞–∫—Ä–∏—Ç—Ç—è –¥—ñ–∞–ª–æ–≥—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  const closeSaveDialog = useCallback(() => {
    setSlideUIState(prev => ({ ...prev, saveDialogOpen: false }));
  }, []);

  // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–µ–≤—å—é
  const handlePreviewSelect = useCallback((slideId: string, previewUrl: string) => {
    setSaveDialogData(prev => ({
      ...prev,
      selectedPreviewId: slideId,
      previewUrl: previewUrl
    }));
  }, []);

  // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥—ñ–∞–ª–æ–≥—É –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
  const updateSaveDialogData = useCallback((data: Partial<SaveLessonDialogData>) => {
    setSaveDialogData(prev => ({ ...prev, ...data }));
  }, []);

  // –§—É–Ω–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É –ø—ñ—Å–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤ –¥—ñ–∞–ª–æ–∑—ñ
  const saveSelectedSlides = useCallback(async (dialogData: SaveLessonDialogData): Promise<Message> => {
    console.log('üíæ SAVE LESSON: Starting save process...');
    console.log('üìã SAVE LESSON: Dialog data received:', {
      title: dialogData.title,
      description: dialogData.description,
      subject: dialogData.subject,
      ageGroup: dialogData.ageGroup,
      selectedPreviewId: dialogData.selectedPreviewId,
      hasPreviewUrl: !!dialogData.previewUrl,
      previewUrlType: dialogData.previewUrl?.startsWith('data:image/') ? 'base64' : 'url'
    });

    if (!slideUIState.currentLesson || slideUIState.selectedSlides.size === 0) {
      console.error('‚ùå SAVE LESSON: No lesson or selected slides');
      throw new Error('–ù–µ–º–∞—î —É—Ä–æ–∫—É –∞–±–æ –≤–∏–±—Ä–∞–Ω–∏—Ö —Å–ª–∞–π–¥—ñ–≤');
    }

    console.log('üìä SAVE LESSON: Current lesson state:', {
      lessonId: slideUIState.currentLesson.id,
      lessonTitle: slideUIState.currentLesson.title,
      totalSlides: slideUIState.currentLesson.slides.length,
      selectedSlidesCount: slideUIState.selectedSlides.size,
      selectedSlideIds: Array.from(slideUIState.selectedSlides)
    });

    setSlideUIState(prev => ({ ...prev, isSavingLesson: true }));

    try {
      const selectedSlides = slideUIState.currentLesson.slides.filter(
        slide => slideUIState.selectedSlides.has(slide.id)
      );

      console.log('üéØ SAVE LESSON: Selected slides for saving:', selectedSlides.map(slide => ({
        id: slide.id,
        title: slide.title,
        type: slide.type,
        hasContent: !!slide.content,
        hasHtmlContent: !!slide.htmlContent,
        contentLength: slide.content?.length || 0,
        htmlContentLength: slide.htmlContent?.length || 0
      })));

      const newLessonId = `lesson_${Date.now()}`;
      let savedPreviewUrl = dialogData.previewUrl || '/images/default-lesson.png';

      console.log('üÜî SAVE LESSON: Generated lesson ID:', newLessonId);
      console.log('üñºÔ∏è SAVE LESSON: Initial preview URL:', savedPreviewUrl);
      console.log('üîç SAVE LESSON: Preview URL analysis:', {
        hasPreviewUrl: !!dialogData.previewUrl,
        isDataUrl: dialogData.previewUrl?.startsWith('data:image/'),
        previewUrlLength: dialogData.previewUrl?.length || 0,
        selectedPreviewId: dialogData.selectedPreviewId,
        hasSelectedPreviewId: !!dialogData.selectedPreviewId
      });

      // –Ø–∫—â–æ —î –ø—Ä–µ–≤—å—é, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –π–æ–≥–æ —è–∫ —Ñ–∞–π–ª
      if (dialogData.previewUrl && dialogData.previewUrl.startsWith('data:image/')) {
        console.log('üì∏ SAVE LESSON: Saving preview image as file...');
        console.log('üìè SAVE LESSON: Preview data size:', Math.round(dialogData.previewUrl.length / 1024), 'KB');
        
        try {
          const previewRequestData = {
            imageData: dialogData.previewUrl,
            lessonId: newLessonId,
            slideId: dialogData.selectedPreviewId || 'main',
            type: 'lesson-thumbnail'
          };
          
          console.log('üì§ SAVE LESSON: Sending preview save request:', {
            lessonId: previewRequestData.lessonId,
            slideId: previewRequestData.slideId,
            type: previewRequestData.type,
            imageDataSize: Math.round(previewRequestData.imageData.length / 1024) + 'KB'
          });

          const previewResponse = await fetch('/api/images/preview', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(previewRequestData)
          });

          if (previewResponse.ok) {
            const previewResult = await previewResponse.json();
            savedPreviewUrl = previewResult.imagePath;
            console.log('‚úÖ SAVE LESSON: Preview saved as file:', savedPreviewUrl);
          } else {
            const errorText = await previewResponse.text();
            console.warn('‚ö†Ô∏è SAVE LESSON: Failed to save preview as file:', {
              status: previewResponse.status,
              statusText: previewResponse.statusText,
              error: errorText
            });
            console.warn('üìã SAVE LESSON: Using base64 preview instead');
          }
        } catch (error) {
          console.error('‚ùå SAVE LESSON: Error saving preview:', error);
        }
      }

      // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è API
      const lessonRequestData = {
        title: dialogData.title.trim(),
        description: dialogData.description.trim(),
        subject: dialogData.subject.trim(),
        targetAge: dialogData.ageGroup.trim(),
        duration: slideUIState.currentLesson.duration,
        thumbnail_url: savedPreviewUrl,
        slides: selectedSlides.map((slide, index) => ({
          title: slide.title,
          description: slide.content,
          htmlContent: slide.htmlContent,
          type: slide.type,
          slideNumber: index + 1
        }))
      };

      console.log('üì§ SAVE LESSON: Sending lesson save request to API:', {
        title: lessonRequestData.title,
        description: lessonRequestData.description,
        subject: lessonRequestData.subject,
        targetAge: lessonRequestData.targetAge,
        duration: lessonRequestData.duration,
        thumbnail_url: lessonRequestData.thumbnail_url,
        slidesCount: lessonRequestData.slides.length,
        slidesData: lessonRequestData.slides.map(slide => ({
          title: slide.title,
          type: slide.type,
          slideNumber: slide.slideNumber,
          hasDescription: !!slide.description,
          hasHtmlContent: !!slide.htmlContent,
          descriptionLength: slide.description?.length || 0,
          htmlContentLength: slide.htmlContent?.length || 0
        }))
      });

      // –°—Ç–≤–æ—Ä—é—î–º–æ —É—Ä–æ–∫ —á–µ—Ä–µ–∑ API (–±–∞–∑–∞ –¥–∞–Ω–∏—Ö)
      const lessonResponse = await fetch('/api/lessons', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(lessonRequestData)
      });

      console.log('üì° SAVE LESSON: API response status:', lessonResponse.status, lessonResponse.statusText);

      if (!lessonResponse.ok) {
        const errorData = await lessonResponse.json();
        console.error('‚ùå SAVE LESSON: API error:', {
          status: lessonResponse.status,
          statusText: lessonResponse.statusText,
          errorData
        });
        throw new Error(errorData.error?.message || '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É—Ä–æ–∫—É');
      }

      const result = await lessonResponse.json();
      console.log('‚úÖ SAVE LESSON: Lesson saved to database successfully!');
      console.log('üìä SAVE LESSON: API response:', {
        success: result.success,
        message: result.message,
        lessonId: result.lesson?.id,
        lessonTitle: result.lesson?.title,
        slidesCount: result.lesson?.slides?.length || 0
      });

      // –û—á–∏—â–∞—î–º–æ –≤–∏–±—ñ—Ä –ø—ñ—Å–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ –∑–∞–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥
      setSlideUIState(prev => ({
        ...prev,
        selectedSlides: new Set<string>(),
        saveDialogOpen: false
      }));

      console.log('üéâ SAVE LESSON: Process completed successfully');

      return {
        id: generateMessageId(),
        text: `‚úÖ **–£—Ä–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö!**\n\nüìö **"${dialogData.title}"** —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–∏—Ö –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤.\n\nüìä **–ó–±–µ—Ä–µ–∂–µ–Ω–æ —Å–ª–∞–π–¥—ñ–≤:** ${selectedSlides.length}\n\nüéØ –í–∏ –º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ —É—Ä–æ–∫ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ [–ú–æ—ó –º–∞—Ç–µ—Ä—ñ–∞–ª–∏](/materials).`,
        sender: 'ai' as const,
        timestamp: new Date(),
        status: 'sent' as const,
        feedback: null
      };

    } catch (error) {
      console.error('‚ùå SAVE LESSON: Error during save process:', error);
      throw error;
    } finally {
      setSlideUIState(prev => ({ ...prev, isSavingLesson: false }));
      console.log('üèÅ SAVE LESSON: Cleanup completed');
    }
  }, [slideUIState.currentLesson, slideUIState.selectedSlides]);

  // –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏–º —É—Ä–æ–∫–æ–º
  const updateCurrentLesson = useCallback((lesson: SimpleLesson | null) => {
    console.log('üîÑ updateCurrentLesson called:', {
      newLesson: lesson ? {
        id: lesson.id,
        title: lesson.title,
        slidesCount: lesson.slides?.length || 0,
        slideIds: lesson.slides?.map(s => s.id) || []
      } : null,
      currentLesson: slideUIState.currentLesson ? {
        id: slideUIState.currentLesson.id,
        title: slideUIState.currentLesson.title,
        slidesCount: slideUIState.currentLesson.slides?.length || 0,
        slideIds: slideUIState.currentLesson.slides?.map(s => s.id) || []
      } : null
    });

    setSlideUIState(prev => {
      // –Ø–∫—â–æ –Ω–æ–≤–∏–π —É—Ä–æ–∫ –∑ —Ç–∏–º –∂–µ ID - —Ü–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ —É—Ä–æ–∫—É
      if (lesson && prev.currentLesson && lesson.id === prev.currentLesson.id) {
        console.log('üîÑ Updating existing lesson with new slides');
        console.log('üìä Previous slides count:', prev.currentLesson.slides?.length || 0);
        console.log('üìä New slides count:', lesson.slides?.length || 0);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –æ–Ω–æ–≤–ª–µ–Ω—ñ —Å–ª–∞–π–¥–∏ —Ç–∞ –æ—á–∏—â–∞—î–º–æ —ó—Ö –∫–µ—à
        const updatedSlides = lesson.slides?.filter(newSlide => {
          const oldSlide = prev.currentLesson?.slides.find(s => s.id === newSlide.id);
          const isUpdated = oldSlide && newSlide.updatedAt && oldSlide.updatedAt && newSlide.updatedAt > oldSlide.updatedAt;
          const isNewlyUpdated = newSlide.updatedAt && newSlide.updatedAt > new Date(Date.now() - 30000); // –û—Å—Ç–∞–Ω–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
          return isUpdated || isNewlyUpdated;
        }) || [];
        
        console.log('üîÑ Updated slides detected:', updatedSlides.map(s => ({ id: s.id, updatedAt: s.updatedAt })));
        
        // –Ø–∫—â–æ —î –æ–Ω–æ–≤–ª–µ–Ω—ñ —Å–ª–∞–π–¥–∏, –æ—á–∏—â–∞—î–º–æ —ó—Ö –∫–µ—à (–ø—Ä–µ–≤—å—é –±—É–¥–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ useEffect)
        if (updatedSlides.length > 0) {
          console.log('üéØ Clearing cache for updated slides');
          
          // –û—á–∏—â–∞—î–º–æ –∫–µ—à –ø—Ä–µ–≤—å—é —Ç–∞ —á–∞—Å –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–∏—Ö —Å–ª–∞–π–¥—ñ–≤
          setSlidePreviews(prevPreviews => {
            const newPreviews = { ...prevPreviews };
            updatedSlides.forEach(slide => {
              delete newPreviews[slide.id];
              delete lastUpdateTimeRef.current[slide.id];
            });
            return newPreviews;
          });
        }
        
        return {
          ...prev,
          currentLesson: lesson  // –ó–∞–º—ñ—â—É—î–º–æ –ø–æ–≤–Ω—ñ—Å—Ç—é, –æ—Å–∫—ñ–ª—å–∫–∏ lesson –≤–∂–µ –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ —Å–ª–∞–π–¥–∏
        };
      }
      
      // –Ü–Ω–∞–∫—à–µ —Ü–µ –Ω–æ–≤–∏–π —É—Ä–æ–∫
      console.log('üÜï Setting new lesson');
      
      // –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫—É
      if (lesson && (!prev.currentLesson || lesson.id !== prev.currentLesson.id)) {
        panelOpenedManuallyRef.current = false;
        console.log('üîÑ –°–∫–∏–¥–∞—î–º–æ —Ñ–ª–∞–≥ —Ä—É—á–Ω–æ–≥–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–∞–Ω–µ–ª—ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫—É');
      }
      
      return {
        ...prev,
        currentLesson: lesson
      };
    });
  }, [slideUIState.currentLesson]);

  // –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ —Å–ª–∞–π–¥—ñ–≤
  const toggleSlidePanelOpen = useCallback(() => {
    // –í—ñ–¥–º—ñ—á–∞—î–º–æ, —â–æ –ø–∞–Ω–µ–ª—å –±—É–ª–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∞/–∑–∞–∫—Ä–∏—Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –≤—Ä—É—á–Ω—É
    panelOpenedManuallyRef.current = true;
    
    setSlideUIState(prev => {
      console.log(`üîÑ ${prev.slidePanelOpen ? '–ó–∞–∫—Ä–∏–≤–∞—î–º–æ' : '–í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ'} –ø–∞–Ω–µ–ª—å —Å–ª–∞–π–¥—ñ–≤ –≤—Ä—É—á–Ω—É`);
      return {
        ...prev,
        slidePanelOpen: !prev.slidePanelOpen
      };
    });
  }, []);

  // –ï–∫—Å–ø–æ—Ä—Ç —É—Ä–æ–∫—É
  const exportLesson = useCallback(() => {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ HTML
    const htmlMessage = messages.find(msg => 
      msg.sender === 'ai' && msg.text.includes('```html')
    );
    if (htmlMessage) {
      const htmlMatch = htmlMessage.text.match(/```html\n([\s\S]*?)\n```/);
      if (htmlMatch) {
        const blob = new Blob([htmlMatch[1]], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${slideUIState.currentLesson?.title.replace(/[^a-zA-Z0-9]/g, '-') || 'lesson'}.html`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      }
    }
  }, [messages, slideUIState.currentLesson?.title]);

  return {
    slideUIState,
    saveDialogData,
    slidePreviews,
    previewsUpdating,
    
    // Slide dialog functions
    openSlideDialog,
    closeSlideDialog,
    goToNextSlide,
    goToPrevSlide,
    
    // Slide selection functions
    toggleSlideSelection,
    selectAllSlides,
    deselectAllSlides,
    
    // Save dialog functions
    openSaveDialog,
    closeSaveDialog,
    handlePreviewSelect,
    updateSaveDialogData,
    saveSelectedSlides,
    
    // Slide preview functions
    generateSlidePreview,
    regenerateSlidePreview,
    forceRefreshAllPreviews,
    
    // Lesson management
    updateCurrentLesson,
    toggleSlidePanelOpen,
    exportLesson
  };
};

export default useSlideManagement; 