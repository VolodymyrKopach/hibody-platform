import { useState, useCallback, useEffect, useRef } from 'react';
import { Message, SimpleLesson } from '@/types/chat';
import { ChatServiceAPIAdapter } from '@/services/chat/ChatServiceAPIAdapter';
import { useRealTimeSlideGeneration } from './useRealTimeSlideGeneration';
import { useSlideProgressSSE } from './useSlideProgressSSE';



export const useChatLogic = () => {
  // Ref –¥–ª—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ callback
  const onLessonUpdateRef = useRef<((lesson: SimpleLesson) => void) | null>(null);
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback
  const setOnLessonUpdate = useCallback((callback: (lesson: SimpleLesson) => void) => {
    onLessonUpdateRef.current = callback;
  }, []);
  const [messages, setMessages] = useState<Message[]>([]);
  const [isTyping, setIsTyping] = useState(false);
  const [inputText, setInputText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [conversationHistory, setConversationHistory] = useState<any>(null);

  // API adapter for client-server communication
  const apiAdapter = new ChatServiceAPIAdapter();
  
  // SSE progress tracking
  const {
    isGenerating: isSSEGenerating,
    currentProgress,
    startGenerationWithProgress
  } = useSlideProgressSSE({
    onProgressUpdate: (data) => {
      console.log('üìä [CHAT] SSE Progress update:', data);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
      setMessages(prevMessages => {
        const newMessages = [...prevMessages];
        const lastMessage = newMessages[newMessages.length - 1];
        
        if (lastMessage && lastMessage.sender === 'ai') {
          // –î–æ–¥–∞—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
          (lastMessage as any).slideGenerationProgress = data.progress;
          (lastMessage as any).isGeneratingSlides = true;
          
          // –û–Ω–æ–≤–ª—é—î–º–æ —É—Ä–æ–∫ —è–∫—â–æ —î
          if (data.lesson) {
            lastMessage.lesson = data.lesson;
            
            // === –í–ò–ö–õ–ò–ö CALLBACK –î–õ–Ø –û–ù–û–í–õ–ï–ù–ù–Ø –ü–ê–ù–ï–õ–Ü –°–õ–ê–ô–î–Ü–í ===
            if (onLessonUpdateRef.current) {
              const slideInfo = data.newSlide ? `with new slide: "${data.newSlide.title}"` : `with ${data.lesson.slides?.length || 0} slides`;
              console.log(`üé® [CHAT] Lesson updated ${slideInfo}`);
              onLessonUpdateRef.current(data.lesson);
            }
          }
            
            // –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ç—Ä–∏–≥–µ—Ä—É useEffect
            return [...newMessages];
        }
        
        return newMessages;
      });
    },
    onCompletion: (data) => {
      console.log('üéâ [CHAT] SSE Generation completed:', data);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
      setMessages(prevMessages => {
        const newMessages = [...prevMessages];
        const lastMessage = newMessages[newMessages.length - 1];
        
        if (lastMessage && lastMessage.sender === 'ai') {
          (lastMessage as any).slideGenerationProgress = data.finalProgress;
          (lastMessage as any).isGeneratingSlides = false;
          lastMessage.lesson = data.lesson;
          
          // === –í–ò–ö–õ–ò–ö CALLBACK –î–õ–Ø –§–Ü–ù–ê–õ–¨–ù–û–ì–û –û–ù–û–í–õ–ï–ù–ù–Ø –ü–ê–ù–ï–õ–Ü –°–õ–ê–ô–î–Ü–í ===
          if (onLessonUpdateRef.current) {
            console.log(`üéâ [CHAT] Final lesson update with ${data.lesson.slides?.length || 0} slides`);
            onLessonUpdateRef.current(data.lesson);
          }
          
          // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –∫–Ω–æ–ø–∫—É —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
          lastMessage.availableActions = lastMessage.availableActions?.filter(
            action => action.action !== 'cancel_generation'
          ) || [];
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ –¥–æ–¥–∞–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
          if (!lastMessage.text.includes('‚úÖ **–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**')) {
            // –ó–∞–º—ñ–Ω—é—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å –Ω–∞ —Ñ—ñ–Ω–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const planSection = lastMessage.text.split('‚è≥ **–ü—Ä–æ–≥—Ä–µ—Å:**')[0];
            lastMessage.text = planSection + `‚úÖ **–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**

–°—Ç–≤–æ—Ä–µ–Ω–æ —Å–ª–∞–π–¥—ñ–≤: ${data.statistics.completedSlides}/${data.statistics.totalSlides}
${data.statistics.failedSlides > 0 ? `–ü–æ–º–∏–ª–æ–∫: ${data.statistics.failedSlides}` : ''}`;
          }
        }
        
        return newMessages;
      });
    },
    onError: (error) => {
      console.error('‚ùå [CHAT] SSE Error:', error);
      
      // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
      const errorMessage: Message = {
        id: Date.now(),
        text: `‚ùå **–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:** ${error}`,
        sender: 'ai',
        timestamp: new Date(),
        status: 'delivered',
        feedback: null
      };
      
      setMessages(prev => [...prev, errorMessage]);
    }
  });
  
  const [generationState, generationActions] = useRealTimeSlideGeneration(
    (lesson) => {
      console.log('üîÑ [CHAT] Lesson updated from parallel generation:', lesson.slides.length, 'slides');
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–∫—Ç—É–∞–ª—å–Ω–∏–º —É—Ä–æ–∫–æ–º
      setMessages(prevMessages => {
        const newMessages = [...prevMessages];
        const lastMessage = newMessages[newMessages.length - 1];
        
        if (lastMessage && lastMessage.sender === 'ai') {
          lastMessage.lesson = lesson;
        }
        
        return newMessages;
      });
    }
  );



  const sendMessage = useCallback(async (message: string) => {
    if (!message.trim() || isLoading) return;

    setIsLoading(true);
    setIsTyping(false);

    // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userMessage: Message = {
      id: Date.now(),
      text: message,
      sender: 'user',
      timestamp: new Date(),
      status: 'sent',
      feedback: null
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');

    try {
      const response = await apiAdapter.sendMessage(message, conversationHistory);
      
      if (!response.success) {
        throw new Error(response.error || 'Unknown error');
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ conversation history
      if (response.conversationHistory) {
        setConversationHistory(response.conversationHistory);
      }

      const aiMessage: Message = {
        id: Date.now() + 1,
        text: response.message,
        sender: 'ai',
        timestamp: new Date(),
        status: 'delivered',
        feedback: null,
        availableActions: response.actions?.map(action => ({
          action: action.action,
          label: action.label,
          description: action.description || ''
        })),
        lesson: response.lesson
      };

      setMessages(prev => [...prev, aiMessage]);

    } catch (error) {
      console.error('Error sending message:', error);
      
      const errorMessage: Message = {
        id: Date.now() + 1,
        text: `–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
        sender: 'ai',
        timestamp: new Date(),
        status: 'delivered',
        feedback: null
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  }, [isLoading, conversationHistory, apiAdapter]);

  const handleActionClick = useCallback(async (action: string) => {
    if (isLoading || !conversationHistory) return;

    setIsLoading(true);

    try {
      // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –¥–ª—è approve_plan - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ SSE –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
      if (action === 'approve_plan' && conversationHistory) {
        console.log('üöÄ [CHAT] Using SSE generation with progress for plan approval');
        
        // –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –ø–ª–∞–Ω –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        const response = await apiAdapter.sendMessage('', conversationHistory, action);
        
        if (!response.success) {
          throw new Error(response.error || 'Unknown error');
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ conversation history
        if (response.conversationHistory) {
          setConversationHistory(response.conversationHistory);
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—á–∞—Ç–∫–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
        const aiMessage: Message = {
          id: Date.now(),
          text: response.message,
          sender: 'ai',
          timestamp: new Date(),
          status: 'delivered',
          feedback: null,
          availableActions: response.actions?.map(action => ({
            action: action.action,
            label: action.label,
            description: action.description || ''
          })),
          lesson: response.lesson
        };

        setMessages(prev => [...prev, aiMessage]);

        // –Ø–∫—â–æ —î –æ–ø–∏—Å–∏ —Å–ª–∞–π–¥—ñ–≤, –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º
        if (response.conversationHistory?.slideDescriptions && response.lesson) {
          try {
            console.log('üéØ [CHAT] Starting SSE slide generation...');
            await startGenerationWithProgress(
              response.conversationHistory.slideDescriptions,
              response.lesson,
              response.conversationHistory.lessonTopic || '—É—Ä–æ–∫',
              response.conversationHistory.lessonAge || '6-8 —Ä–æ–∫—ñ–≤'
            );
          } catch (error) {
            console.error('‚ùå [CHAT] SSE generation failed:', error);
            
            // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            const errorMessage: Message = {
              id: Date.now(),
              text: `‚ùå **–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó:** ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
              sender: 'ai',
              timestamp: new Date(),
              status: 'delivered',
              feedback: null
            };
            
            setMessages(prev => [...prev, errorMessage]);
          }
        }
        
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –¥—ñ–π
        const response = await apiAdapter.sendMessage('', conversationHistory, action);
        
        if (!response.success) {
          throw new Error(response.error || 'Unknown error');
        }

        if (response.conversationHistory) {
          setConversationHistory(response.conversationHistory);
        }

        const aiMessage: Message = {
          id: Date.now(),
          text: response.message,
          sender: 'ai',
          timestamp: new Date(),
          status: 'delivered',
          feedback: null,
          availableActions: response.actions?.map(action => ({
            action: action.action,
            label: action.label,
            description: action.description || ''
          })),
          lesson: response.lesson
        };

        setMessages(prev => [...prev, aiMessage]);
      }

    } catch (error) {
      console.error('Error handling action:', error);
      
      const errorMessage: Message = {
        id: Date.now(),
        text: `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ –¥—ñ—ó: ${error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`,
        sender: 'ai',
        timestamp: new Date(),
        status: 'delivered',
        feedback: null
      };

      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  }, [isLoading, conversationHistory, apiAdapter, generationActions]);

  const regenerateMessage = useCallback(async (messageId: number) => {
    // –†–µ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    console.log('Regenerating message:', messageId);
  }, []);

  const handleFeedback = useCallback((messageId: number, feedback: 'like' | 'dislike') => {
    setMessages(prev => 
      prev.map(msg => 
        msg.id === messageId ? { ...msg, feedback } : msg
      )
    );
  }, []);

  return {
    messages,
    setMessages,
    isTyping,
    inputText,
    setInputText,
    isLoading,
    sendMessage,
    regenerateMessage,
    handleFeedback,
    handleActionClick,
    
    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–∞—Ä–∞–ª–µ–ª—å–Ω—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é
    generationState,
    generationActions,
    
    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ SSE –ø—Ä–æ–≥—Ä–µ—Å
    isSSEGenerating,
    currentProgress,
    
    // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É—Ä–æ–∫—É
    setOnLessonUpdate
  };
}; 