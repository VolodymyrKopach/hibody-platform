#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å RLS –ø–æ–ª—ñ—Ç–∏–∫ Supabase Storage
 * –í–∏–ø—Ä–∞–≤–ª—è—î –ø—Ä–æ–±–ª–µ–º—É 403 Unauthorized –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Supabase –∫–ª—ñ—î–Ω—Ç–∞ –∑ service role
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå –ü–æ–º–∏–ª–∫–∞: –í—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ NEXT_PUBLIC_SUPABASE_URL –∞–±–æ SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function applyStorageFix() {
  console.log('üîß –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω—å RLS –ø–æ–ª—ñ—Ç–∏–∫ –¥–ª—è Storage...\n');

  const queries = [
    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –ø–æ–ª—ñ—Ç–∏–∫–∏
    `DROP POLICY IF EXISTS "Users can upload their own lesson assets" ON storage.objects;`,
    `DROP POLICY IF EXISTS "Users can view their own lesson assets" ON storage.objects;`,
    `DROP POLICY IF EXISTS "Users can update their own lesson assets" ON storage.objects;`,
    `DROP POLICY IF EXISTS "Users can delete their own lesson assets" ON storage.objects;`,
    `DROP POLICY IF EXISTS "Public access to lesson thumbnails" ON storage.objects;`,
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—ñ –ø–æ–ª—ñ—Ç–∏–∫–∏
    `CREATE POLICY "Users can upload lesson assets" ON storage.objects
     FOR INSERT WITH CHECK (
       bucket_id = 'lesson-assets' AND (
         auth.uid()::text = (storage.foldername(name))[1] OR
         (storage.foldername(name))[1] = 'lesson-thumbnails' OR
         (storage.foldername(name))[1] = 'lessons'
       )
     );`,
     
    `CREATE POLICY "Users can view lesson assets" ON storage.objects
     FOR SELECT USING (
       bucket_id = 'lesson-assets' AND (
         auth.uid()::text = (storage.foldername(name))[1] OR
         (storage.foldername(name))[1] = 'lesson-thumbnails' OR
         (storage.foldername(name))[1] = 'lessons'
       )
     );`,
     
    `CREATE POLICY "Users can update lesson assets" ON storage.objects
     FOR UPDATE USING (
       bucket_id = 'lesson-assets' AND (
         auth.uid()::text = (storage.foldername(name))[1] OR
         (storage.foldername(name))[1] = 'lesson-thumbnails' OR
         (storage.foldername(name))[1] = 'lessons'
       )
     );`,
     
    `CREATE POLICY "Users can delete lesson assets" ON storage.objects
     FOR DELETE USING (
       bucket_id = 'lesson-assets' AND (
         auth.uid()::text = (storage.foldername(name))[1] OR
         (storage.foldername(name))[1] = 'lesson-thumbnails' OR
         (storage.foldername(name))[1] = 'lessons'
       )
     );`,
     
    `CREATE POLICY "Public access to lesson files" ON storage.objects
     FOR SELECT USING (
       bucket_id = 'lesson-assets' AND (
         (storage.foldername(name))[1] = 'lesson-thumbnails' OR
         (storage.foldername(name))[1] = 'lessons'
       )
     );`
  ];

  let success = 0;
  let errors = 0;

  for (let i = 0; i < queries.length; i++) {
    const query = queries[i];
    console.log(`${i + 1}/${queries.length} –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É...`);
    console.log(`üìù ${query.substring(0, 80)}...`);
    
    try {
      const { error } = await supabase.rpc('exec_sql', { sql: query });
      
      if (error) {
        console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
        errors++;
      } else {
        console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–æ`);
        success++;
      }
    } catch (err) {
      console.error(`‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${err.message}`);
      errors++;
    }
    
    console.log('');
  }

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:`);
  console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${success}`);
  console.log(`‚ùå –ü–æ–º–∏–ª–∫–∏: ${errors}`);

  if (errors === 0) {
    console.log(`\nüéâ –í—Å—ñ RLS –ø–æ–ª—ñ—Ç–∏–∫–∏ Storage —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!`);
    console.log(`\nüìù –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ —Ñ–∞–π–ª–∏ –≤:`);
    console.log(`   - lesson-thumbnails/{lessonId}/...`);
    console.log(`   - lessons/{lessonId}/...`);
    console.log(`   - {userId}/...`);
  } else {
    console.log(`\n‚ö†Ô∏è –î–µ—è–∫—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—è –∑ –ø–æ–º–∏–ª–∫–∞–º–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ –≤–∏—â–µ.`);
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  try {
    await applyStorageFix();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
} 