const puppeteer = require('puppeteer');

async function testLogout() {
  console.log('üöÄ Starting logout test...');
  
  const browser = await puppeteer.launch({ 
    headless: false, 
    devtools: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });
  
  const page = await browser.newPage();
  
  // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
  page.on('console', msg => {
    console.log('üñ•Ô∏è BROWSER:', msg.text());
  });
  
  page.on('pageerror', error => {
    console.error('‚ùå PAGE ERROR:', error.message);
  });
  
  try {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    console.log('üìÑ Navigating to test page...');
    await page.goto('http://localhost:3000/test', { waitUntil: 'networkidle2' });
    
    // –ß–µ–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    await page.waitForTimeout(2000);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–º
    const isLoggedIn = await page.evaluate(() => {
      const logoutButton = document.querySelector('button[variant="outlined"]');
      return logoutButton && logoutButton.textContent.includes('–í–∏–π—Ç–∏');
    });
    
    if (isLoggedIn) {
      console.log('‚úÖ User is logged in, testing logout...');
      
      // –ù–∞—Ç–∏—Å–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ª–æ–≥–∞—É—Ç—É
      await page.click('button[variant="outlined"]');
      console.log('üñ±Ô∏è Clicked logout button');
      
      // –ß–µ–∫–∞—î–º–æ –Ω–∞ –∑–º—ñ–Ω–∏
      await page.waitForTimeout(3000);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const isLoggedOut = await page.evaluate(() => {
        const loginForm = document.querySelector('form');
        return loginForm !== null;
      });
      
      if (isLoggedOut) {
        console.log('‚úÖ Logout successful - login form is visible');
      } else {
        console.log('‚ùå Logout failed - user still appears to be logged in');
      }
      
    } else {
      console.log('‚ö†Ô∏è User is not logged in, cannot test logout');
    }
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  }
  
  // –ó–∞–ª–∏—à–∞—î–º–æ –±—Ä–∞—É–∑–µ—Ä –≤—ñ–¥–∫—Ä–∏—Ç–∏–º –¥–ª—è —ñ–Ω—Å–ø–µ–∫—Ü—ñ—ó
  console.log('üîç Browser left open for inspection. Close manually when done.');
  // await browser.close();
}

testLogout().catch(console.error); 