require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testSlideCreation() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤ –≤ –ë–î...\n');

  try {
    // 1. –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const { data: users, error: userError } = await supabase
      .from('user_profiles')
      .select('*')
      .limit(1);

    if (userError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userError);
      return;
    }

    if (!users || users.length === 0) {
      console.error('‚ùå –ù–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö');
      return;
    }

    const testUser = users[0];
    console.log('‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', testUser.email);

    // 2. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π —É—Ä–æ–∫
    const lessonData = {
      title: '–¢–µ—Å—Ç–æ–≤–∏–π —É—Ä–æ–∫ –¥–ª—è —Å–ª–∞–π–¥—ñ–≤',
      description: '–£—Ä–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤ –≤ –ë–î',
      subject: '—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è',
      age_group: '6-7',
      duration: 30,
      user_id: testUser.id,
      status: 'draft',
      is_public: false
    };

    const { data: lesson, error: lessonError } = await supabase
      .from('lessons')
      .insert(lessonData)
      .select()
      .single();

    if (lessonError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—Ä–æ–∫—É:', lessonError);
      return;
    }

    console.log('‚úÖ –£—Ä–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ:', lesson.title, '(ID:', lesson.id + ')');

    // 3. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Å–ª–∞–π–¥–∏
    const slidesData = [
      {
        lesson_id: lesson.id,
        title: '–í—ñ—Ç–∞–ª—å–Ω–∏–π —Å–ª–∞–π–¥',
        description: '–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ –∑–Ω–∞–π–æ–º—Å—Ç–≤–æ –∑ —Ç–µ–º–æ—é',
        type: 'welcome',
        icon: 'üëã',
        slide_number: 1,
        status: 'ready',
        preview_text: '–ü—Ä–∏–≤—ñ—Ç! –°—å–æ–≥–æ–¥–Ω—ñ –º–∏ –≤–∏–≤—á–∞—î–º–æ —Ü—ñ–∫–∞–≤—É —Ç–µ–º—É!',
        html_content: '<h1>–ü—Ä–∏–≤—ñ—Ç! –°—å–æ–≥–æ–¥–Ω—ñ –º–∏ –≤–∏–≤—á–∞—î–º–æ —Ü—ñ–∫–∞–≤—É —Ç–µ–º—É!</h1>',
        metadata: {
          generatedContent: true,
          testData: true
        }
      },
      {
        lesson_id: lesson.id,
        title: '–û—Å–Ω–æ–≤–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª',
        description: '–ü–æ–¥–∞—á–∞ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É',
        type: 'content',
        icon: 'üìö',
        slide_number: 2,
        status: 'ready',
        preview_text: '–û—Å–Ω–æ–≤–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª —É—Ä–æ–∫—É',
        html_content: '<h1>–û—Å–Ω–æ–≤–Ω–∏–π –º–∞—Ç–µ—Ä—ñ–∞–ª</h1><p>–¢—É—Ç –±—É–¥–µ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç —É—Ä–æ–∫—É.</p>',
        metadata: {
          generatedContent: true,
          testData: true
        }
      },
      {
        lesson_id: lesson.id,
        title: '–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è',
        description: '–ó–∞–∫—Ä—ñ–ø–ª–µ–Ω–Ω—è –∑–Ω–∞–Ω—å',
        type: 'activity',
        icon: 'üéØ',
        slide_number: 3,
        status: 'draft',
        preview_text: '–ß–∞—Å –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏!',
        html_content: '<h1>–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è</h1><p>–î–∞–≤–∞–π—Ç–µ –∑–∞–∫—Ä—ñ–ø–∏–º–æ –≤–∏–≤—á–µ–Ω–µ!</p>',
        metadata: {
          generatedContent: true,
          testData: true
        }
      }
    ];

    const { data: slides, error: slidesError } = await supabase
      .from('slides')
      .insert(slidesData)
      .select();

    if (slidesError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤:', slidesError);
      return;
    }

    console.log('‚úÖ –°–ª–∞–π–¥–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ:', slides.length, '—Å–ª–∞–π–¥—ñ–≤');
    slides.forEach((slide, index) => {
      console.log(`   ${index + 1}. ${slide.title} (${slide.type}) - ${slide.status}`);
    });

    // 4. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è - –æ—Ç—Ä–∏–º—É—î–º–æ —Å–ª–∞–π–¥–∏ –Ω–∞–∑–∞–¥
    const { data: retrievedSlides, error: retrieveError } = await supabase
      .from('slides')
      .select('*')
      .eq('lesson_id', lesson.id)
      .order('slide_number');

    if (retrieveError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤:', retrieveError);
      return;
    }

    console.log('\n‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è:');
    console.log('   –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Å–ª–∞–π–¥—ñ–≤:', retrievedSlides.length);
    retrievedSlides.forEach((slide, index) => {
      console.log(`   ${index + 1}. ${slide.title} - ${slide.status} (${slide.processing_status})`);
    });

    // 5. –¢–µ—Å—Ç—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ª–∞–π–¥—É
    const slideToUpdate = retrievedSlides[0];
    const { data: updatedSlide, error: updateError } = await supabase
      .from('slides')
      .update({
        title: '–û–Ω–æ–≤–ª–µ–Ω–∏–π –≤—ñ—Ç–∞–ª—å–Ω–∏–π —Å–ª–∞–π–¥',
        status: 'ready',
        html_content: '<h1>–û–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç!</h1><p>–°–ª–∞–π–¥ –±—É–≤ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π.</p>'
      })
      .eq('id', slideToUpdate.id)
      .select()
      .single();

    if (updateError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ª–∞–π–¥—É:', updateError);
    } else {
      console.log('‚úÖ –°–ª–∞–π–¥ –æ–Ω–æ–≤–ª–µ–Ω–æ:', updatedSlide.title);
    }

    // 6. –¢–µ—Å—Ç—É—î–º–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Å–ª–∞–π–¥—É
    const slideToDelete = retrievedSlides[retrievedSlides.length - 1];
    const { error: deleteError } = await supabase
      .from('slides')
      .delete()
      .eq('id', slideToDelete.id);

    if (deleteError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ª–∞–π–¥—É:', deleteError);
    } else {
      console.log('‚úÖ –°–ª–∞–π–¥ –≤–∏–¥–∞–ª–µ–Ω–æ:', slideToDelete.title);
    }

    // 7. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
    const { data: finalSlides, error: finalError } = await supabase
      .from('slides')
      .select('*')
      .eq('lesson_id', lesson.id)
      .order('slide_number');

    if (finalError) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', finalError);
    } else {
      console.log('\n‚úÖ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω:');
      console.log('   –°–ª–∞–π–¥—ñ–≤ –∑–∞–ª–∏—à–∏–ª–æ—Å—å:', finalSlides.length);
      finalSlides.forEach((slide, index) => {
        console.log(`   ${index + 1}. ${slide.title} - ${slide.status}`);
      });
    }

    console.log('\nüéâ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–ª–∞–π–¥—ñ–≤ –≤ –ë–î –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ');

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
  }
}

testSlideCreation(); 